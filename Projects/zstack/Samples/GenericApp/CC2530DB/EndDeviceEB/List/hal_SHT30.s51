///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.10.1.2146 for 8051               30/Sep/2016  10:51:27
// Copyright 2004-2014 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Components\hal\target\CC2530EB\hal_SHT30.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
//        Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Components\hal\target\CC2530EB\hal_SHT30.c" -D NWK_AUTO_POLL
//        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D HAL_UART=TRUE
//        -D HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D xLCD_SUPPORTED=DEBUG -D
//        xPOWER_SAVING -lC "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\"
//        -lA "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
//        Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\hal_SHT30.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME hal_SHT30

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?UL_DIV_MOD
        EXTERN __INIT_XDATA_Z

        PUBLIC ??HalI2CDelay?relay
        FUNCTION ??HalI2CDelay?relay,0203H
        PUBLIC ??HalSHT30I2cReadOneByte?relay
        FUNCTION ??HalSHT30I2cReadOneByte?relay,0203H
        PUBLIC ??HalSHT30I2cStart?relay
        FUNCTION ??HalSHT30I2cStart?relay,0203H
        PUBLIC ??HalSHT30I2cStop?relay
        FUNCTION ??HalSHT30I2cStop?relay,0203H
        PUBLIC ??HalSHT30I2cWriteOneByte?relay
        FUNCTION ??HalSHT30I2cWriteOneByte?relay,0203H
        PUBLIC ??HalSHT30Init?relay
        FUNCTION ??HalSHT30Init?relay,0203H
        PUBLIC ??HalSHT30ReadData?relay
        FUNCTION ??HalSHT30ReadData?relay,0203H
        PUBLIC ??HalSHT30WriteCmd?relay
        FUNCTION ??HalSHT30WriteCmd?relay,0203H
        PUBLIC CollectCount
        PUBLIC HalI2CDelay
        FUNCTION HalI2CDelay,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC HalSHT30I2cReadOneByte
        FUNCTION HalSHT30I2cReadOneByte,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalSHT30I2cStart
        FUNCTION HalSHT30I2cStart,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalSHT30I2cStop
        FUNCTION HalSHT30I2cStop,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalSHT30I2cWriteOneByte
        FUNCTION HalSHT30I2cWriteOneByte,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalSHT30Init
        FUNCTION HalSHT30Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalSHT30ReadData
        FUNCTION HalSHT30ReadData,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC HalSHT30WriteCmd
        FUNCTION HalSHT30WriteCmd,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Humidity
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK P2DIR
        PUBWEAK P2SEL
        PUBLIC Temperature
        PUBWEAK _A_P0
        PUBWEAK _A_P2
        PUBWEAK __Constant_64
        PUBWEAK __Constant_6d6
        PUBWEAK __Constant_ffff
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalI2CDelay         SYMBOL "HalI2CDelay"
??HalI2CDelay?relay SYMBOL "?relay", HalI2CDelay
HalSHT30I2cReadOneByte SYMBOL "HalSHT30I2cReadOneByte"
??HalSHT30I2cReadOneByte?relay SYMBOL "?relay", HalSHT30I2cReadOneByte
HalSHT30I2cStart    SYMBOL "HalSHT30I2cStart"
??HalSHT30I2cStart?relay SYMBOL "?relay", HalSHT30I2cStart
HalSHT30I2cStop     SYMBOL "HalSHT30I2cStop"
??HalSHT30I2cStop?relay SYMBOL "?relay", HalSHT30I2cStop
HalSHT30I2cWriteOneByte SYMBOL "HalSHT30I2cWriteOneByte"
??HalSHT30I2cWriteOneByte?relay SYMBOL "?relay", HalSHT30I2cWriteOneByte
HalSHT30Init        SYMBOL "HalSHT30Init"
??HalSHT30Init?relay SYMBOL "?relay", HalSHT30Init
HalSHT30ReadData    SYMBOL "HalSHT30ReadData"
??HalSHT30ReadData?relay SYMBOL "?relay", HalSHT30ReadData
HalSHT30WriteCmd    SYMBOL "HalSHT30WriteCmd"
??HalSHT30WriteCmd?relay SYMBOL "?relay", HalSHT30WriteCmd

// C:\Texas Instruments\Z-Stack Mesh v1.0.0\Components\hal\target\CC2530EB\hal_SHT30.c
//    1 
//    2 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//    3 #include "hal_SHT30.h"
//    4 
//    5 
//    6 /* SDA is at P0.4 */
//    7 #define HAL_SDA_PORT   P0
//    8 #define HAL_SDA_BIT    BV(4)
//    9 #define HAL_SDA_SEL    P0SEL
//   10 #define HAL_SDA_DIR    P0DIR
//   11 
//   12 /* SCL is at P2.0 */
//   13 #define HAL_SCL_PORT   P2
//   14 #define HAL_SCL_BIT    BV(0)
//   15 #define HAL_SCL_SEL    P2SEL
//   16 #define HAL_SCL_DIR    P2DIR
//   17 
//   18 #define HAL_SHT30_I2C_ADDR  0x88
//   19 #define HAL_SHT30_I2C_ACK 0
//   20 #define HAL_SHT30_I2C_NACK 1
//   21 #define HAL_SHT30_PERIODIC_CMD_MSB   0x21//   1 second
//   22 #define HAL_SHT30_PERIODIC_CMD_LSB   0x2D//   Low Repeatability, 2.5~3ms
//   23 
//   24 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   25 int16 Temperature = 0;//   *0.1c
Temperature:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   26 uint8 Humidity = 0;//   0~100%
Humidity:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   27 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   28 uint8 CollectCount;
CollectCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   29 void HalI2CDelay(void);
//   30 void HalSHT30I2cStart(void);
//   31 void HalSHT30I2cStop(void);
//   32 uint8 HalSHT30I2cReadOneByte(uint8 ACK);
//   33 uint8 HalSHT30I2cWriteOneByte(uint8 Dat);
//   34 uint8 HalSHT30WriteCmd(uint8 TMP_MSB, uint8 TMP_LSB);
//   35 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   36 void HalI2CDelay(void)
HalI2CDelay:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function HalI2CDelay
        CODE
//   37 {
        ; Saved register size: 0
        ; Auto size: 0
//   38   uint8 x;
//   39   
//   40   for(x = 0; x < 5; x++)
        MOV     A,#0x5
//   41   {
//   42     asm("NOP");asm("NOP");
??HalI2CDelay_0:
        NOP
        NOP
//   43     asm("NOP");asm("NOP");
        NOP
        NOP
//   44     asm("NOP");asm("NOP");
        NOP
        NOP
//   45     asm("NOP");asm("NOP");
        NOP
        NOP
//   46     asm("NOP");asm("NOP");
        NOP
        NOP
//   47   }
        DEC     A
        JNZ     ??HalI2CDelay_0
//   48 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   49 void HalSHT30I2cStart(void)
HalSHT30I2cStart:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function HalSHT30I2cStart
        CODE
//   50 {
        FUNCALL HalSHT30I2cStart, HalI2CDelay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30I2cStart, HalI2CDelay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   51   HAL_SCL_SEL &= ~(HAL_SCL_BIT);    /* Set SCL pin function to GPIO */
        ANL     0xf5,#0xfe
//   52   HAL_SCL_DIR &= ~(HAL_SCL_BIT);    /* Set SCL pin direction to Input */
        ANL     0xff,#0xfe
//   53   HAL_SDA_SEL &= ~(HAL_SDA_BIT);    /* Set SDA pin function to GPIO */
        ANL     0xf3,#0xef
//   54   HAL_SDA_DIR &= ~(HAL_SDA_BIT);    /* Set SDA pin direction to Input */
        ANL     0xfd,#0xef
//   55   
//   56   HalI2CDelay();
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//   57   
//   58   HAL_SDA_DIR |= HAL_SDA_BIT;    /* Set SDA pin direction to Output */
        LCALL   ?Subroutine3 & 0xFFFF
//   59   HAL_SDA_PORT &= ~(HAL_SDA_BIT);
//   60       
//   61   HalI2CDelay();
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//   62   
//   63   HAL_SCL_DIR |= HAL_SCL_BIT;    /* Set SCL pin direction to Output */
        LCALL   ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock1
//   64   HAL_SCL_PORT &= ~(HAL_SCL_BIT);
//   65 }
??CrossCallReturnLabel_0:
        REQUIRE ?Subroutine0
        REQUIRE P2SEL
        REQUIRE P2DIR
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE _A_P0
        REQUIRE _A_P2
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock2
//   66 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   67 void HalSHT30I2cStop(void)
HalSHT30I2cStop:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function HalSHT30I2cStop
        CODE
//   68 {
        FUNCALL HalSHT30I2cStop, HalI2CDelay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30I2cStop, HalI2CDelay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   69   HAL_SDA_DIR |= HAL_SDA_BIT;    /* Set SDA pin direction to Output */
        LCALL   ?Subroutine3 & 0xFFFF
//   70   HAL_SDA_PORT &= ~(HAL_SDA_BIT);
//   71       
//   72   HalI2CDelay();
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//   73   
//   74   HAL_SCL_DIR &= ~(HAL_SCL_BIT);    /* Set SCL pin direction to Input */
        ANL     0xff,#0xfe
//   75   
//   76   HalI2CDelay();
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//   77   
//   78   HAL_SDA_DIR &= ~(HAL_SDA_BIT);    /* Set SDA pin direction to Input */
        ANL     0xfd,#0xef
//   79   
//   80 }
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock3
        REQUIRE P0DIR
        REQUIRE _A_P0
        REQUIRE P2DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   81 uint8 HalSHT30I2cReadOneByte(uint8 ACK)
HalSHT30I2cReadOneByte:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function HalSHT30I2cReadOneByte
        CODE
//   82 {
        FUNCALL HalSHT30I2cReadOneByte, HalI2CDelay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30I2cReadOneByte, HalI2CDelay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30I2cReadOneByte, HalI2CDelay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30I2cReadOneByte, HalI2CDelay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     ?V0,R1
//   83   uint8 i;
//   84   uint8 ucRet = 0;
        MOV     R6,#0x0
//   85   
//   86   HAL_SDA_DIR &= ~(HAL_SDA_BIT);    /* Set SDA pin direction to Input */
        ANL     0xfd,#0xef
//   87   for ( i = 0 ; i < 8 ;  i ++)
        MOV     R7,#0x8
//   88   {
//   89     HAL_SCL_DIR &= ~(HAL_SCL_BIT);    /* Set SCL pin direction to Input */
??HalSHT30I2cReadOneByte_0:
        ANL     0xff,#0xfe
//   90     ucRet <<= 1;
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R6,A
//   91     HalI2CDelay();
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//   92     if(HAL_SDA_PORT & HAL_SDA_BIT)
        MOV     C,0x80.4
        JNC     ??HalSHT30I2cReadOneByte_1
//   93     {
//   94 	ucRet ++;
        INC     R6
//   95     }
//   96     HAL_SCL_DIR |= HAL_SCL_BIT;    /* Set SCL pin direction to Output */
??HalSHT30I2cReadOneByte_1:
        LCALL   ?Subroutine2 & 0xFFFF
//   97     HAL_SCL_PORT &= ~(HAL_SCL_BIT);
//   98     HalI2CDelay();
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//   99   }
        DEC     R7
        MOV     A,R7
        JNZ     ??HalSHT30I2cReadOneByte_0
//  100   if(ACK == HAL_SHT30_I2C_ACK)
        MOV     A,?V0
        JNZ     ??CrossCallReturnLabel_8
//  101   {
//  102     HAL_SDA_DIR |= HAL_SDA_BIT;    /* Set SDA pin direction to Output */
        LCALL   ?Subroutine3 & 0xFFFF
//  103     HAL_SDA_PORT &= ~(HAL_SDA_BIT);
//  104   }
//  105   HalI2CDelay();
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//  106   HAL_SCL_DIR &= ~(HAL_SCL_BIT);    /* Set SCL pin direction to Input */
        ANL     0xff,#0xfe
//  107   HalI2CDelay();
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//  108   HAL_SCL_DIR |= HAL_SCL_BIT;    /* Set SCL pin direction to Output */
        LCALL   ?Subroutine2 & 0xFFFF
//  109   HAL_SCL_PORT &= ~(HAL_SCL_BIT);
//  110 	
//  111   return ucRet;
??CrossCallReturnLabel_2:
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock4
        REQUIRE P0DIR
        REQUIRE P2DIR
        REQUIRE _A_P0
        REQUIRE _A_P2
//  112 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function HalSHT30I2cStart
          CFI Conditional ??CrossCallReturnLabel_6
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function HalSHT30I2cStop
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond6) CFA_SP SP+-7
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function HalSHT30I2cReadOneByte
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function HalSHT30I2cWriteOneByte
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        ORL     0xfd,#0x10
        CLR     0x80.4
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function HalSHT30I2cStart
          CFI Conditional ??CrossCallReturnLabel_0
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function HalSHT30I2cReadOneByte
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function HalSHT30I2cReadOneByte
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function HalSHT30I2cWriteOneByte
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function HalSHT30I2cWriteOneByte
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function HalSHT30I2cWriteOneByte
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        ORL     0xff,#0x1
        CLR     0xa0.0
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16
//  113 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  114 uint8 HalSHT30I2cWriteOneByte(uint8 Dat)
HalSHT30I2cWriteOneByte:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function HalSHT30I2cWriteOneByte
        CODE
//  115 {
        FUNCALL HalSHT30I2cWriteOneByte, HalI2CDelay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30I2cWriteOneByte, HalI2CDelay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30I2cWriteOneByte, HalI2CDelay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30I2cWriteOneByte, HalI2CDelay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30I2cWriteOneByte, HalI2CDelay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30I2cWriteOneByte, HalI2CDelay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30I2cWriteOneByte, HalI2CDelay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  116   uint8 i;
//  117 
//  118   for(i = 0; i < 8; i++)
        MOV     R6,#0x8
//  119   {
//  120     HAL_SCL_DIR |= HAL_SCL_BIT;    /* Set SCL pin direction to Output */
??HalSHT30I2cWriteOneByte_0:
        LCALL   ?Subroutine2 & 0xFFFF
//  121     HAL_SCL_PORT &= ~(HAL_SCL_BIT);
//  122     HalI2CDelay();
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//  123     if(Dat & 0x80)
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        JNC     ??HalSHT30I2cWriteOneByte_1
//  124     {
//  125       HAL_SDA_DIR &= ~(HAL_SDA_BIT);    /* Set SDA pin direction to Input */
        ANL     0xfd,#0xef
        SJMP    ??CrossCallReturnLabel_9
//  126     }
//  127     else
//  128     {
//  129       HAL_SDA_DIR |= HAL_SDA_BIT;    /* Set SDA pin direction to Output */
??HalSHT30I2cWriteOneByte_1:
        LCALL   ?Subroutine3 & 0xFFFF
//  130       HAL_SDA_PORT &= ~(HAL_SDA_BIT);
//  131     }
//  132     Dat<<=1;
??CrossCallReturnLabel_9:
        CLR     C
        RLC     A
        MOV     R7,A
//  133     HalI2CDelay();
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//  134     HAL_SCL_DIR &= ~(HAL_SCL_BIT);    /* Set SCL pin direction to Input */
        ANL     0xff,#0xfe
//  135     HalI2CDelay();
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//  136   }
        DEC     R6
        MOV     A,R6
        JNZ     ??HalSHT30I2cWriteOneByte_0
//  137   HAL_SCL_DIR |= HAL_SCL_BIT;    /* Set SCL pin direction to Output */
        LCALL   ?Subroutine2 & 0xFFFF
//  138   HAL_SCL_PORT &= ~(HAL_SCL_BIT);
//  139   HalI2CDelay();
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//  140   HAL_SDA_DIR &= ~(HAL_SDA_BIT);    /* Set SDA pin direction to Input */
        ANL     0xfd,#0xef
//  141   HalI2CDelay();
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//  142   HAL_SCL_DIR &= ~(HAL_SCL_BIT);    /* Set SCL pin direction to Input */
        ANL     0xff,#0xfe
//  143   HalI2CDelay();
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//  144   if(HAL_SDA_PORT & HAL_SDA_BIT)// err
        MOV     C,0x80.4
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        JNC     ??HalSHT30I2cWriteOneByte_2
//  145   {
//  146     HAL_SCL_DIR |= HAL_SCL_BIT;    /* Set SCL pin direction to Output */
//  147     HAL_SCL_PORT &= ~(HAL_SCL_BIT);
//  148     return(1);
        MOV     R1,#0x1
        SJMP    ??HalSHT30I2cWriteOneByte_3
//  149   }
//  150   HAL_SCL_DIR |= HAL_SCL_BIT;    /* Set SCL pin direction to Output */
//  151   HAL_SCL_PORT &= ~(HAL_SCL_BIT);
//  152   HalI2CDelay();
??HalSHT30I2cWriteOneByte_2:
        ; Setup parameters for call to function HalI2CDelay
        LCALL   ??HalI2CDelay?relay  ; Banked call to: HalI2CDelay
//  153   return(0);// success
        MOV     R1,#0x0
??HalSHT30I2cWriteOneByte_3:
        SJMP    ??Subroutine4_0
          CFI EndBlock cfiBlock17
        REQUIRE P2DIR
        REQUIRE _A_P2
        REQUIRE P0DIR
        REQUIRE _A_P0
//  154 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,R6
        MOV     R1,A
          CFI EndBlock cfiBlock18
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock19
//  155 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  156 uint8 HalSHT30WriteCmd(uint8 TMP_MSB, uint8 TMP_LSB)
HalSHT30WriteCmd:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function HalSHT30WriteCmd
        CODE
//  157 {
        FUNCALL HalSHT30WriteCmd, HalSHT30I2cStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30WriteCmd, HalSHT30I2cWriteOneByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30WriteCmd, HalSHT30I2cWriteOneByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30WriteCmd, HalSHT30I2cWriteOneByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30WriteCmd, HalSHT30I2cStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     A,R2
        MOV     R7,A
//  158   uint8 Ret;
//  159   
//  160   HalSHT30I2cStart();
        ; Setup parameters for call to function HalSHT30I2cStart
        LCALL   ??HalSHT30I2cStart?relay; Banked call to: HalSHT30I2cStart
//  161   
//  162   Ret = HalSHT30I2cWriteOneByte(HAL_SHT30_I2C_ADDR);
        ; Setup parameters for call to function HalSHT30I2cWriteOneByte
        MOV     R1,#-0x78
        LCALL   ??HalSHT30I2cWriteOneByte?relay; Banked call to: HalSHT30I2cWriteOneByte
        MOV     A,R1
        MOV     R6,A
//  163   
//  164   if(Ret != 0)
        JNZ     ??HalSHT30WriteCmd_0
//  165   {
//  166     HalSHT30I2cStop();
//  167     return(Ret);
//  168   }
//  169   
//  170   Ret = HalSHT30I2cWriteOneByte(TMP_MSB);
        ; Setup parameters for call to function HalSHT30I2cWriteOneByte
        MOV     R1,?V0
        LCALL   ??HalSHT30I2cWriteOneByte?relay; Banked call to: HalSHT30I2cWriteOneByte
        MOV     A,R1
        MOV     R6,A
//  171   
//  172   if(Ret != 0)
        JNZ     ??HalSHT30WriteCmd_0
//  173   {
//  174     HalSHT30I2cStop();
//  175     return(Ret);
//  176   }
//  177   
//  178   Ret = HalSHT30I2cWriteOneByte(TMP_LSB);
        ; Setup parameters for call to function HalSHT30I2cWriteOneByte
        MOV     A,R7
        MOV     R1,A
        LCALL   ??HalSHT30I2cWriteOneByte?relay; Banked call to: HalSHT30I2cWriteOneByte
        MOV     A,R1
        MOV     R6,A
//  179   
//  180   if(Ret != 0)
        JZ      ??HalSHT30WriteCmd_1
//  181   {
//  182     HalSHT30I2cStop();
??HalSHT30WriteCmd_0:
        ; Setup parameters for call to function HalSHT30I2cStop
        LCALL   ??HalSHT30I2cStop?relay; Banked call to: HalSHT30I2cStop
//  183     return(Ret);
        MOV     A,R6
        MOV     R1,A
        SJMP    ??HalSHT30WriteCmd_2
//  184   }
//  185   
//  186   return(0);// success
??HalSHT30WriteCmd_1:
        MOV     R1,#0x0
??HalSHT30WriteCmd_2:
        SJMP    ??Subroutine4_0
          CFI EndBlock cfiBlock20
//  187 }
//  188 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  189 uint8 HalSHT30Init(void)
HalSHT30Init:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function HalSHT30Init
        CODE
//  190 {
        FUNCALL HalSHT30Init, HalSHT30WriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30Init, HalSHT30WriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30Init, HalSHT30I2cStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  191   uint8 Ret;
//  192   
//  193   Ret = HalSHT30WriteCmd(HAL_SHT30_PERIODIC_CMD_MSB, HAL_SHT30_PERIODIC_CMD_LSB);
        ; Setup parameters for call to function HalSHT30WriteCmd
        MOV     R2,#0x2d
        MOV     R1,#0x21
        LCALL   ??HalSHT30WriteCmd?relay; Banked call to: HalSHT30WriteCmd
        MOV     A,R1
        MOV     R6,A
//  194   if(Ret != 0)
        JZ      ??HalSHT30Init_0
//  195   {
//  196     Ret = HalSHT30WriteCmd(HAL_SHT30_PERIODIC_CMD_MSB, HAL_SHT30_PERIODIC_CMD_LSB);
        ; Setup parameters for call to function HalSHT30WriteCmd
        MOV     R2,#0x2d
        MOV     R1,#0x21
        LCALL   ??HalSHT30WriteCmd?relay; Banked call to: HalSHT30WriteCmd
        MOV     A,R1
        MOV     R6,A
//  197   }
//  198   HalSHT30I2cStop();
??HalSHT30Init_0:
        ; Setup parameters for call to function HalSHT30I2cStop
        LCALL   ??HalSHT30I2cStop?relay; Banked call to: HalSHT30I2cStop
//  199   return(Ret);
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock21
//  200 }
//  201 
//  202 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  203 uint8 HalSHT30ReadData(void)
HalSHT30ReadData:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function HalSHT30ReadData
        CODE
//  204 {
        FUNCALL HalSHT30ReadData, HalSHT30WriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30ReadData, HalSHT30I2cStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30ReadData, HalSHT30I2cWriteOneByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30ReadData, HalSHT30I2cStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30ReadData, HalSHT30I2cReadOneByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30ReadData, HalSHT30I2cReadOneByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30ReadData, HalSHT30I2cReadOneByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30ReadData, HalSHT30I2cReadOneByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30ReadData, HalSHT30I2cReadOneByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30ReadData, HalSHT30I2cReadOneByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalSHT30ReadData, HalSHT30I2cStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  205     //uint8 Ret, m;
//  206     uint8 Ret;
//  207     uint16 T, H;
//  208     //int16 x;
//  209 
//  210   
//  211     Ret = HalSHT30WriteCmd(0xE0, 0x00);
        ; Setup parameters for call to function HalSHT30WriteCmd
        MOV     R2,#0x0
        MOV     R1,#-0x20
        LCALL   ??HalSHT30WriteCmd?relay; Banked call to: HalSHT30WriteCmd
        MOV     A,R1
        MOV     R6,A
//  212     if(Ret != 0)
        JZ      $+5
        LJMP    ??HalSHT30ReadData_0 & 0xFFFF
//  213     {
//  214       return(Ret);
//  215     }
//  216   
//  217     HalSHT30I2cStart();
        ; Setup parameters for call to function HalSHT30I2cStart
        LCALL   ??HalSHT30I2cStart?relay; Banked call to: HalSHT30I2cStart
//  218     Ret = HalSHT30I2cWriteOneByte(HAL_SHT30_I2C_ADDR | 0x01);
        ; Setup parameters for call to function HalSHT30I2cWriteOneByte
        MOV     R1,#-0x77
        LCALL   ??HalSHT30I2cWriteOneByte?relay; Banked call to: HalSHT30I2cWriteOneByte
        MOV     A,R1
        MOV     R6,A
//  219     if(Ret != 0)
        JZ      ??HalSHT30ReadData_1
//  220     {
//  221       HalSHT30I2cStop();
        ; Setup parameters for call to function HalSHT30I2cStop
        LCALL   ??HalSHT30I2cStop?relay; Banked call to: HalSHT30I2cStop
//  222       return(Ret);
        MOV     A,R6
        MOV     R1,A
        LJMP    ??HalSHT30ReadData_0 & 0xFFFF
//  223     }
//  224   
//  225     T = (uint16)HalSHT30I2cReadOneByte(HAL_SHT30_I2C_ACK);
??HalSHT30ReadData_1:
        ; Setup parameters for call to function HalSHT30I2cReadOneByte
        MOV     R1,#0x0
        LCALL   ??HalSHT30I2cReadOneByte?relay; Banked call to: HalSHT30I2cReadOneByte
        MOV     A,R1
        MOV     ?V1,A
//  226     T <<= 8;
//  227     T |= (uint16)HalSHT30I2cReadOneByte(HAL_SHT30_I2C_ACK);
        ; Setup parameters for call to function HalSHT30I2cReadOneByte
        MOV     R1,#0x0
        LCALL   ??HalSHT30I2cReadOneByte?relay; Banked call to: HalSHT30I2cReadOneByte
        MOV     A,R1
        MOV     ?V0,A
//  228     HalSHT30I2cReadOneByte(HAL_SHT30_I2C_ACK);//  CRC
        ; Setup parameters for call to function HalSHT30I2cReadOneByte
        MOV     R1,#0x0
        LCALL   ??HalSHT30I2cReadOneByte?relay; Banked call to: HalSHT30I2cReadOneByte
//  229   
//  230     H = (uint16)HalSHT30I2cReadOneByte(HAL_SHT30_I2C_ACK);
        ; Setup parameters for call to function HalSHT30I2cReadOneByte
        MOV     R1,#0x0
        LCALL   ??HalSHT30I2cReadOneByte?relay; Banked call to: HalSHT30I2cReadOneByte
        MOV     A,R1
        MOV     R7,A
//  231     H <<= 8;
//  232     H |= (uint16)HalSHT30I2cReadOneByte(HAL_SHT30_I2C_ACK);
        ; Setup parameters for call to function HalSHT30I2cReadOneByte
        MOV     R1,#0x0
        LCALL   ??HalSHT30I2cReadOneByte?relay; Banked call to: HalSHT30I2cReadOneByte
        MOV     A,R1
        MOV     R6,A
//  233     HalSHT30I2cReadOneByte(HAL_SHT30_I2C_NACK);//  CRC
        ; Setup parameters for call to function HalSHT30I2cReadOneByte
        MOV     R1,#0x1
        LCALL   ??HalSHT30I2cReadOneByte?relay; Banked call to: HalSHT30I2cReadOneByte
//  234   
//  235     HalSHT30I2cStop();
        ; Setup parameters for call to function HalSHT30I2cStop
        LCALL   ??HalSHT30I2cStop?relay; Banked call to: HalSHT30I2cStop
//  236     
//  237     Temperature = (int16)(((uint32)T * 1750)/65535) - 450;//   *0.1c
        CLR     A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     DPTR,#__Constant_6d6
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_ffff
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?UL_DIV_MOD
        MOV     A,?V0
        ADD     A,#0x3e
        MOV     R0,A
        MOV     A,?V1
        ADDC    A,#-0x2
        MOV     R1,A
        MOV     DPTR,#Temperature
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  238     Humidity = (uint8)( (100 * (uint32)H) / 65535 );//  0~100%
        MOV     A,R7
        MOV     R3,A
        MOV     A,R6
        MOV     ?V0,A
        MOV     A,R3
        MOV     ?V1,A
        CLR     A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     DPTR,#__Constant_64
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_ffff
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?UL_DIV_MOD
        MOV     A,?V0
        MOV     DPTR,#Humidity
        MOVX    @DPTR,A
//  239 	return 0;
        MOV     R1,#0x0
??HalSHT30ReadData_0:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock22
//  240     /*
//  241     x = (int16)(((uint32)T * 175)/65535) - 45;//   *1c
//  242     if(x<0)
//  243     {
//  244       Temperature[0] = '-';
//  245       m = (uint8)(x*(-1));
//  246     }
//  247     else
//  248     {
//  249       Temperature[0] = '+';
//  250       m = (uint8)x;
//  251     }
//  252     Temperature[1] = (m / 100)+'0';
//  253     m %= 100;
//  254     Temperature[2] = (m / 10)+'0';
//  255     Temperature[3] = (m % 10)+'0';
//  256     Temperature[4] = 'C';
//  257     Temperature[5] = '\0';
//  258     
//  259     
//  260     m = (uint8)( (100 * (uint32)H) / 65535 );//  0~100%
//  261     Humidity[0] = (m / 100)+'0';
//  262     m %= 100;
//  263     Humidity[1] = (m / 10)+'0';
//  264     Humidity[2] = (m % 10)+'0';
//  265     Humidity[3] = '%';
//  266     Humidity[4] = '\0';
//  267     */
//  268     
//  269 }

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_6d6:
        DD 1750

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ffff:
        DD 65535

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalI2CDelay?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalI2CDelay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalSHT30I2cStart?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalSHT30I2cStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalSHT30I2cStop?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalSHT30I2cStop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalSHT30I2cReadOneByte?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalSHT30I2cReadOneByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalSHT30I2cWriteOneByte?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalSHT30I2cWriteOneByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalSHT30WriteCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalSHT30WriteCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalSHT30Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalSHT30Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalSHT30ReadData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalSHT30ReadData

        END
//  270 
//  271 
//  272 
//  273 
//  274 
//  275 
// 
// 504 bytes in segment BANKED_CODE
//  48 bytes in segment BANK_RELAYS
//   6 bytes in segment SFR_AN
//  12 bytes in segment XDATA_ROM_C
//   4 bytes in segment XDATA_Z
// 
// 552 bytes of CODE  memory
//   0 bytes of CONST memory (+ 12 bytes shared)
//   0 bytes of DATA  memory (+  6 bytes shared)
//   4 bytes of XDATA memory
//
//Errors: none
//Warnings: none
