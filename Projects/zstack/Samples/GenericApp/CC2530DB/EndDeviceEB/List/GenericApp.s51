///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.10.1.2146 for 8051               30/Sep/2016  10:51:27
// Copyright 2004-2014 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
//        Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\Source\GenericApp.c" -D
//        NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
//        HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D
//        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC "C:\Texas
//        Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\"
//        -lA "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
//        Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\GenericApp.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME GenericApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SS_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GenericApp_Init?relay
        FUNCTION ??GenericApp_Init?relay,0203H
        PUBLIC ??GenericApp_ProcessEvent?relay
        FUNCTION ??GenericApp_ProcessEvent?relay,0203H
        FUNCTION ??GenericApp_SendTheMessage?relay,0203H
        PUBLIC ??MacAddr_Init?relay
        FUNCTION ??MacAddr_Init?relay,0203H
        FUNCTION ??UART_CallBack?relay,0203H
        PUBLIC ??Uart_Init?relay
        FUNCTION ??Uart_Init?relay,0203H
        PUBLIC GenericApp_ClusterList
        PUBLIC GenericApp_DstAddr
        PUBLIC GenericApp_Init
        FUNCTION GenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC GenericApp_NwkState
        PUBLIC GenericApp_ProcessEvent
        FUNCTION GenericApp_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION GenericApp_SendTheMessage,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC GenericApp_SimpleDesc
        PUBLIC GenericApp_TaskID
        PUBLIC GenericApp_TransID
        PUBLIC GenericApp_epDesc
        PUBLIC MacAddr_Init
        FUNCTION MacAddr_Init,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        FUNCTION UART_CallBack,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC Uart_Init
        FUNCTION Uart_Init,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBWEAK __Constant_3e8
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
HalLedSet           SYMBOL "HalLedSet"
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
HalReadGPIOSta      SYMBOL "HalReadGPIOSta"
??HalReadGPIOSta?relay SYMBOL "?relay", HalReadGPIOSta
HalSHT30Init        SYMBOL "HalSHT30Init"
??HalSHT30Init?relay SYMBOL "?relay", HalSHT30Init
HalSHT30ReadData    SYMBOL "HalSHT30ReadData"
??HalSHT30ReadData?relay SYMBOL "?relay", HalSHT30ReadData
HalUARTOpen         SYMBOL "HalUARTOpen"
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
RegisterForKeys     SYMBOL "RegisterForKeys"
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
afRegister          SYMBOL "afRegister"
??afRegister?relay  SYMBOL "?relay", afRegister
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
GenericApp_Init     SYMBOL "GenericApp_Init"
??GenericApp_Init?relay SYMBOL "?relay", GenericApp_Init
GenericApp_ProcessEvent SYMBOL "GenericApp_ProcessEvent"
??GenericApp_ProcessEvent?relay SYMBOL "?relay", GenericApp_ProcessEvent
MacAddr_Init        SYMBOL "MacAddr_Init"
??MacAddr_Init?relay SYMBOL "?relay", MacAddr_Init
Uart_Init           SYMBOL "Uart_Init"
??Uart_Init?relay   SYMBOL "?relay", Uart_Init

        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalReadGPIOSta?relay
        FUNCTION ??HalReadGPIOSta?relay,00H
        EXTERN ??HalSHT30Init?relay
        FUNCTION ??HalSHT30Init?relay,00H
        EXTERN ??HalSHT30ReadData?relay
        FUNCTION ??HalSHT30ReadData?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN GPIOStatic
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalReadGPIOSta
        FUNCTION HalReadGPIOSta,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalSHT30Init
        FUNCTION HalSHT30Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalSHT30ReadData
        FUNCTION HalSHT30ReadData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Humidity
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Temperature
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN saveExtAddr

// C:\Texas Instruments\Z-Stack Mesh v1.0.0\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
//    1 /******************************************************************************
//    2   Filename:       GenericApp.c
//    3   Revised:        $Date: 2014-09-07 13:36:30 -0700 (Sun, 07 Sep 2014) $
//    4   Revision:       $Revision: 40046 $
//    5 
//    6   Description:    Generic Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ?AS IS? WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 ******************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful - it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application periodically sends a "Hello World" message to
//   45   another "Generic" application (see 'txMsgDelay'). The application
//   46   will also receive "Hello World" packets.
//   47 
//   48   This application doesn't have a profile, so it handles everything
//   49   directly - by itself.
//   50 
//   51   Key control:
//   52     SW1:  changes the delay between TX packets
//   53     SW2:  initiates end device binding
//   54     SW3:
//   55     SW4:  initiates a match description request
//   56 *********************************************************************/
//   57 
//   58 /*********************************************************************
//   59  * INCLUDES
//   60  */
//   61 #include "OSAL.h"
//   62 #include "AF.h"
//   63 #include "ZDApp.h"
//   64 #include "ZDObject.h"
//   65 #include "ZDProfile.h"
//   66 #include "hal_SHT30.h"
//   67 #include "GenericApp.h"
//   68 #include "DebugTrace.h"
//   69 #include "hal_GPIO.h"
//   70 #include "hal_WaterBat.h"
//   71 
//   72 #if !defined( WIN32 ) || defined( ZBIT )
//   73   #include "OnBoard.h"
//   74 #endif
//   75 
//   76 /* HAL */
//   77 #include "hal_lcd.h"
//   78 #include "hal_led.h"
//   79 #include "hal_key.h"
//   80 #include "hal_uart.h"
//   81 
//   82 /* RTOS */
//   83 #if defined( IAR_ARMCM3_LM )
//   84 #include "RTOS_App.h"
//   85 #endif
//   86 
//   87 /*********************************************************************
//   88  * MACROS
//   89  */
//   90 
//   91 /*********************************************************************
//   92  * CONSTANTS
//   93  */
//   94 
//   95 /*********************************************************************
//   96  * TYPEDEFS
//   97  */
//   98 
//   99 /*********************************************************************
//  100  * GLOBAL VARIABLES
//  101  */
//  102 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  103 const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
GenericApp_ClusterList:
        DW 1
//  104 {
//  105   GENERICAPP_CLUSTERID
//  106 };
//  107 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  108 const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
GenericApp_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW GenericApp_ClusterList
        DATA8
        DB 1
        DATA16
        DW GenericApp_ClusterList
//  109 {
//  110   GENERICAPP_ENDPOINT,              //  int Endpoint;
//  111   GENERICAPP_PROFID,                //  uint16 AppProfId[2];
//  112   GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  113   GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  114   GENERICAPP_FLAGS,                 //  int   AppFlags:4;
//  115   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  116   (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
//  117   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  118   (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
//  119 };
//  120 
//  121 // This is the Endpoint/Interface description.  It is defined here, but
//  122 // filled-in in GenericApp_Init().  Another way to go would be to fill
//  123 // in the structure here and make it a "const" (in code space).  The
//  124 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  125 endPointDesc_t GenericApp_epDesc;
GenericApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  126 
//  127 /*********************************************************************
//  128  * EXTERNAL VARIABLES
//  129  */
//  130 
//  131 /*********************************************************************
//  132  * EXTERNAL FUNCTIONS
//  133  */
//  134 
//  135 /*********************************************************************
//  136  * LOCAL VARIABLES
//  137  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 byte GenericApp_TaskID;   // Task ID for internal task/event processing
GenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  139                           // This variable will be received when
//  140                           // GenericApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 static byte EndDevice_Sensor_Type;
EndDevice_Sensor_Type:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  142 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 devStates_t GenericApp_NwkState;
GenericApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  144 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 byte GenericApp_TransID;  // This is the unique message ID (counter)
GenericApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  146 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  147 afAddrType_t GenericApp_DstAddr;
GenericApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  148 
//  149 // Number of recieved messages

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  150 static uint16 rxMsgCount;
rxMsgCount:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  151 static uint8 TxBufStart = 8;
TxBufStart:
        DATA8
        DS 1
        REQUIRE `?<Initializer for TxBufStart>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  152 static uint8 ReadWaterLevel[8] = {0x01,0x03,0x00,0x00,0x00,0x01,0x84,0x0A};
ReadWaterLevel:
        DATA8
        DS 8
        REQUIRE `?<Initializer for ReadWaterLevel>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  153 static uint8 TxBuf[128];
TxBuf:
        DS 128
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  154 static uint8 RxBuf[128];
RxBuf:
        DS 128
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  155 static bool  NetworkFlag=FALSE;
NetworkFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  156 static uint8 WaterLevel_H=0;
WaterLevel_H:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  157 static uint8 WaterLevel_L=0;
WaterLevel_L:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  158 // Time interval between sending messages
//  159 //static uint32 txMsgDelay = GENERICAPP_SEND_MSG_TIMEOUT;
//  160 
//  161 /*Sensor Type*/
//  162 #define TEMPERATURE_HUMITURE 0x01
//  163 #define FLOOD                0x03
//  164 #define SMOKE                0x04
//  165 #define WATERLEVEL           0x05
//  166 
//  167 #define Debug 1
//  168 /*********************************************************************
//  169  * LOCAL FUNCTIONS
//  170  */
//  171 static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  172 static void GenericApp_HandleKeys( byte shift, byte keys );
//  173 static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  174 static void GenericApp_SendTheMessage(void);
//  175 static void UART_CallBack(uint8 port, uint8 event);
//  176 void MacAddr_Init(void);
//  177 #if defined( IAR_ARMCM3_LM )
//  178 static void GenericApp_ProcessRtosMessage( void );
//  179 #endif
//  180 /*********************************************************************
//  181  * NETWORK LAYER CALLBACKS
//  182  */
//  183 
//  184 /*********************************************************************
//  185  * PUBLIC FUNCTIONS
//  186  */
//  187 
//  188 /*********************************************************************
//  189  * @fn      GenericApp_Init
//  190  *
//  191  * @brief   Initialization function for the Generic App Task.
//  192  *          This is called during initialization and should contain
//  193  *          any application specific initialization (ie. hardware
//  194  *          initialization/setup, table initialization, power up
//  195  *          notificaiton ... ).
//  196  *
//  197  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  198  *                    used to send messages and set timers.
//  199  *
//  200  * @return  none
//  201  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  202 void GenericApp_Init( uint8 task_id )
GenericApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function GenericApp_Init
        CODE
//  203 {
        FUNCALL GenericApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, Uart_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, Uart_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalSHT30Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, MacAddr_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  204   //EndDevice_Sensor_Type = TEMPERATURE_HUMITURE;
//  205   //EndDevice_Sensor_Type = FLOOD;
//  206   EndDevice_Sensor_Type = SMOKE;
        MOV     DPTR,#EndDevice_Sensor_Type
        MOV     A,#0x4
        MOVX    @DPTR,A
//  207   //EndDevice_Sensor_Type = WATERLEVEL;
//  208   
//  209   //if (GenericApp_NwkState == DEV_ZB_COORD | GenericApp_NwkState == DEV_ROUTER)
//  210   //  NLME_PermitJoining = FALSE;
//  211   
//  212   GenericApp_TaskID = task_id;
        MOV     A,R6
        MOV     DPTR,#GenericApp_TaskID
        MOVX    @DPTR,A
//  213   GenericApp_NwkState = DEV_INIT;
        MOV     DPTR,#GenericApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  214   GenericApp_TransID = 0;
        MOV     DPTR,#GenericApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  215 
//  216   // Device hardware initialization can be added here or in main() (Zmain.c).
//  217   // If the hardware is application specific - add it here.
//  218   // If the hardware is other parts of the device add it in main().
//  219 
//  220   // Fill out the endpoint description.
//  221   GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
        MOV     DPTR,#GenericApp_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  222   GenericApp_epDesc.task_id = &GenericApp_TaskID;
        INC     DPTR
        MOV     A,#GenericApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  223   GenericApp_epDesc.simpleDesc
//  224             = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
        INC     DPTR
        MOV     A,#GenericApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  225   GenericApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  226 
//  227   // Register the endpoint description with the AF
//  228   afRegister( &GenericApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#GenericApp_epDesc & 0xff
        MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay   ; Banked call to: afRegister
//  229 
//  230   // Register for all key events - This app will handle all key events
//  231   RegisterForKeys( GenericApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay; Banked call to: RegisterForKeys
//  232   //Init UART0
//  233   if(Debug || GenericApp_NwkState == DEV_ZB_COORD)
//  234   {
//  235     Uart_Init(HAL_UART_PORT_0,HAL_UART_BR_115200);
        ; Setup parameters for call to function Uart_Init
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ??Uart_Init?relay    ; Banked call to: Uart_Init
//  236   }
//  237   if(EndDevice_Sensor_Type == WATERLEVEL)
        MOV     DPTR,#EndDevice_Sensor_Type
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??GenericApp_Init_0
//  238   {
//  239     Uart_Init(HAL_UART_PORT_1,HAL_UART_BR_9600);
        ; Setup parameters for call to function Uart_Init
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??Uart_Init?relay    ; Banked call to: Uart_Init
//  240   }
//  241   //Init SHT30
//  242   if(EndDevice_Sensor_Type == TEMPERATURE_HUMITURE)
??GenericApp_Init_0:
        MOV     DPTR,#EndDevice_Sensor_Type
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??GenericApp_Init_1
//  243     HalSHT30Init();
        ; Setup parameters for call to function HalSHT30Init
        LCALL   ??HalSHT30Init?relay ; Banked call to: HalSHT30Init
//  244   MacAddr_Init();
??GenericApp_Init_1:
        ; Setup parameters for call to function MacAddr_Init
        LCALL   ??MacAddr_Init?relay ; Banked call to: MacAddr_Init
//  245   //ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
//  246   //ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
//  247   if(EndDevice_Sensor_Type == TEMPERATURE_HUMITURE)
        MOV     DPTR,#EndDevice_Sensor_Type
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??GenericApp_Init_2
//  248   	osal_start_timerEx( GenericApp_TaskID,
//  249                         COLLECT_TEMPERATURE_HUMITURE_EVT,
//  250                         COLLECT_TEMPERATURE_HUMITURE_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#0x2
        SJMP    ??GenericApp_Init_3
          CFI CFA_XSP16 add(XSP16, 9)
//  251   else if(EndDevice_Sensor_Type == FLOOD)
??GenericApp_Init_2:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??GenericApp_Init_4
//  252 	osal_start_timerEx( GenericApp_TaskID,
//  253                                     COLLECT_WATER_SOAK_EVT,
//  254                                     COLLECT_WATER_SOAK_TIMEOUT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#0x4
        SJMP    ??GenericApp_Init_3
          CFI CFA_XSP16 add(XSP16, 9)
//  255   else if(EndDevice_Sensor_Type == SMOKE)
??GenericApp_Init_4:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??GenericApp_Init_5
//  256 	osal_start_timerEx( GenericApp_TaskID,
//  257                                     COLLECT_SMOKE_EVT,
//  258                                     COLLECT_SMOKE_TIMEOUT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#0x3
        SJMP    ??GenericApp_Init_3
          CFI CFA_XSP16 add(XSP16, 9)
//  259   else if(EndDevice_Sensor_Type == WATERLEVEL)
??GenericApp_Init_5:
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??GenericApp_Init_6
//  260 	osal_start_timerEx( GenericApp_TaskID,
//  261                                     COLLECT_WATER_LEVEL_EVT,
//  262                                     COLLECT_WATER_LEVEL_TIMEOUT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R2,#0x5
??GenericApp_Init_3:
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
          CFI EndBlock cfiBlock0
//  263 #if defined( IAR_ARMCM3_LM )
//  264   // Register this task with RTOS task initiator
//  265   RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
//  266 #endif
//  267 }
??GenericApp_Init_6:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  268 //Init UART

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  269 void Uart_Init(uint8 port,uint8 baud)
Uart_Init:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function Uart_Init
        CODE
//  270 {
        FUNCALL Uart_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
//  271   halUARTCfg_t uartConfig;
//  272   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  273   uartConfig.baudRate             = baud;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  274   uartConfig.flowControl          = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  275   uartConfig.flowControlThreshold = 64; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  276   uartConfig.rx.maxBufSize        = 128;  // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  277   uartConfig.tx.maxBufSize        = 128;  // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  278   uartConfig.idleTimeout          = 6;   // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  279   uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  280   uartConfig.callBackFunc         = UART_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??UART_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??UART_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  281   HalUARTOpen (port, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   ??HalUARTOpen?relay  ; Banked call to: HalUARTOpen
//  282 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock2
//  283 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  284 static void UART_CallBack(uint8 port, uint8 event)
UART_CallBack:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function UART_CallBack
        CODE
//  285 {
        FUNCALL UART_CallBack, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART_CallBack, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART_CallBack, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART_CallBack, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
//  286   uint16 len=0;
//  287   switch(port)
        JZ      ??UART_CallBack_0
        DEC     A
        JZ      ??UART_CallBack_1
        SJMP    ??UART_CallBack_2
//  288   {
//  289     case HAL_UART_PORT_0:
//  290       
//  291       len=HalUARTRead(HAL_UART_PORT_0,RxBuf,128);
??UART_CallBack_0:
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#-0x80
        MOV     R5,#0x0
        MOV     R2,#RxBuf & 0xff
        MOV     R3,#(RxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay  ; Banked call to: HalUARTRead
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
//  292       if(len > 0)
        MOV     A,R4
        ORL     A,R5
        JZ      ??UART_CallBack_2
//  293       {
//  294         HalUARTWrite( HAL_UART_PORT_0, RxBuf, len );
        ; Setup parameters for call to function HalUARTWrite
        MOV     R2,#RxBuf & 0xff
        MOV     R3,#(RxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
//  295         len=0;
        SJMP    ??UART_CallBack_2
//  296       }
//  297       break;
//  298     case HAL_UART_PORT_1:
//  299       len=HalUARTRead(HAL_UART_PORT_1,RxBuf,128);
//  300       if(len>0)
??UART_CallBack_1:
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#-0x80
        MOV     R5,#0x0
        MOV     R2,#RxBuf & 0xff
        MOV     R3,#(RxBuf >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   ??HalUARTRead?relay  ; Banked call to: HalUARTRead
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??UART_CallBack_2
//  301       {
//  302         if(EndDevice_Sensor_Type == WATERLEVEL)
        MOV     DPTR,#EndDevice_Sensor_Type
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??UART_CallBack_2
//  303         {
//  304           WaterLevel_H = RxBuf[3];
        MOV     DPTR,#RxBuf + 3
        MOVX    A,@DPTR
        MOV     DPTR,#WaterLevel_H
        MOVX    @DPTR,A
//  305           WaterLevel_L = RxBuf[4];
        MOV     DPTR,#RxBuf + 4
        MOVX    A,@DPTR
        MOV     DPTR,#WaterLevel_L
        MOVX    @DPTR,A
//  306           GenericApp_SendTheMessage();
        ; Setup parameters for call to function GenericApp_SendTheMessage
        LCALL   ??GenericApp_SendTheMessage?relay; Banked call to: GenericApp_SendTheMessage
          CFI EndBlock cfiBlock3
//  307         }
//  308       }
//  309       break;
//  310   }
//  311 }
??UART_CallBack_2:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  312 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  313 void MacAddr_Init(void)
MacAddr_Init:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function MacAddr_Init
        CODE
//  314 {
        FUNCALL MacAddr_Init, NLME_GetExtAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  315   (void)NLME_GetExtAddr(); 
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
//  316   uint8 j=7;
        MOV     R4,#0x7
//  317   for(int i=0;i<8;i++)
        MOV     R2,#0x0
        MOV     R3,#0x0
//  318   {
//  319     TxBuf[i] = saveExtAddr[j];
??MacAddr_Init_0:
        MOV     A,R4
        MOV     R0,A
        MOV     A,#saveExtAddr & 0xff
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,#(saveExtAddr >> 8) & 0xff
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#TxBuf & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(TxBuf >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+-5
        MOVX    @DPTR,A
//  320     j--;
        DEC     R4
//  321   }
        INC     R2
        MOV     A,R2
        JNZ     ??MacAddr_Init_1
        INC     R3
??MacAddr_Init_1:
        CLR     C
        SUBB    A,#0x8
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??MacAddr_Init_0
//  322 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock5
//  323 /*********************************************************************
//  324  * @fn      GenericApp_ProcessEvent
//  325  *
//  326  * @brief   Generic Application Task event processor.  This function
//  327  *          is called to process all events for the task.  Events
//  328  *          include timers, messages and any other user defined events.
//  329  *
//  330  * @param   task_id  - The OSAL assigned task ID.
//  331  * @param   events - events to process.  This is a bit map and can
//  332  *                   contain more than one event.
//  333  *
//  334  * @return  none
//  335  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  336 uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
GenericApp_ProcessEvent:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function GenericApp_ProcessEvent
        CODE
//  337 {
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalSHT30ReadData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalReadGPIOSta
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalReadGPIOSta
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  338   afIncomingMSGPacket_t *MSGpkt;
//  339   afDataConfirm_t *afDataConfirm;
//  340 
//  341   // Data Confirmation message fields
//  342   byte sentEP;
//  343   ZStatus_t sentStatus;
//  344   byte sentTransID;       // This should match the value sent
//  345   (void)task_id;  // Intentionally unreferenced parameter
//  346 
//  347   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
//  348   {
//  349     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??GenericApp_ProcessEvent_1
//  350     while ( MSGpkt )
//  351     {
//  352       switch ( MSGpkt->hdr.event )
//  353       {
//  354         case ZDO_CB_MSG:
//  355           GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  356           break;
//  357 
//  358         case KEY_CHANGE:
//  359           GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  360           break;
//  361 
//  362         case AF_DATA_CONFIRM_CMD:
//  363           // This message is received as a confirmation of a data packet sent.
//  364           // The status is of ZStatus_t type [defined in ZComDef.h]
//  365           // The message fields are defined in AF.h
//  366           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  367 
//  368           sentEP = afDataConfirm->endpoint;
//  369           (void)sentEP;  // This info not used now
//  370           sentTransID = afDataConfirm->transID;
//  371           (void)sentTransID;  // This info not used now
//  372 
//  373           sentStatus = afDataConfirm->hdr.status;
//  374           // Action taken when confirmation is received.
//  375           if ( sentStatus != ZSuccess )
//  376           {
//  377             // The data wasn't delivered -- Do something
//  378           }
//  379           break;
//  380 
//  381         case AF_INCOMING_MSG_CMD:
//  382           GenericApp_MessageMSGCB( MSGpkt );
//  383           break;
//  384 
//  385         case ZDO_STATE_CHANGE:         
//  386           GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??GenericApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_NwkState
        MOVX    @DPTR,A
//  387           switch(GenericApp_NwkState)
        XRL     A,#0x6
        JNZ     ??GenericApp_ProcessEvent_3
//  388           {
//  389             case DEV_ZB_COORD:
//  390               break;
//  391             case DEV_ROUTER:
//  392               break;
//  393             case DEV_END_DEVICE:
//  394 				NetworkFlag = TRUE;
        MOV     DPTR,#NetworkFlag
        MOV     A,#0x1
        MOVX    @DPTR,A
//  395               break;
//  396             default:
//  397               break;
//  398           }
//  399           break;
//  400 
//  401         default:
//  402           break;
//  403       }
//  404 
//  405       // Release the memory
//  406       osal_msg_deallocate( (uint8 *)MSGpkt );
??GenericApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
//  407 
//  408       // Next
//  409       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??GenericApp_ProcessEvent_1:
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,?V0
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??GenericApp_ProcessEvent_5
        ADD     A,#0x49
        JZ      ??GenericApp_ProcessEvent_2
        ADD     A,#-0x2
        JNZ     ??GenericApp_ProcessEvent_3
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??GenericApp_ProcessEvent_6
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x80
??GenericApp_ProcessEvent_6:
        JNZ     ??GenericApp_ProcessEvent_3
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   ??ZDO_ParseEPListRsp?relay; Banked call to: ZDO_ParseEPListRsp
        MOV     A,R2
        ORL     A,R3
        JZ      ??GenericApp_ProcessEvent_3
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??GenericApp_ProcessEvent_7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??GenericApp_ProcessEvent_7
        MOV     DPTR,#GenericApp_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#GenericApp_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_DstAddr + 9
        MOVX    @DPTR,A
??GenericApp_ProcessEvent_7:
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
        LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
??GenericApp_ProcessEvent_5:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??GenericApp_ProcessEvent_8
        INC     DPTR
        MOVX    A,@DPTR
??GenericApp_ProcessEvent_8:
        JZ      $+5
        LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
        MOV     DPTR,#rxMsgCount
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x2
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,?V0
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,?V0
        ADD     A,#0x22
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
        LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
//  410     }
//  411 
//  412     // return unprocessed events
//  413     return (events ^ SYS_EVENT_MSG);
??GenericApp_ProcessEvent_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??GenericApp_ProcessEvent_9
//  414   }
//  415   
//  416   if(events & COLLECT_TEMPERATURE_HUMITURE_EVT)
??GenericApp_ProcessEvent_0:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??GenericApp_ProcessEvent_10
//  417   {
//  418     HalSHT30ReadData();
        ; Setup parameters for call to function HalSHT30ReadData
        LCALL   ??HalSHT30ReadData?relay; Banked call to: HalSHT30ReadData
//  419     GenericApp_SendTheMessage();
        ; Setup parameters for call to function GenericApp_SendTheMessage
        LCALL   ??GenericApp_SendTheMessage?relay; Banked call to: GenericApp_SendTheMessage
//  420     return (events ^ COLLECT_TEMPERATURE_HUMITURE_EVT);
        MOV     A,R6
        XRL     A,#0x2
        SJMP    ??GenericApp_ProcessEvent_11
//  421   }
//  422   
//  423   if(events & COLLECT_SMOKE_EVT)
??GenericApp_ProcessEvent_10:
        MOV     A,R6
        ANL     A,#0x3
        JZ      ??GenericApp_ProcessEvent_12
//  424   {
//  425     HalReadGPIOSta();
        ; Setup parameters for call to function HalReadGPIOSta
        LCALL   ??HalReadGPIOSta?relay; Banked call to: HalReadGPIOSta
//  426     return (events ^ COLLECT_SMOKE_EVT);
        MOV     A,R6
        XRL     A,#0x3
        SJMP    ??GenericApp_ProcessEvent_11
//  427   }
//  428   
//  429   if(events & COLLECT_WATER_SOAK_EVT)
??GenericApp_ProcessEvent_12:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??GenericApp_ProcessEvent_13
//  430   {
//  431     HalReadGPIOSta();
        ; Setup parameters for call to function HalReadGPIOSta
        LCALL   ??HalReadGPIOSta?relay; Banked call to: HalReadGPIOSta
//  432     return (events ^ COLLECT_WATER_SOAK_EVT);
        MOV     A,R6
        XRL     A,#0x4
        SJMP    ??GenericApp_ProcessEvent_11
//  433   }
//  434   
//  435   if(events & COLLECT_WATER_LEVEL_EVT)
??GenericApp_ProcessEvent_13:
        MOV     A,R6
        ANL     A,#0x5
        JZ      ??GenericApp_ProcessEvent_14
//  436   {
//  437     HalUARTWrite( HAL_UART_PORT_1, ReadWaterLevel, 8 );
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#ReadWaterLevel & 0xff
        MOV     R3,#(ReadWaterLevel >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
//  438     return (events ^ COLLECT_WATER_LEVEL_EVT);
        MOV     A,R6
        XRL     A,#0x5
??GenericApp_ProcessEvent_11:
        MOV     R2,A
        MOV     A,R7
??GenericApp_ProcessEvent_9:
        MOV     R3,A
        SJMP    ??GenericApp_ProcessEvent_15
//  439   }
//  440 
//  441 #if defined( IAR_ARMCM3_LM )
//  442   // Receive a message from the RTOS queue
//  443   if ( events & GENERICAPP_RTOS_MSG_EVT )
//  444   {
//  445     // Process message from RTOS queue
//  446     GenericApp_ProcessRtosMessage();
//  447 
//  448     // return unprocessed events
//  449     return (events ^ GENERICAPP_RTOS_MSG_EVT);
//  450   }
//  451 #endif
//  452 
//  453   // Discard unknown events
//  454   return 0;
??GenericApp_ProcessEvent_14:
        MOV     R2,#0x0
        MOV     R3,#0x0
??GenericApp_ProcessEvent_15:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  455 }
//  456 
//  457 /*********************************************************************
//  458  * Event Generation Functions
//  459  */
//  460 
//  461 /*********************************************************************
//  462  * @fn      GenericApp_ProcessZDOMsgs()
//  463  *
//  464  * @brief   Process response messages
//  465  *
//  466  * @param   none
//  467  *
//  468  * @return  none
//  469  */
//  470 static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
//  471 {
//  472   switch ( inMsg->clusterID )
//  473   {
//  474     case End_Device_Bind_rsp:
//  475       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
//  476       {
//  477         // Light LED
//  478         //HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  479       }
//  480 #if defined( BLINK_LEDS )
//  481       else
//  482       {
//  483         // Flash LED to show failure
//  484         //HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
//  485       }
//  486 #endif
//  487       break;
//  488 
//  489     case Match_Desc_rsp:
//  490       {
//  491         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
//  492         if ( pRsp )
//  493         {
//  494           if ( pRsp->status == ZSuccess && pRsp->cnt )
//  495           {
//  496             GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  497             GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
//  498             // Take the first endpoint, Can be changed to search through endpoints
//  499             GenericApp_DstAddr.endPoint = pRsp->epList[0];
//  500 
//  501             // Light LED
//  502             //HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  503           }
//  504           osal_mem_free( pRsp );
//  505         }
//  506       }
//  507       break;
//  508   }
//  509 }
//  510 
//  511 /*********************************************************************
//  512  * @fn      GenericApp_HandleKeys
//  513  *
//  514  * @brief   Handles all key events for this device.
//  515  *
//  516  * @param   shift - true if in shift/alt.
//  517  * @param   keys - bit field for key events. Valid entries:
//  518  *                 HAL_KEY_SW_4
//  519  *                 HAL_KEY_SW_3
//  520  *                 HAL_KEY_SW_2
//  521  *                 HAL_KEY_SW_1
//  522  *
//  523  * @return  none
//  524  */
//  525 static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
//  526 {
//  527   // Shift is used to make each button/switch dual purpose.
//  528 
//  529   if ( shift )
//  530   {
//  531     if ( keys & HAL_KEY_SW_6 )
//  532     {
//  533       
//  534     }
//  535   }
//  536   else
//  537   {
//  538     if ( keys & HAL_KEY_SW_1 )
//  539     {
//  540           //uint8 Data[]={ 'k','e','y','1'};
//  541           //HalUARTWrite( UART_PORT, Data, 4 );
//  542           //HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
//  543     }
//  544     //Coordinator????????????
//  545     if ( keys & HAL_KEY_SW_2 )
//  546     {
//  547      //uint8 Data[]={ 'k','e','y','2'};
//  548      //     HalUARTWrite( UART_PORT, Data, 4 );
//  549      // HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  550       
//  551       //NLME_PermitJoiningRequest(60);
//  552     }
//  553 
//  554     if ( keys & HAL_KEY_SW_3 )
//  555     {
//  556     }
//  557 
//  558     if ( keys & HAL_KEY_SW_4 )
//  559     {
//  560 
//  561     }
//  562   }
//  563 }
//  564 
//  565 /*********************************************************************
//  566  * LOCAL FUNCTIONS
//  567  */
//  568 
//  569 /*********************************************************************
//  570  * @fn      GenericApp_MessageMSGCB
//  571  *
//  572  * @brief   Data message processor callback.  This function processes
//  573  *          any incoming data - probably from other devices.  So, based
//  574  *          on cluster ID, perform the intended action.
//  575  *
//  576  * @param   none
//  577  *
//  578  * @return  none
//  579  */
//  580 static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
//  581 {
//  582   switch ( pkt->clusterId )
//  583   {
//  584     case GENERICAPP_CLUSTERID:
//  585       rxMsgCount += 1;  // Count this message
//  586       HalLedSet ( HAL_LED_4, HAL_LED_MODE_BLINK );  // Blink an LED
//  587       HalUARTWrite(HAL_UART_PORT_0,pkt->cmd.Data,pkt->cmd.DataLength);
//  588       break;
//  589   }
//  590 }
//  591 
//  592 /*********************************************************************
//  593  * @fn      GenericApp_SendTheMessage
//  594  *
//  595  * @brief   Send "the" message.
//  596  *
//  597  * @param   none
//  598  *
//  599  * @return  none
//  600  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  601 static void GenericApp_SendTheMessage(void)
GenericApp_SendTheMessage:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function GenericApp_SendTheMessage
        CODE
//  602 {
        FUNCALL GenericApp_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  603 	if(!NetworkFlag) return;
        MOV     DPTR,#NetworkFlag
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??GenericApp_SendTheMessage_0 & 0xFFFF
//  604 	afAddrType_t my_DstAddr; 
//  605     my_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  606     my_DstAddr.endPoint = GENERICAPP_ENDPOINT;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  607     my_DstAddr.addr.shortAddr = 0x0000;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  608     uint8 length = 0;
        MOV     R1,#0x0
//  609     if(EndDevice_Sensor_Type == TEMPERATURE_HUMITURE)
        MOV     DPTR,#EndDevice_Sensor_Type
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??GenericApp_SendTheMessage_1
//  610     {
//  611         length=12;
        MOV     R1,#0xc
//  612         TxBuf[TxBufStart] = TEMPERATURE_HUMITURE;
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  613         TxBuf[TxBufStart+1] = Humidity;
        MOV     DPTR,#Humidity
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    @DPTR,A
//  614         TxBuf[TxBufStart+2] = (uint8)Temperature;
        MOV     DPTR,#Temperature
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        INC     DPTR
        MOVX    @DPTR,A
//  615         TxBuf[TxBufStart+3] = (uint8)(Temperature>>8);
        MOV     DPTR,#Temperature
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,#0x8
        MOV     R0,#?V0
        LCALL   ?SS_SHR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0
        SJMP    ??GenericApp_SendTheMessage_2
//  616     }
//  617     if(EndDevice_Sensor_Type == FLOOD)
??GenericApp_SendTheMessage_1:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??GenericApp_SendTheMessage_3
//  618     {
//  619         length=10;
        LCALL   ?Subroutine2 & 0xFFFF
//  620         TxBuf[TxBufStart] = FLOOD;
//  621         TxBuf[TxBufStart+1]= GPIOStatic;
//  622     }
??CrossCallReturnLabel_4:
        MOV     A,#0x3
        SJMP    ??GenericApp_SendTheMessage_4
//  623     if(EndDevice_Sensor_Type == SMOKE)
??GenericApp_SendTheMessage_3:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??GenericApp_SendTheMessage_5
//  624     {
//  625         length=10;
        LCALL   ?Subroutine2 & 0xFFFF
//  626         TxBuf[TxBufStart] = SMOKE;
??CrossCallReturnLabel_5:
        MOV     A,#0x4
??GenericApp_SendTheMessage_4:
        MOVX    @DPTR,A
//  627         TxBuf[TxBufStart+1] = GPIOStatic;
        MOV     DPTR,#GPIOStatic
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        SJMP    ??CrossCallReturnLabel_3
//  628     }
//  629     if(EndDevice_Sensor_Type == WATERLEVEL)
??GenericApp_SendTheMessage_5:
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??GenericApp_SendTheMessage_6
//  630     {
//  631         length = 11;
        MOV     R1,#0xb
//  632         TxBuf[TxBufStart] = WATERLEVEL;
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,#0x5
        MOVX    @DPTR,A
//  633         TxBuf[TxBufStart+1] = WaterLevel_H;
        MOV     DPTR,#WaterLevel_H
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        MOVX    @DPTR,A
//  634         TxBuf[TxBufStart+2] = WaterLevel_L;
        MOV     DPTR,#WaterLevel_L
        LCALL   ?Subroutine3 & 0xFFFF
//  635     }
??CrossCallReturnLabel_3:
        INC     DPTR
??GenericApp_SendTheMessage_2:
        MOVX    @DPTR,A
//  636     AF_DataRequest( &my_DstAddr, &GenericApp_epDesc,
//  637                        GENERICAPP_CLUSTERID,
//  638                        length,
//  639                        TxBuf,
//  640                        &GenericApp_TransID,
//  641                        AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
??GenericApp_SendTheMessage_6:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0,#0x1e
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0,#GenericApp_TransID & 0xff
        MOV     ?V1,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0,#TxBuf & 0xff
        MOV     ?V1,#(TxBuf >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0,R1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x0
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  642 }
??GenericApp_SendTheMessage_0:
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function GenericApp_SendTheMessage
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function GenericApp_SendTheMessage
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function GenericApp_SendTheMessage
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function GenericApp_SendTheMessage
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function GenericApp_SendTheMessage
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function GenericApp_SendTheMessage
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV     R1,#0xa
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function GenericApp_SendTheMessage
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function GenericApp_SendTheMessage
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function GenericApp_SendTheMessage
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function GenericApp_SendTheMessage
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOV     DPTR,#TxBufStart
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#TxBuf & 0xff
        ADD     A,R2
        MOV     R2,A
        CLR     A
        ADDC    A,#(TxBuf >> 8) & 0xff
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for TxBufStart>`:
        DATA8
        DB 8

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ReadWaterLevel>`:
        DATA8
        DB 1
        DB 3
        DB 0
        DB 0
        DB 0
        DB 1
        DB 132
        DB 10

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Uart_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Uart_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??UART_CallBack?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MacAddr_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MacAddr_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_ProcessEvent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_SendTheMessage?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_SendTheMessage

        END
//  643 #if defined( IAR_ARMCM3_LM )
//  644 /*********************************************************************
//  645  * @fn      GenericApp_ProcessRtosMessage
//  646  *
//  647  * @brief   Receive message from RTOS queue, send response back.
//  648  *
//  649  * @param   none
//  650  *
//  651  * @return  none
//  652  */
//  653 static void GenericApp_ProcessRtosMessage( void )
//  654 {
//  655   osalQueue_t inMsg;
//  656 
//  657   if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
//  658   {
//  659     uint8 cmndId = inMsg.cmnd;
//  660     uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
//  661 
//  662     switch ( cmndId )
//  663     {
//  664       case CMD_INCR:
//  665         counter += 1;  /* Increment the incoming counter */
//  666                        /* Intentionally fall through next case */
//  667 
//  668       case CMD_ECHO:
//  669       {
//  670         userQueue_t outMsg;
//  671 
//  672         outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
//  673         osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
//  674         osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
//  675         break;
//  676       }
//  677 
//  678       default:
//  679         break;  /* Ignore unknown command */
//  680     }
//  681   }
//  682 }
//  683 #endif
//  684 
//  685 /*********************************************************************
//  686  */
// 
// 1 058 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
//     9 bytes in segment XDATA_I
//     9 bytes in segment XDATA_ID
//    18 bytes in segment XDATA_ROM_C
//   283 bytes in segment XDATA_Z
// 
// 1 103 bytes of CODE  memory
//    14 bytes of CONST memory (+ 4 bytes shared)
//   292 bytes of XDATA memory
//
//Errors: none
//Warnings: none
