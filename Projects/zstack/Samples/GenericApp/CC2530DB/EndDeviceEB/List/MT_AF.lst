###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                02/Sep/2016  18:31:00
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh v1.0.0\Components\mt\MT_AF.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Components\mt\MT_AF.c" -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK
#        -D MT_SYS_FUNC -D MT_ZDO_FUNC -D HAL_UART=TRUE -D HAL_UART_ISR=1 -D
#        HAL_UART_DMA=2 -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC "C:\Texas
#        Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\"
#        -lA "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\MT_AF.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\MT_AF.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh v1.0.0\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2014-08-21 13:23:51 -0700 (Thu, 21 Aug 2014) $
      4            Revision:       $Revision: 39843 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /* ------------------------------------------------------------------------------------------------
     43           *                                          Includes
     44           * ------------------------------------------------------------------------------------------------
     45           */
     46          #include "ZComDef.h"
     47          #include "OSAL.h"
     48          #include "MT.h"
     49          #include "MT_AF.h"
     50          #include "MT_ZDO.h"
     51          #include "nwk.h"
     52          #include "OnBoard.h"
     53          #include "MT_UART.h"
     54          
     55          #if defined INTER_PAN
     56          #include "stub_aps.h"
     57          #endif
     58          
     59          #if defined ( MT_GP_FUNC )
     60          #include "MT_GP.h"
     61          #endif
     62          
     63          /* ------------------------------------------------------------------------------------------------
     64           *                                          Constants
     65           * ------------------------------------------------------------------------------------------------
     66           */
     67          
     68          #if !defined MT_AF_EXEC_CNT
     69          #define MT_AF_EXEC_CNT  15
     70          #endif
     71          
     72          #if !defined MT_AF_EXEC_DLY
     73          #define MT_AF_EXEC_DLY  1000
     74          #endif
     75          
     76          /* ------------------------------------------------------------------------------------------------
     77           *                                           Typedefs
     78           * ------------------------------------------------------------------------------------------------
     79           */
     80          
     81          typedef struct
     82          {
     83            uint8 *data;
     84            afAddrType_t dstAddr;
     85            endPointDesc_t *epDesc;
     86            uint16 cId;
     87            uint16 dataLen;
     88            uint8 transId;
     89            uint8 txOpts;
     90            uint8 radius;
     91            uint8 tick;
     92          } mtAfDataReq_t;
     93          
     94          typedef struct _mtAfInMsgList_t
     95          {
     96            struct _mtAfInMsgList_t *next;
     97            uint8 *data;
     98            uint32 timestamp;         // Receipt timestamp from MAC.
     99            uint8 tick;
    100          } mtAfInMsgList_t;
    101          
    102          /* ------------------------------------------------------------------------------------------------
    103           *                                        Local Variables
    104           * ------------------------------------------------------------------------------------------------
    105           */
    106          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    109          
    110          /* ------------------------------------------------------------------------------------------------
    111           *                                        Global Variables
    112           * ------------------------------------------------------------------------------------------------
    113           */
    114          
    115          #if defined ( MT_AF_CB_FUNC )
    116          uint16 _afCallbackSub;
    117          #endif
    118          
    119          /* ------------------------------------------------------------------------------------------------
    120           *                                        Local Functions
    121           * ------------------------------------------------------------------------------------------------
    122           */
    123          
    124          void MT_AfRegister(uint8 *pBuf);
    125          void MT_AfDelete(uint8 *pBuf);
    126          void MT_AfDataRequest(uint8 *pBuf);
    127          
    128          #if defined ( ZIGBEE_SOURCE_ROUTING )
    129          void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    130          #endif
    131          
    132          #if defined INTER_PAN
    133          static void MT_AfInterPanCtl(uint8 *pBuf);
    134          #endif
    135          
    136          static void MT_AfDataRetrieve(uint8 *pBuf);
    137          static void MT_AfDataStore(uint8 *pBuf);
    138          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    139          static void MT_AfAPSF_ConfigGet(uint8 *pBuf);
    140          
    141          
    142          /**************************************************************************************************
    143           * @fn          MT_AfExec
    144           *
    145           * @brief       This function is invoked by an MT timer event.
    146           *
    147           * input parameters
    148           *
    149           * None.
    150           *
    151           * output parameters
    152           *
    153           * None.
    154           *
    155           * @return      None.
    156           **************************************************************************************************
    157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    158          void MT_AfExec(void)
   \                     MT_AfExec:
    159          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    160            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??MT_AfExec_0:
   \   000005   90....       MOV     DPTR,#pMtAfInMsgList
   \   000008   8008         SJMP    ??MT_AfExec_1
    161          
    162            while (pItem != NULL)
    163            {
    164              if (--(pItem->tick) == 0)
    165              {
    166                if (pMtAfInMsgList == pItem)
    167                {
    168                  pMtAfInMsgList = pItem->next;
    169                  (void)osal_mem_free(pItem);
    170                  pItem = pMtAfInMsgList;
    171                }
    172                else
    173                {
    174                  pPrev->next = pItem->next;
    175                  (void)osal_mem_free(pItem);
    176                  pItem = pPrev->next;
    177                }
    178              }
    179              else
    180              {
    181                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    182                pItem = pItem->next;
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
    183              }
   \                     ??MT_AfExec_1:
   \   000012   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   603B         JZ      ??MT_AfExec_3
   \   000019   EA           MOV     A,R2
   \   00001A   2408         ADD     A,#0x8
   \   00001C   F582         MOV     DPL,A
   \   00001E   E4           CLR     A
   \   00001F   3B           ADDC    A,R3
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   14           DEC     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   70E3         JNZ     ??MT_AfExec_2
   \   000027   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00002A   EA           MOV     A,R2
   \   00002B   68           XRL     A,R0
   \   00002C   7002         JNZ     ??MT_AfExec_4
   \   00002E   EB           MOV     A,R3
   \   00002F   69           XRL     A,R1
   \                     ??MT_AfExec_4:
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   700B         JNZ     ??MT_AfExec_5
   \   000036   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000039   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00003C                ; Setup parameters for call to function osal_mem_free
   \   00003C   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00003F   80C4         SJMP    ??MT_AfExec_0
   \                     ??MT_AfExec_5:
   \   000041   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00004B                ; Setup parameters for call to function osal_mem_free
   \   00004B   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   80BE         SJMP    ??MT_AfExec_1
    184            }
    185          
    186            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_3:
   \   000054   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000057   601A         JZ      ??MT_AfExec_6
    187            {
    188              if (--(pMtAfDataReq->tick) == 0)
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   C8           XCH     A,R0
   \   00005B   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   14           DEC     A
   \   000060   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000063   E0           MOVX    A,@DPTR
   \   000064   700D         JNZ     ??MT_AfExec_6
    189              {
    190                (void)osal_mem_free(pMtAfDataReq);
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000069   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    191                pMtAfDataReq = NULL;
   \   00006C   90....       MOV     DPTR,#pMtAfDataReq
   \   00006F   E4           CLR     A
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   F0           MOVX    @DPTR,A
    192              }
    193            }
    194          
    195            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_6:
   \   000073   90....       MOV     DPTR,#pMtAfInMsgList
   \   000076   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000079   7005         JNZ     ??MT_AfExec_7
   \   00007B   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00007E   6026         JZ      ??MT_AfExec_8
    196            {
    197              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_7:
   \   000080                ; Setup parameters for call to function osal_start_timerEx
   \   000080   90....       MOV     DPTR,#__Constant_3e8
   \   000083   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000086   7A08         MOV     R2,#0x8
   \   000088   7B00         MOV     R3,#0x0
   \   00008A   90....       MOV     DPTR,#MT_TaskID
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000092   7404         MOV     A,#0x4
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
   \   000097   E9           MOV     A,R1
   \   000098   600C         JZ      ??MT_AfExec_8
    198              {
    199                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00009A                ; Setup parameters for call to function osal_set_event
   \   00009A   7A08         MOV     R2,#0x8
   \   00009C   7B00         MOV     R3,#0x0
   \   00009E   90....       MOV     DPTR,#MT_TaskID
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F9           MOV     R1,A
   \   0000A3   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
    200              }
    201            }
    202          }
   \                     ??MT_AfExec_8:
   \   0000A6   02....       LJMP    ??Subroutine45_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000004   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   2417         ADD     A,#0x17
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine47_0
   \   000003                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   90....       MOV     DPTR,#pMtAfInMsgList
   \   000003                REQUIRE ??Subroutine53_0
   \   000003                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   90....       MOV     DPTR,#pMtAfInMsgList
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   C8           XCH     A,R0
   \   000008   22           RET
    203          
    204          /***************************************************************************************************
    205           * @fn      MT_AfCommandProcessing
    206           *
    207           * @brief   Process all the AF commands that are issued by test tool
    208           *
    209           * @param   pBuf - pointer to the received buffer
    210           *
    211           * @return  status
    212           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    213          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    214          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   F9           MOV     R1,A
    215            uint8 status = MT_RPC_SUCCESS;
   \   00000E   7E00         MOV     R6,#0x0
    216          
    217            switch (pBuf[MT_RPC_POS_CMD1])
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   601C         JZ      ??MT_AfCommandProcessing_0
   \   000019   14           DEC     A
   \   00001A   6025         JZ      ??MT_AfCommandProcessing_1
   \   00001C   14           DEC     A
   \   00001D   6022         JZ      ??MT_AfCommandProcessing_1
   \   00001F   14           DEC     A
   \   000020   6025         JZ      ??MT_AfCommandProcessing_2
   \   000022   14           DEC     A
   \   000023   6016         JZ      ??MT_AfCommandProcessing_3
   \   000025   24F3         ADD     A,#-0xd
   \   000027   602A         JZ      ??MT_AfCommandProcessing_4
   \   000029   14           DEC     A
   \   00002A   6021         JZ      ??MT_AfCommandProcessing_5
   \   00002C   14           DEC     A
   \   00002D   602A         JZ      ??MT_AfCommandProcessing_6
   \   00002F   14           DEC     A
   \   000030   606A         JZ      ??MT_AfCommandProcessing_7
   \   000032   02....       LJMP    ??MT_AfCommandProcessing_8 & 0xFFFF
    218            {
    219              case MT_AF_REGISTER:
    220                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   000035                ; Setup parameters for call to function MT_AfRegister
   \   000035   12....       LCALL   ??MT_AfRegister?relay; Banked call to: MT_AfRegister
    221                break;
   \   000038   02....       LJMP    ??MT_AfCommandProcessing_9 & 0xFFFF
    222          
    223              case MT_AF_DELETE:
    224                MT_AfDelete( pBuf );
   \                     ??MT_AfCommandProcessing_3:
   \   00003B                ; Setup parameters for call to function MT_AfDelete
   \   00003B   12....       LCALL   ??MT_AfDelete?relay  ; Banked call to: MT_AfDelete
    225                break;
   \   00003E   02....       LJMP    ??MT_AfCommandProcessing_9 & 0xFFFF
    226          
    227              case MT_AF_DATA_REQUEST:
    228              case MT_AF_DATA_REQUEST_EXT:
    229                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   000041                ; Setup parameters for call to function MT_AfDataRequest
   \   000041   12....       LCALL   ??MT_AfDataRequest?relay; Banked call to: MT_AfDataRequest
    230                break;
   \   000044   02....       LJMP    ??MT_AfCommandProcessing_9 & 0xFFFF
    231          
    232          #if defined ( ZIGBEE_SOURCE_ROUTING )
    233              case MT_AF_DATA_REQUEST_SRCRTG:
    234                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   000047                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   000047   12....       LCALL   ??MT_AfDataRequestSrcRtg?relay; Banked call to: MT_AfDataRequestSrcRtg
    235                break;
   \   00004A   02....       LJMP    ??MT_AfCommandProcessing_9 & 0xFFFF
    236          #endif
    237          
    238          #if defined INTER_PAN
    239              case MT_AF_INTER_PAN_CTL:
    240                MT_AfInterPanCtl(pBuf);
    241                break;
    242          #endif
    243          
    244              case MT_AF_DATA_RETRIEVE:
    245                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_5:
   \   00004D                ; Setup parameters for call to function MT_AfDataRetrieve
   \   00004D   12....       LCALL   ??MT_AfDataRetrieve?relay; Banked call to: MT_AfDataRetrieve
    246                break;
   \   000050   02....       LJMP    ??MT_AfCommandProcessing_9 & 0xFFFF
    247          
    248              case MT_AF_DATA_STORE:
    249                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   000053                ; Setup parameters for call to function MT_AfDataStore
   \   000053   12....       LCALL   ??MT_AfDataStore?relay; Banked call to: MT_AfDataStore
    250                break;
   \   000056   02....       LJMP    ??MT_AfCommandProcessing_9 & 0xFFFF
    251          
    252              case MT_AF_APSF_CONFIG_SET:
    253                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_6:
   \   000059   8882         MOV     DPL,R0
   \   00005B   8983         MOV     DPH,R1
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   C0E0         PUSH    A
   \   000072   7401         MOV     A,#0x1
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   D0E0         POP     A
   \   000079   F0           MOVX    @DPTR,A
   \   00007A                ; Setup parameters for call to function afAPSF_ConfigSet
   \   00007A   AA..         MOV     R2,?XSP + 0
   \   00007C   AB..         MOV     R3,?XSP + 1
   \   00007E   8882         MOV     DPL,R0
   \   000080   8983         MOV     DPH,R1
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   12....       LCALL   ??afAPSF_ConfigSet?relay; Banked call to: afAPSF_ConfigSet
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   E9           MOV     A,R1
   \   000090   F0           MOVX    @DPTR,A
   \   000091                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000091   7402         MOV     A,#0x2
   \   000093   12....       LCALL   ?XSTACK_DISP102_8
   \   000096   7B01         MOV     R3,#0x1
   \   000098   7A13         MOV     R2,#0x13
   \   00009A   8046         SJMP    ??MT_AfCommandProcessing_10
    254                break;
    255          
    256              case MT_AF_APSF_CONFIG_GET:
    257                MT_AfAPSF_ConfigGet(pBuf);
   \                     ??MT_AfCommandProcessing_7:
   \   00009C   90....       MOV     DPTR,#`?<Constant {0, 0}>`
   \   00009F   AC..         MOV     R4,?XSP + 0
   \   0000A1   AD..         MOV     R5,?XSP + 1
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   0000A8                ; Setup parameters for call to function afAPSF_ConfigGet
   \   0000A8   AA..         MOV     R2,?XSP + 0
   \   0000AA   AB..         MOV     R3,?XSP + 1
   \   0000AC   8882         MOV     DPL,R0
   \   0000AE   8983         MOV     DPH,R1
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F9           MOV     R1,A
   \   0000B5   12....       LCALL   ??afAPSF_ConfigGet?relay; Banked call to: afAPSF_ConfigGet
   \   0000B8   85..82       MOV     DPL,?XSP + 0
   \   0000BB   85..83       MOV     DPH,?XSP + 1
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   C0E0         PUSH    A
   \   0000C1   7403         MOV     A,#0x3
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   D0E0         POP     A
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   7401         MOV     A,#0x1
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   C0E0         PUSH    A
   \   0000D1   7404         MOV     A,#0x4
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   D0E0         POP     A
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000D9   7403         MOV     A,#0x3
   \   0000DB   12....       LCALL   ?XSTACK_DISP102_8
   \   0000DE   7B03         MOV     R3,#0x3
   \   0000E0   7A14         MOV     R2,#0x14
   \                     ??MT_AfCommandProcessing_10:
   \   0000E2   7964         MOV     R1,#0x64
   \   0000E4   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    258                break;
   \   0000E7   8002         SJMP    ??MT_AfCommandProcessing_9
    259          
    260              default:
    261                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_8:
   \   0000E9   7E02         MOV     R6,#0x2
    262                break;
    263            }
    264          
    265            return status;
   \                     ??MT_AfCommandProcessing_9:
   \   0000EB   EE           MOV     A,R6
   \   0000EC   F9           MOV     R1,A
   \   0000ED   7405         MOV     A,#0x5
   \   0000EF                REQUIRE ?Subroutine0
   \   0000EF                ; // Fall through to label ?Subroutine0
    266          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0
    267          
    268          /***************************************************************************************************
    269           * @fn      MT_AfRegister
    270           *
    271           * @brief   Process AF Register command
    272           *
    273           * @param   pBuf - pointer to the received buffer
    274           *
    275           * @return  none
    276           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    277          void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    278          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    279            uint8 cmdId;
    280            uint8 retValue = ZMemError;
   \   00000E   12....       LCALL   ?Subroutine32 & 0xFFFF
    281            endPointDesc_t *epDesc;
    282          
    283            /* parse header */
    284            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_59:
   \   000011   F5..         MOV     ?V2,A
    285            pBuf += MT_RPC_FRAME_HDR_SZ;
    286          
    287            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \   000013                ; Setup parameters for call to function osal_mem_alloc
   \   000013   7A06         MOV     R2,#0x6
   \   000015   7B00         MOV     R3,#0x0
   \   000017   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00001A   8A..         MOV     ?V4,R2
   \   00001C   8B..         MOV     ?V5,R3
   \   00001E   AE..         MOV     R6,?V4
   \   000020   AF..         MOV     R7,?V5
    288            if ( epDesc )
   \   000022   EE           MOV     A,R6
   \   000023   4F           ORL     A,R7
   \   000024   603F         JZ      ??MT_AfRegister_0
    289            {
    290              epDesc->task_id = &MT_TaskID;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   74..         MOV     A,#MT_TaskID & 0xff
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   74..         MOV     A,#(MT_TaskID >> 8) & 0xff
   \   000031   F0           MOVX    @DPTR,A
    291              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   000032                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   000032   EE           MOV     A,R6
   \   000033   FC           MOV     R4,A
   \   000034   EF           MOV     A,R7
   \   000035   FD           MOV     R5,A
   \   000036   E5..         MOV     A,?V0
   \   000038   2403         ADD     A,#0x3
   \   00003A   FA           MOV     R2,A
   \   00003B   E4           CLR     A
   \   00003C   35..         ADDC    A,?V1
   \   00003E   FB           MOV     R3,A
   \   00003F   12....       LCALL   ??MT_BuildEndpointDesc?relay; Banked call to: MT_BuildEndpointDesc
   \   000042   E9           MOV     A,R1
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   F0           MOVX    @DPTR,A
    292              if ( retValue == ZSuccess )
   \   00004A   700F         JNZ     ??MT_AfRegister_1
    293              {
    294                retValue = afRegister( epDesc );
   \   00004C                ; Setup parameters for call to function afRegister
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
   \   000053   E9           MOV     A,R1
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   F0           MOVX    @DPTR,A
    295              }
    296          
    297              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_1:
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6007         JZ      ??MT_AfRegister_0
    298              {
    299                osal_mem_free( epDesc );
   \   00005E                ; Setup parameters for call to function osal_mem_free
   \   00005E   EE           MOV     A,R6
   \   00005F   FA           MOV     R2,A
   \   000060   EF           MOV     A,R7
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    300              }
    301            }
    302          
    303            /* Build and send back the response */
    304            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_0:
   \   000065                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000065   AC..         MOV     R4,?XSP + 0
   \   000067   AD..         MOV     R5,?XSP + 1
   \   000069   7B01         MOV     R3,#0x1
   \   00006B   AA..         MOV     R2,?V2
   \   00006D   7964         MOV     R1,#0x64
   \   00006F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    305          }
   \   000072   7401         MOV     A,#0x1
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   7F06         MOV     R7,#0x6
   \   000079   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7410         MOV     A,#0x10
   \   000008   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    306          
    307          /***************************************************************************************************
    308           * @fn      MT_AfDelete
    309           *
    310           * @brief   Process AF Delete Endpoint command
    311           *
    312           * @param   pBuf - pointer to the received buffer
    313           *
    314           * @return  none
    315           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          void MT_AfDelete(uint8 *pBuf)
   \                     MT_AfDelete:
    317          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    318            uint8 cmdId;
    319            uint8 retValue = ZMemError;
   \   00000A   12....       LCALL   ?Subroutine32 & 0xFFFF
    320          
    321            /* parse header */
    322            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_60:
   \   00000D   FE           MOV     R6,A
    323            pBuf += MT_RPC_FRAME_HDR_SZ;
    324          
    325            retValue = afDelete( *pBuf );
   \   00000E                ; Setup parameters for call to function afDelete
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   12....       LCALL   ??afDelete?relay     ; Banked call to: afDelete
   \   00001A   E9           MOV     A,R1
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   12....       LCALL   ?Subroutine30 & 0xFFFF
    326          
    327            /* Build and send back the response */
    328            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_52:
   \   000024   7B01         MOV     R3,#0x1
   \   000026   EE           MOV     A,R6
   \   000027   FA           MOV     R2,A
   \   000028   7964         MOV     R1,#0x64
   \   00002A   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    329          }
   \   00002D   7401         MOV     A,#0x1
   \   00002F   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   22           RET
    330          
    331          /***************************************************************************************************
    332           * @fn      MT_AfDataRequest
    333           *
    334           * @brief   Process AF Register command
    335           *
    336           * @param   pBuf - pointer to the received buffer
    337           *
    338           * @return  none
    339           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    340          void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    341          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V5,R3
    342            #define MT_AF_REQ_MSG_LEN  10
    343            #define MT_AF_REQ_MSG_EXT  10
    344          
    345            endPointDesc_t *epDesc;
    346            afAddrType_t dstAddr;
    347            cId_t cId;
    348            uint8 transId, txOpts, radius;
    349            uint8 cmd0, cmd1;
    350            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?Subroutine44 & 0xFFFF
    351            uint16 dataLen, tempLen;
    352          
    353            /* Parse header */
    354            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \                     ??CrossCallReturnLabel_87:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V10,A
    355            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V7,A
    356            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000023   EA           MOV     A,R2
   \   000024   2403         ADD     A,#0x3
   \   000026   F5..         MOV     ?V4,A
   \   000028   5002         JNC     ??MT_AfDataRequest_0
   \   00002A   05..         INC     ?V5
    357          
    358            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   00002C   7402         MOV     A,#0x2
   \   00002E   65..         XRL     A,?V7
   \   000030   7071         JNZ     ??MT_AfDataRequest_1
    359            {
    360              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000032   85..82       MOV     DPL,?V4
   \   000035   85..83       MOV     DPH,?V5
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F8           MOV     R0,A
   \   00003A   740A         MOV     A,#0xa
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E8           MOV     A,R0
   \   000040   12....       LCALL   ?Subroutine24 & 0xFFFF
    361          
    362              if (dstAddr.addrMode == afAddr64Bit)
   \                     ??CrossCallReturnLabel_35:
   \   000043   7403         MOV     A,#0x3
   \   000045   68           XRL     A,R0
   \   000046   7021         JNZ     ??MT_AfDataRequest_2
    363              {
    364                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   000048                ; Setup parameters for call to function osal_memcpy
   \   000048   85....       MOV     ?V0,?V4
   \   00004B   85....       MOV     ?V1,?V5
   \   00004E   75..00       MOV     ?V2,#0x0
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000056   7C08         MOV     R4,#0x8
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   7405         MOV     A,#0x5
   \   00005C   12....       LCALL   ?XSTACK_DISP101_8
   \   00005F   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000062   7403         MOV     A,#0x3
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   \   000067   8009         SJMP    ??CrossCallReturnLabel_42
    365              }
    366              else
    367              {
    368                dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_2:
   \   000069   12....       LCALL   ?Subroutine5 & 0xFFFF
    369              }
   \                     ??CrossCallReturnLabel_2:
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   12....       LCALL   ?Subroutine27 & 0xFFFF
    370              pBuf += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_42:
   \   000072   E5..         MOV     A,?V4
   \   000074   2408         ADD     A,#0x8
   \   000076   F5..         MOV     ?V4,A
   \   000078   5002         JNC     ??MT_AfDataRequest_3
   \   00007A   05..         INC     ?V5
    371          
    372              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_3:
   \   00007C   F582         MOV     DPL,A
   \   00007E   85..83       MOV     DPH,?V5
   \   000081   E0           MOVX    A,@DPTR
   \   000082   C0E0         PUSH    A
   \   000084   740B         MOV     A,#0xb
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   D0E0         POP     A
   \   00008B   12....       LCALL   ?Subroutine24 & 0xFFFF
    373              dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_36:
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   FA           MOV     R2,A
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   \   000093   EA           MOV     A,R2
   \   000094   F8           MOV     R0,A
   \   000095   740C         MOV     A,#0xc
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   12....       LCALL   ?Subroutine26 & 0xFFFF
    374              pBuf += 2;
    375            }
   \                     ??CrossCallReturnLabel_38:
   \   00009D   503A         JNC     ??MT_AfDataRequest_4
   \   00009F   05..         INC     ?V5
   \   0000A1   8036         SJMP    ??MT_AfDataRequest_4
    376            else
    377            {
    378              /* Destination address */
    379              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000A3   740A         MOV     A,#0xa
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   7402         MOV     A,#0x2
   \   0000AA   F0           MOVX    @DPTR,A
    380              dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000AB   85..82       MOV     DPL,?V4
   \   0000AE   85..83       MOV     DPH,?V5
   \   0000B1   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   12....       LCALL   ?Subroutine26 & 0xFFFF
    381              pBuf += 2;
   \                     ??CrossCallReturnLabel_39:
   \   0000BA   5002         JNC     ??MT_AfDataRequest_5
   \   0000BC   05..         INC     ?V5
    382          
    383              /* Destination endpoint */
    384              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_5:
   \   0000BE   F582         MOV     DPL,A
   \   0000C0   85..83       MOV     DPH,?V5
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   C0E0         PUSH    A
   \   0000C6   740B         MOV     A,#0xb
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   D0E0         POP     A
   \   0000CD   12....       LCALL   ?Subroutine24 & 0xFFFF
    385              dstAddr.panId = 0;
   \                     ??CrossCallReturnLabel_37:
   \   0000D0   740C         MOV     A,#0xc
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   E4           CLR     A
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   F0           MOVX    @DPTR,A
    386            }
    387          
    388            /* Source endpoint */
    389            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_4:
   \   0000D9                ; Setup parameters for call to function afFindEndPointDesc
   \   0000D9   85..82       MOV     DPL,?V4
   \   0000DC   85..83       MOV     DPH,?V5
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F9           MOV     R1,A
   \   0000E1   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   0000E4   8A..         MOV     ?V8,R2
   \   0000E6   8B..         MOV     ?V9,R3
   \   0000E8   85..82       MOV     DPL,?V4
   \   0000EB   85..83       MOV     DPH,?V5
   \   0000EE   A3           INC     DPTR
   \   0000EF   8582..       MOV     ?V4,DPL
   \   0000F2   8583..       MOV     ?V5,DPH
    390          
    391            /* ClusterId */
    392            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000F5   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000F8   F5..         MOV     ?V0,A
   \   0000FA   E4           CLR     A
   \   0000FB   39           ADDC    A,R1
   \   0000FC   F5..         MOV     ?V1,A
    393            pBuf +=2;
   \   0000FE   E5..         MOV     A,?V4
   \   000100   2402         ADD     A,#0x2
   \   000102   F5..         MOV     ?V4,A
   \   000104   5002         JNC     ??MT_AfDataRequest_6
   \   000106   05..         INC     ?V5
    394          
    395            /* TransId */
    396            transId = *pBuf++;
   \                     ??MT_AfDataRequest_6:
   \   000108   F582         MOV     DPL,A
   \   00010A   85..83       MOV     DPH,?V5
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   C0E0         PUSH    A
   \   000110   7401         MOV     A,#0x1
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   D0E0         POP     A
   \   000117   12....       LCALL   ?Subroutine40 & 0xFFFF
    397          
    398            /* TxOption */
    399            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_80:
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   F5..         MOV     ?V3,A
   \   00011D   A3           INC     DPTR
    400          
    401            /* Radius */
    402            radius = *pBuf++;
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   F5..         MOV     ?V2,A
   \   000121   A3           INC     DPTR
   \   000122   8582..       MOV     ?V4,DPL
   \   000125   8583..       MOV     ?V5,DPH
    403          
    404            /* Length */
    405            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \   000128   7402         MOV     A,#0x2
   \   00012A   65..         XRL     A,?V7
   \   00012C   701A         JNZ     ??MT_AfDataRequest_7
    406            {
    407              dataLen = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00012E   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000131   FE           MOV     R6,A
   \   000132   E4           CLR     A
   \   000133   39           ADDC    A,R1
   \   000134   FF           MOV     R7,A
    408              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   000135   EE           MOV     A,R6
   \   000136   2414         ADD     A,#0x14
   \   000138   F8           MOV     R0,A
   \   000139   E4           CLR     A
   \   00013A   3F           ADDC    A,R7
   \   00013B   F9           MOV     R1,A
    409              pBuf += 2;
   \   00013C   E5..         MOV     A,?V4
   \   00013E   2402         ADD     A,#0x2
   \   000140   F5..         MOV     ?V4,A
   \   000142   5016         JNC     ??MT_AfDataRequest_8
   \   000144   05..         INC     ?V5
   \   000146   8012         SJMP    ??MT_AfDataRequest_8
    410            }
    411            else
    412            {
    413              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_7:
   \   000148   E0           MOVX    A,@DPTR
   \   000149   FE           MOV     R6,A
   \   00014A   7F00         MOV     R7,#0x0
   \   00014C   A3           INC     DPTR
   \   00014D   8582..       MOV     ?V4,DPL
   \   000150   8583..       MOV     ?V5,DPH
    414              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   000153   240A         ADD     A,#0xa
   \   000155   F8           MOV     R0,A
   \   000156   E4           CLR     A
   \   000157   3400         ADDC    A,#0x0
   \   000159   F9           MOV     R1,A
    415            }
    416          
    417            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_8:
   \   00015A   E5..         MOV     A,?V8
   \   00015C   45..         ORL     A,?V9
   \   00015E   6011         JZ      ??MT_AfDataRequest_9
    418            {
    419              retValue = afStatus_INVALID_PARAMETER;
    420            }
    421            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \   000160   C3           CLR     C
   \   000161   E8           MOV     A,R0
   \   000162   94FB         SUBB    A,#-0x5
   \   000164   E9           MOV     A,R1
   \   000165   9400         SUBB    A,#0x0
   \   000167   5003         JNC     $+5
   \   000169   02....       LJMP    ??MT_AfDataRequest_10 & 0xFFFF
    422            {
    423              if (pMtAfDataReq != NULL)
   \   00016C   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00016F   600B         JZ      ??MT_AfDataRequest_11
    424              {
    425                retValue = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfDataRequest_9:
   \   000171   85..82       MOV     DPL,?XSP + 0
   \   000174   85..83       MOV     DPH,?XSP + 1
   \   000177   7402         MOV     A,#0x2
   \   000179   02....       LJMP    ??MT_AfDataRequest_12 & 0xFFFF
    426              }
    427              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_11:
   \   00017C                ; Setup parameters for call to function osal_mem_alloc
   \   00017C   EE           MOV     A,R6
   \   00017D   2418         ADD     A,#0x18
   \   00017F   FA           MOV     R2,A
   \   000180   E4           CLR     A
   \   000181   3F           ADDC    A,R7
   \   000182   FB           MOV     R3,A
   \   000183   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000186   90....       MOV     DPTR,#pMtAfDataReq
   \   000189   EA           MOV     A,R2
   \   00018A   F0           MOVX    @DPTR,A
   \   00018B   A3           INC     DPTR
   \   00018C   EB           MOV     A,R3
   \   00018D   F0           MOVX    @DPTR,A
   \   00018E   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000191   85..82       MOV     DPL,?XSP + 0
   \   000194   85..83       MOV     DPH,?XSP + 1
   \   000197   7005         JNZ     ??MT_AfDataRequest_13
    428              {
    429                retValue = afStatus_MEM_FAIL;
   \   000199   7410         MOV     A,#0x10
   \   00019B   02....       LJMP    ??MT_AfDataRequest_12 & 0xFFFF
    430              }
    431              else
    432              {
    433                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_13:
   \   00019E   E4           CLR     A
   \   00019F   F0           MOVX    @DPTR,A
    434          
    435                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   0001A0   90....       MOV     DPTR,#pMtAfDataReq
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   2418         ADD     A,#0x18
   \   0001A6   FA           MOV     R2,A
   \   0001A7   A3           INC     DPTR
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   3400         ADDC    A,#0x0
   \   0001AB   FB           MOV     R3,A
   \   0001AC   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001AF   EA           MOV     A,R2
   \   0001B0   F0           MOVX    @DPTR,A
   \   0001B1   A3           INC     DPTR
   \   0001B2   EB           MOV     A,R3
   \   0001B3   F0           MOVX    @DPTR,A
    436                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   0001B4                ; Setup parameters for call to function osal_memcpy
   \   0001B4   7402         MOV     A,#0x2
   \   0001B6   12....       LCALL   ?XSTACK_DISP100_8
   \   0001B9   88..         MOV     ?V4,R0
   \   0001BB   89..         MOV     ?V5,R1
   \   0001BD   75..00       MOV     ?V6,#0x0
   \   0001C0   78..         MOV     R0,#?V4
   \   0001C2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001C5   7C0C         MOV     R4,#0xc
   \   0001C7   7D00         MOV     R5,#0x0
   \   0001C9   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0001CC   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0001CF   7403         MOV     A,#0x3
   \   0001D1   12....       LCALL   ?DEALLOC_XSTACK8
    437                pMtAfDataReq->epDesc = epDesc;
   \   0001D4   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001D7   E5..         MOV     A,?V8
   \   0001D9   F0           MOVX    @DPTR,A
   \   0001DA   A3           INC     DPTR
   \   0001DB   E5..         MOV     A,?V9
   \   0001DD   F0           MOVX    @DPTR,A
    438                pMtAfDataReq->cId = cId;
   \   0001DE   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001E1   E5..         MOV     A,?V0
   \   0001E3   F0           MOVX    @DPTR,A
   \   0001E4   A3           INC     DPTR
   \   0001E5   E5..         MOV     A,?V1
   \   0001E7   F0           MOVX    @DPTR,A
    439                pMtAfDataReq->dataLen = dataLen;
   \   0001E8   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0001EB   EE           MOV     A,R6
   \   0001EC   F0           MOVX    @DPTR,A
   \   0001ED   A3           INC     DPTR
   \   0001EE   EF           MOV     A,R7
   \   0001EF   F0           MOVX    @DPTR,A
    440                pMtAfDataReq->transId = transId;
   \   0001F0   7401         MOV     A,#0x1
   \   0001F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   C0E0         PUSH    A
   \   0001F8   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0001FB   2414         ADD     A,#0x14
   \   0001FD   F582         MOV     DPL,A
   \   0001FF   E4           CLR     A
   \   000200   38           ADDC    A,R0
   \   000201   F583         MOV     DPH,A
   \   000203   D0E0         POP     A
   \   000205   F0           MOVX    @DPTR,A
    441                pMtAfDataReq->txOpts = txOpts;
   \   000206   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000209   E5..         MOV     A,?V3
   \   00020B   F0           MOVX    @DPTR,A
    442                pMtAfDataReq->radius = radius;
   \   00020C   90....       MOV     DPTR,#pMtAfDataReq
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   F8           MOV     R0,A
   \   000211   A3           INC     DPTR
   \   000212   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000215   E5..         MOV     A,?V2
   \   000217   12....       LCALL   ?Subroutine8 & 0xFFFF
    443          
    444                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    445                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_9:
   \   00021A   740F         MOV     A,#0xf
   \   00021C   F0           MOVX    @DPTR,A
    446                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   00021D                ; Setup parameters for call to function osal_start_timerEx
   \   00021D   90....       MOV     DPTR,#__Constant_3e8
   \   000220   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000223   7A08         MOV     R2,#0x8
   \   000225   7B00         MOV     R3,#0x0
   \   000227   90....       MOV     DPTR,#MT_TaskID
   \   00022A   E0           MOVX    A,@DPTR
   \   00022B   F9           MOV     R1,A
   \   00022C   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00022F   7404         MOV     A,#0x4
   \   000231   12....       LCALL   ?DEALLOC_XSTACK8
   \   000234   E9           MOV     A,R1
   \   000235   604F         JZ      ??MT_AfDataRequest_14
    447                {
    448                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000237                ; Setup parameters for call to function osal_set_event
   \   000237   7A08         MOV     R2,#0x8
   \   000239   7B00         MOV     R3,#0x0
   \   00023B   90....       MOV     DPTR,#MT_TaskID
   \   00023E   E0           MOVX    A,@DPTR
   \   00023F   F9           MOV     R1,A
   \   000240   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000243   8041         SJMP    ??MT_AfDataRequest_14
    449                }
    450              }
    451            }
    452          #if defined ( MT_GP_FUNC )
    453            else if ( ( cmd1 == MT_AF_DATA_REQUEST_EXT )
    454                     && ( dstAddr.endPoint == ZGP_ENDPOINT_ID )
    455                     && ( dstAddr.panId == 0 )
    456                     && ( dstAddr.addrMode == afAddr64Bit ) )// loopback support
    457            {
    458              retValue = MT_GpGenerateResponse( dstAddr.addr.extAddr, dataLen, pBuf );
    459            }
    460          #endif
    461            else
    462            {
    463              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_10:
   \   000245                ; Setup parameters for call to function AF_DataRequest
   \   000245   78..         MOV     R0,#?V2
   \   000247   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00024A   7402         MOV     A,#0x2
   \   00024C   12....       LCALL   ?XSTACK_DISP100_8
   \   00024F   88..         MOV     ?V12,R0
   \   000251   89..         MOV     ?V13,R1
   \   000253   78..         MOV     R0,#?V12
   \   000255   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000258   78..         MOV     R0,#?V4
   \   00025A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00025D   8E..         MOV     ?V4,R6
   \   00025F   8F..         MOV     ?V5,R7
   \   000261   78..         MOV     R0,#?V4
   \   000263   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000266   78..         MOV     R0,#?V0
   \   000268   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026B   A9..         MOV     R1,?V3
   \   00026D   AC..         MOV     R4,?V8
   \   00026F   AD..         MOV     R5,?V9
   \   000271   740B         MOV     A,#0xb
   \   000273   12....       LCALL   ?XSTACK_DISP101_8
   \   000276   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   000279   7409         MOV     A,#0x9
   \   00027B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00027E   E9           MOV     A,R1
   \   00027F   85..82       MOV     DPL,?XSP + 0
   \   000282   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequest_12:
   \   000285   F0           MOVX    @DPTR,A
    464            }
    465          
    466            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_14:
   \   000286   74E0         MOV     A,#-0x20
   \   000288   55..         ANL     A,?V10
   \   00028A   6420         XRL     A,#0x20
   \   00028C   700D         JNZ     ??MT_AfDataRequest_15
    467            {
    468              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   00028E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00028E   AC..         MOV     R4,?XSP + 0
   \   000290   AD..         MOV     R5,?XSP + 1
   \   000292   7B01         MOV     R3,#0x1
   \   000294   AA..         MOV     R2,?V7
   \   000296   7964         MOV     R1,#0x64
   \   000298   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    469            }
    470          }
   \                     ??MT_AfDataRequest_15:
   \   00029B   740E         MOV     A,#0xe
   \   00029D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002A0   7F0E         MOV     R7,#0xe
   \   0002A2   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   E5..         MOV     A,?V4
   \   000007   2402         ADD     A,#0x2
   \   000009   F5..         MOV     ?V4,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   8582..       MOV     ?V4,DPL
   \   000006   8583..       MOV     ?V5,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V4
   \   000004   85..83       MOV     DPH,?V5
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine46_0
   \   000001                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   C8           XCH     A,R0
   \   000006   F9           MOV     R1,A
   \   000007   EA           MOV     A,R2
   \   000008   28           ADD     A,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   7402         MOV     A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2402         ADD     A,#0x2
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C8           XCH     A,R0
   \   000002   2416         ADD     A,#0x16
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   38           ADDC    A,R0
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   2415         ADD     A,#0x15
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   2412         ADD     A,#0x12
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   2410         ADD     A,#0x10
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   240E         ADD     A,#0xe
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   22           RET
    471          
    472          #if defined ( ZIGBEE_SOURCE_ROUTING )
    473          
    474          /***************************************************************************************************
    475           * @fn      MT_AfDataRequestSrcRtg
    476           *
    477           * @brief   Process AF Register command
    478           *
    479           * @param   pBuf - pointer to the received buffer
    480           *
    481           * @return  none
    482           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    484          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    485            uint8 cmdId, dataLen = 0;
    486            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?Subroutine31 & 0xFFFF
    487            endPointDesc_t *epDesc;
    488            byte transId;
    489            afAddrType_t dstAddr;
    490            cId_t cId;
    491            byte txOpts, radius, srcEP, relayCnt;
    492            uint16 *pRelayList;
    493            uint8 i;
    494          
    495            /* parse header */
    496            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_56:
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V6,A
    497            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001D   EE           MOV     A,R6
   \   00001E   2403         ADD     A,#0x3
   \   000020   FE           MOV     R6,A
   \   000021   5001         JNC     ??MT_AfDataRequestSrcRtg_0
   \   000023   0F           INC     R7
    498          
    499            /* Destination address */
    500            /* Initialize the panID field to zero to avoid inter-pan */
    501            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   000024                ; Setup parameters for call to function osal_memset
   \   000024   7C0C         MOV     R4,#0xc
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7900         MOV     R1,#0x0
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?XSTACK_DISP101_8
   \   00002F   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    502            dstAddr.addrMode = afAddr16Bit;
   \   000032   740A         MOV     A,#0xa
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   7402         MOV     A,#0x2
   \   000039   F0           MOVX    @DPTR,A
    503            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   12....       LCALL   ?Subroutine27 & 0xFFFF
    504            pBuf += 2;
   \                     ??CrossCallReturnLabel_43:
   \   000047   EE           MOV     A,R6
   \   000048   2402         ADD     A,#0x2
   \   00004A   FE           MOV     R6,A
   \   00004B   5001         JNC     ??MT_AfDataRequestSrcRtg_1
   \   00004D   0F           INC     R7
    505          
    506            /* Destination endpoint */
    507            dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   E0           MOVX    A,@DPTR
   \   000053   C0E0         PUSH    A
   \   000055   740B         MOV     A,#0xb
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   D0E0         POP     A
   \   00005C   12....       LCALL   ?Subroutine31 & 0xFFFF
    508          
    509            /* Source endpoint */
    510            srcEP = *pBuf++;
   \                     ??CrossCallReturnLabel_57:
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   A3           INC     DPTR
   \   000062   AE82         MOV     R6,DPL
   \   000064   AF83         MOV     R7,DPH
    511            epDesc = afFindEndPointDesc( srcEP );
   \   000066                ; Setup parameters for call to function afFindEndPointDesc
   \   000066   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   000069   8A..         MOV     ?V2,R2
   \   00006B   8B..         MOV     ?V3,R3
    512          
    513            /* ClusterId */
    514            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   12....       LCALL   ?Subroutine4 & 0xFFFF
    515            pBuf +=2;
   \                     ??CrossCallReturnLabel_0:
   \   000074   EE           MOV     A,R6
   \   000075   2402         ADD     A,#0x2
   \   000077   FE           MOV     R6,A
   \   000078   5001         JNC     ??MT_AfDataRequestSrcRtg_2
   \   00007A   0F           INC     R7
    516          
    517            /* TransId */
    518            transId = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C0E0         PUSH    A
   \   000082   7401         MOV     A,#0x1
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   D0E0         POP     A
   \   000089   12....       LCALL   ?Subroutine31 & 0xFFFF
    519          
    520            /* TxOption */
    521            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_58:
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F5..         MOV     ?V7,A
   \   00008F   A3           INC     DPTR
    522          
    523            /* Radius */
    524            radius = *pBuf++;
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F5..         MOV     ?V8,A
   \   000093   A3           INC     DPTR
    525          
    526            /* Source route relay count */
    527            relayCnt = *pBuf++;
   \   000094   E0           MOVX    A,@DPTR
   \   000095   F5..         MOV     ?V9,A
   \   000097   A3           INC     DPTR
   \   000098   AE82         MOV     R6,DPL
   \   00009A   AF83         MOV     R7,DPH
    528          
    529            /* Convert the source route relay list */
    530            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \   00009C                ; Setup parameters for call to function osal_mem_alloc
   \   00009C   25E0         ADD     A,0xE0 /* A   */
   \   00009E   FA           MOV     R2,A
   \   00009F   E4           CLR     A
   \   0000A0   33           RLC     A
   \   0000A1   FB           MOV     R3,A
   \   0000A2   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000A5   8A..         MOV     ?V0,R2
   \   0000A7   8B..         MOV     ?V1,R3
   \   0000A9   EA           MOV     A,R2
   \   0000AA   45..         ORL     A,?V1
   \   0000AC   7003         JNZ     $+5
   \   0000AE   02....       LJMP    ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    531            {
    532              for( i = 0; i < relayCnt; i++ )
   \   0000B1   7C00         MOV     R4,#0x0
   \   0000B3   8024         SJMP    ??MT_AfDataRequestSrcRtg_4
    533              {
    534                pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   0000B5   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0000B8   E4           CLR     A
   \   0000B9   39           ADDC    A,R1
   \   0000BA   FB           MOV     R3,A
   \   0000BB   EC           MOV     A,R4
   \   0000BC   25E0         ADD     A,0xE0 /* A   */
   \   0000BE   F8           MOV     R0,A
   \   0000BF   E4           CLR     A
   \   0000C0   33           RLC     A
   \   0000C1   F9           MOV     R1,A
   \   0000C2   E5..         MOV     A,?V0
   \   0000C4   28           ADD     A,R0
   \   0000C5   F582         MOV     DPL,A
   \   0000C7   E5..         MOV     A,?V1
   \   0000C9   39           ADDC    A,R1
   \   0000CA   F583         MOV     DPH,A
   \   0000CC   EA           MOV     A,R2
   \   0000CD   F0           MOVX    @DPTR,A
   \   0000CE   A3           INC     DPTR
   \   0000CF   EB           MOV     A,R3
   \   0000D0   F0           MOVX    @DPTR,A
    535                pBuf += 2;
   \   0000D1   EE           MOV     A,R6
   \   0000D2   2402         ADD     A,#0x2
   \   0000D4   FE           MOV     R6,A
   \   0000D5   5001         JNC     ??MT_AfDataRequestSrcRtg_6
   \   0000D7   0F           INC     R7
    536              }
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   0000D8   0C           INC     R4
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   0000D9   EC           MOV     A,R4
   \   0000DA   C3           CLR     C
   \   0000DB   95..         SUBB    A,?V9
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   40D1         JC      ??MT_AfDataRequestSrcRtg_5
    537          
    538              /* Data payload Length */
    539              dataLen = *pBuf++;
   \   0000E4   F5..         MOV     ?V10,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   AE82         MOV     R6,DPL
   \   0000E9   AF83         MOV     R7,DPH
    540          
    541              if ( epDesc == NULL )
   \   0000EB   E5..         MOV     A,?V2
   \   0000ED   45..         ORL     A,?V3
   \   0000EF   700A         JNZ     ??MT_AfDataRequestSrcRtg_7
    542              {
    543                retValue = afStatus_INVALID_PARAMETER;
   \   0000F1   85..82       MOV     DPL,?XSP + 0
   \   0000F4   85..83       MOV     DPH,?XSP + 1
   \   0000F7   7402         MOV     A,#0x2
   \   0000F9   804D         SJMP    ??MT_AfDataRequestSrcRtg_8
    544              }
    545              else
    546              {
    547                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    548                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   0000FB                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   0000FB   78..         MOV     R0,#?V0
   \   0000FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000100   78..         MOV     R0,#?V9
   \   000102   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000105   78..         MOV     R0,#?V8
   \   000107   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010A   7405         MOV     A,#0x5
   \   00010C   12....       LCALL   ?XSTACK_DISP100_8
   \   00010F   88..         MOV     ?V8,R0
   \   000111   89..         MOV     ?V9,R1
   \   000113   78..         MOV     R0,#?V8
   \   000115   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000118   8E..         MOV     ?V8,R6
   \   00011A   8F..         MOV     ?V9,R7
   \   00011C   78..         MOV     R0,#?V8
   \   00011E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000121   75..00       MOV     ?V11,#0x0
   \   000124   78..         MOV     R0,#?V10
   \   000126   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000129   78..         MOV     R0,#?V4
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012E   A9..         MOV     R1,?V7
   \   000130   AC..         MOV     R4,?V2
   \   000132   AD..         MOV     R5,?V3
   \   000134   740E         MOV     A,#0xe
   \   000136   12....       LCALL   ?XSTACK_DISP101_8
   \   000139   12....       LCALL   ??AF_DataRequestSrcRtg?relay; Banked call to: AF_DataRequestSrcRtg
   \   00013C   740C         MOV     A,#0xc
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000141   E9           MOV     A,R1
   \   000142   85..82       MOV     DPL,?XSP + 0
   \   000145   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   000148   F0           MOVX    @DPTR,A
    549              }
    550          
    551              /* Free the memory allocated */
    552              osal_mem_free( pRelayList );
   \   000149                ; Setup parameters for call to function osal_mem_free
   \   000149   AA..         MOV     R2,?V0
   \   00014B   AB..         MOV     R3,?V1
   \   00014D   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000150   8009         SJMP    ??MT_AfDataRequestSrcRtg_9
    553            }
    554            else
    555            {
    556              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   000152   85..82       MOV     DPL,?XSP + 0
   \   000155   85..83       MOV     DPH,?XSP + 1
   \   000158   7410         MOV     A,#0x10
   \   00015A   F0           MOVX    @DPTR,A
    557            }
    558          
    559          
    560            /* Build and send back the response */
    561            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   00015B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00015B   AC..         MOV     R4,?XSP + 0
   \   00015D   AD..         MOV     R5,?XSP + 1
   \   00015F   7B01         MOV     R3,#0x1
   \   000161   AA..         MOV     R2,?V6
   \   000163   7964         MOV     R1,#0x64
   \   000165   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    562          }
   \   000168   740E         MOV     A,#0xe
   \   00016A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016D   7F0C         MOV     R7,#0xc
   \   00016F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   E4           CLR     A
   \   000006   C8           XCH     A,R0
   \   000007   F9           MOV     R1,A
   \   000008   EA           MOV     A,R2
   \   000009   28           ADD     A,R0
   \   00000A   F5..         MOV     ?V4,A
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   F5..         MOV     ?V5,A
   \   000010   22           RET
    563          #endif
    564          
    565          #if defined INTER_PAN
    566          /***************************************************************************************************
    567           * @fn      MT_AfInterPanCtl
    568           *
    569           * @brief   Process the AF Inter Pan control command.
    570           *
    571           * @param   pBuf - pointer to the received buffer
    572           *
    573           * @return  none
    574           ***************************************************************************************************/
    575          static void MT_AfInterPanCtl(uint8 *pBuf)
    576          {
    577            uint8 cmd, rtrn;
    578            uint16 panId;
    579            endPointDesc_t *pEP;
    580          
    581            cmd = pBuf[MT_RPC_POS_CMD1];
    582            pBuf += MT_RPC_FRAME_HDR_SZ;
    583          
    584            switch (*pBuf++)  // Inter-pan request parameter.
    585            {
    586            case InterPanClr:
    587              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    588              break;
    589          
    590            case InterPanSet:
    591              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    592              break;
    593          
    594            case InterPanReg:
    595              if ((pEP = afFindEndPointDesc(*pBuf)))
    596              {
    597                StubAPS_RegisterApp(pEP);
    598                rtrn = SUCCESS;
    599              }
    600              else
    601              {
    602                rtrn = FAILURE;
    603              }
    604              break;
    605          
    606            case InterPanChk:
    607              panId = BUILD_UINT16(pBuf[0], pBuf[1]);
    608              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    609              break;
    610          
    611            default:
    612              rtrn = afStatus_INVALID_PARAMETER;
    613              break;
    614            }
    615          
    616            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    617          }
    618          #endif
    619          
    620          /***************************************************************************************************
    621           * @fn      MT_AfDataConfirm
    622           *
    623           * @brief   Process
    624           *
    625           * @param   pBuf - pointer to the received buffer
    626           *
    627           * @return  none
    628           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    629          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    630          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    631            uint8 retArray[3];
    632          
    633            retArray[0] = pMsg->hdr.status;
   \   000009   12....       LCALL   ?Subroutine6 & 0xFFFF
    634            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_5:
   \   00000C   C0E0         PUSH    A
   \   00000E   7401         MOV     A,#0x1
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   D0E0         POP     A
   \   000015   12....       LCALL   ?Subroutine29 & 0xFFFF
    635            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_50:
   \   000018   C0E0         PUSH    A
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   D0E0         POP     A
   \   000021   12....       LCALL   ?Subroutine30 & 0xFFFF
    636          
    637            /* Build and send back the response */
    638            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \                     ??CrossCallReturnLabel_53:
   \   000024   7B03         MOV     R3,#0x3
   \   000026   7A80         MOV     R2,#-0x80
   \   000028   7944         MOV     R1,#0x44
   \   00002A   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    639          }
   \   00002D   7403         MOV     A,#0x3
   \   00002F                REQUIRE ?Subroutine1
   \   00002F                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   D083         POP     DPH
   \   000005   D082         POP     DPL
   \   000007   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   85..82       MOV     DPL,?XSP + 0
   \   000009   85..83       MOV     DPH,?XSP + 1
   \   00000C   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00000F   22           RET
    640          
    641          /***************************************************************************************************
    642           * @fn      MT_AfReflectError
    643           *
    644           * @brief   Process
    645           *
    646           * @param   pBuf - pointer to the received buffer
    647           *
    648           * @return  none
    649           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          void MT_AfReflectError(afReflectError_t *pMsg)
   \                     MT_AfReflectError:
    651          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 6
   \   000004   74FA         MOV     A,#-0x6
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    652            uint8 retArray[6];
    653          
    654            retArray[0] = pMsg->hdr.status;
   \   000009   12....       LCALL   ?Subroutine6 & 0xFFFF
    655            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_6:
   \   00000C   C0E0         PUSH    A
   \   00000E   7401         MOV     A,#0x1
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   D0E0         POP     A
   \   000015   12....       LCALL   ?Subroutine29 & 0xFFFF
    656            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_51:
   \   000018   C0E0         PUSH    A
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   D0E0         POP     A
   \   000021   12....       LCALL   ?Subroutine39 & 0xFFFF
    657            retArray[3] = pMsg->dstAddrMode;
   \                     ??CrossCallReturnLabel_78:
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C0E0         PUSH    A
   \   000028   7403         MOV     A,#0x3
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   D0E0         POP     A
   \   00002F   F0           MOVX    @DPTR,A
    658            retArray[4] = LO_UINT16( pMsg->dstAddr );
   \   000030   EA           MOV     A,R2
   \   000031   2405         ADD     A,#0x5
   \   000033   F8           MOV     R0,A
   \   000034   E4           CLR     A
   \   000035   3B           ADDC    A,R3
   \   000036   F9           MOV     R1,A
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   C0E0         PUSH    A
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   D0E0         POP     A
   \   000045   12....       LCALL   ?Subroutine28 & 0xFFFF
    659            retArray[5] = HI_UINT16( pMsg->dstAddr );
   \                     ??CrossCallReturnLabel_48:
   \   000048   E0           MOVX    A,@DPTR
   \   000049   C0E0         PUSH    A
   \   00004B   7405         MOV     A,#0x5
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   D0E0         POP     A
   \   000052   12....       LCALL   ?Subroutine30 & 0xFFFF
    660          
    661            /* Build and send back the response */
    662            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_REFLECT_ERROR, 6, retArray);
   \                     ??CrossCallReturnLabel_54:
   \   000055   7B06         MOV     R3,#0x6
   \   000057   7A83         MOV     R2,#-0x7d
   \   000059   7944         MOV     R1,#0x44
   \   00005B   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    663          }
   \   00005E   7406         MOV     A,#0x6
   \   000060   80..         SJMP    ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET
    664          
    665          /***************************************************************************************************
    666           * @fn          MT_AfIncomingMsg
    667           *
    668           * @brief       Process the callback subscription for AF Incoming data.
    669           *
    670           * @param       pkt - Incoming AF data.
    671           *
    672           * @return      none
    673           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    674          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    675          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V8,R2
   \   000007   8B..         MOV     ?V9,R3
    676            #define MT_AF_INC_MSG_LEN  20
    677            #define MT_AF_INC_MSG_EXT  10
    678          
    679            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   000009   EA           MOV     A,R2
   \   00000A   2420         ADD     A,#0x20
   \   00000C   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00000F   12....       LCALL   ?Subroutine15 & 0xFFFF
    680            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \                     ??CrossCallReturnLabel_22:
   \   000012   E5..         MOV     A,?V2
   \   000014   2414         ADD     A,#0x14
   \   000016   F5..         MOV     ?V0,A
   \   000018   E4           CLR     A
   \   000019   35..         ADDC    A,?V3
   \   00001B   F5..         MOV     ?V1,A
    681            uint8 cmd = MT_AF_INCOMING_MSG;
   \   00001D   75..81       MOV     ?V14,#-0x7f
    682            uint8 *pRsp, *pTmp;
    683            mtAfInMsgList_t *pItem = NULL;
   \   000020   75..00       MOV     ?V10,#0x0
   \   000023   75..00       MOV     ?V11,#0x0
    684          
    685          #if defined INTER_PAN
    686            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    687            {
    688              cmd = MT_AF_INCOMING_MSG_EXT;
    689            }
    690            else
    691          #endif
    692            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    693                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \   000026   EA           MOV     A,R2
   \   000027   240E         ADD     A,#0xe
   \   000029   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6403         XRL     A,#0x3
   \   00002F   600B         JZ      ??MT_AfIncomingMsg_0
   \   000031   C3           CLR     C
   \   000032   E5..         MOV     A,?V0
   \   000034   94F1         SUBB    A,#-0xf
   \   000036   E5..         MOV     A,?V1
   \   000038   9400         SUBB    A,#0x0
   \   00003A   400E         JC      ??MT_AfIncomingMsg_1
    694            {
    695              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   00003C   75..82       MOV     ?V14,#-0x7e
    696            }
    697          
    698            if (cmd == MT_AF_INCOMING_MSG_EXT)
    699            {
    700              respLen += MT_AF_INC_MSG_EXT;
   \   00003F   E5..         MOV     A,?V0
   \   000041   240A         ADD     A,#0xa
   \   000043   F5..         MOV     ?V0,A
   \   000045   E4           CLR     A
   \   000046   35..         ADDC    A,?V1
   \   000048   F5..         MOV     ?V1,A
    701            }
    702          
    703            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_1:
   \   00004A   C3           CLR     C
   \   00004B   E5..         MOV     A,?V0
   \   00004D   94FB         SUBB    A,#-0x5
   \   00004F   E5..         MOV     A,?V1
   \   000051   9400         SUBB    A,#0x0
   \   000053   4036         JC      ??MT_AfIncomingMsg_2
    704            {
    705              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   000055                ; Setup parameters for call to function osal_mem_alloc
   \   000055   E5..         MOV     A,?V2
   \   000057   2409         ADD     A,#0x9
   \   000059   FA           MOV     R2,A
   \   00005A   E4           CLR     A
   \   00005B   35..         ADDC    A,?V3
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000061   8A..         MOV     ?V10,R2
   \   000063   8B..         MOV     ?V11,R3
   \   000065   EA           MOV     A,R2
   \   000066   45..         ORL     A,?V11
   \   000068   7003         JNZ     $+5
   \   00006A   02....       LJMP    ??MT_AfIncomingMsg_3 & 0xFFFF
    706              {
    707                return;  // If cannot hold a huge message, cannot give indication at all.
    708              }
    709          
    710              pItem->data = (uint8 *)(pItem+1);
   \   00006D   EA           MOV     A,R2
   \   00006E   2409         ADD     A,#0x9
   \   000070   F8           MOV     R0,A
   \   000071   E4           CLR     A
   \   000072   35..         ADDC    A,?V11
   \   000074   F9           MOV     R1,A
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   12....       LCALL   ?Subroutine27 & 0xFFFF
    711              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \                     ??CrossCallReturnLabel_44:
   \   00007E   C3           CLR     C
   \   00007F   E5..         MOV     A,?V0
   \   000081   95..         SUBB    A,?V2
   \   000083   F5..         MOV     ?V0,A
   \   000085   E5..         MOV     A,?V1
   \   000087   95..         SUBB    A,?V3
   \   000089   F5..         MOV     ?V1,A
    712            }
    713          
    714            // Attempt to allocate memory for the response packet.
    715            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_2:
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   AA..         MOV     R2,?V0
   \   00008D   AB..         MOV     R3,?V1
   \   00008F   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000092   8A..         MOV     ?V12,R2
   \   000094   8B..         MOV     ?V13,R3
   \   000096   EA           MOV     A,R2
   \   000097   45..         ORL     A,?V13
   \   000099   7010         JNZ     ??MT_AfIncomingMsg_4
    716            {
    717              if (pItem != NULL)
   \   00009B   E5..         MOV     A,?V10
   \   00009D   45..         ORL     A,?V11
   \   00009F   6007         JZ      ??MT_AfIncomingMsg_5
    718              {
    719                (void)osal_mem_free(pItem);
   \   0000A1                ; Setup parameters for call to function osal_mem_free
   \   0000A1   AA..         MOV     R2,?V10
   \   0000A3   AB..         MOV     R3,?V11
   \   0000A5   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    720              }
    721              return;
   \                     ??MT_AfIncomingMsg_5:
   \   0000A8   02....       LJMP    ??MT_AfIncomingMsg_3 & 0xFFFF
    722            }
    723            pTmp = pRsp;
   \                     ??MT_AfIncomingMsg_4:
   \   0000AB   AE..         MOV     R6,?V12
   \   0000AD   AF..         MOV     R7,?V13
    724          
    725            /* Group ID */
    726            *pTmp++ = LO_UINT16(pMsg->groupId);
   \   0000AF   E5..         MOV     A,?V8
   \   0000B1   2402         ADD     A,#0x2
   \   0000B3   12....       LCALL   ?Subroutine2 & 0xFFFF
    727            *pTmp++ = HI_UINT16(pMsg->groupId);
    728          
    729            /* Cluster ID */
    730            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_113:
   \   0000B6   2404         ADD     A,#0x4
   \   0000B8   12....       LCALL   ?Subroutine7 & 0xFFFF
    731            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_7:
   \   0000BB   A3           INC     DPTR
   \   0000BC   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000BF   AF83         MOV     R7,DPH
    732          
    733            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0000C1   7482         MOV     A,#-0x7e
   \   0000C3   65..         XRL     A,?V14
   \   0000C5   7058         JNZ     ??MT_AfIncomingMsg_6
    734            {
    735              *pTmp++ = pMsg->srcAddr.addrMode;
   \   0000C7   E5..         MOV     A,?V8
   \   0000C9   240E         ADD     A,#0xe
   \   0000CB   12....       LCALL   ?Subroutine7 & 0xFFFF
    736          
    737              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \                     ??CrossCallReturnLabel_8:
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   6403         XRL     A,#0x3
   \   0000D1   7025         JNZ     ??MT_AfIncomingMsg_7
    738              {
    739                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   0000D3                ; Setup parameters for call to function osal_memcpy
   \   0000D3   E5..         MOV     A,?V8
   \   0000D5   2406         ADD     A,#0x6
   \   0000D7   F5..         MOV     ?V4,A
   \   0000D9   E4           CLR     A
   \   0000DA   35..         ADDC    A,?V9
   \   0000DC   F5..         MOV     ?V5,A
   \   0000DE   75..00       MOV     ?V6,#0x0
   \   0000E1   78..         MOV     R0,#?V4
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E6   7C08         MOV     R4,#0x8
   \   0000E8   7D00         MOV     R5,#0x0
   \   0000EA   EE           MOV     A,R6
   \   0000EB   FA           MOV     R2,A
   \   0000EC   EF           MOV     A,R7
   \   0000ED   FB           MOV     R3,A
   \   0000EE   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000F1   7403         MOV     A,#0x3
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F6   8012         SJMP    ??MT_AfIncomingMsg_8
    740              }
    741              else
    742              {
    743                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_7:
   \   0000F8   12....       LCALL   ?Subroutine33 & 0xFFFF
    744                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
    745              }
   \                     ??CrossCallReturnLabel_61:
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   8E82         MOV     DPL,R6
   \   0000FE   8F83         MOV     DPH,R7
   \   000100   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000103   E0           MOVX    A,@DPTR
   \   000104   8E82         MOV     DPL,R6
   \   000106   8F83         MOV     DPH,R7
   \   000108   A3           INC     DPTR
   \   000109   F0           MOVX    @DPTR,A
    746              pTmp += Z_EXTADDR_LEN;
   \                     ??MT_AfIncomingMsg_8:
   \   00010A   EE           MOV     A,R6
   \   00010B   2408         ADD     A,#0x8
   \   00010D   FE           MOV     R6,A
   \   00010E   5001         JNC     ??MT_AfIncomingMsg_9
   \   000110   0F           INC     R7
    747          
    748              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??MT_AfIncomingMsg_9:
   \   000111   E5..         MOV     A,?V8
   \   000113   12....       LCALL   ?Subroutine23 & 0xFFFF
    749          #if defined INTER_PAN
    750              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    751              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    752          #else
    753              *pTmp++ = 0;
   \                     ??CrossCallReturnLabel_104:
   \   000116   E4           CLR     A
   \   000117   F0           MOVX    @DPTR,A
   \   000118   A3           INC     DPTR
    754              *pTmp++ = 0;
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   A3           INC     DPTR
   \   00011B   0E           INC     R6
   \   00011C   0E           INC     R6
   \   00011D   800C         SJMP    ??CrossCallReturnLabel_105
    755          #endif
    756            }
    757            else
    758            {
    759              /* Source Address */
    760              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_6:
   \   00011F   12....       LCALL   ?Subroutine33 & 0xFFFF
    761              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
    762          
    763              /* Source EP */
    764              *pTmp++ = pMsg->srcAddr.endPoint;
    765            }
   \                     ??CrossCallReturnLabel_62:
   \   000122   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000125   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000128   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00012B   0E           INC     R6
   \   00012C   AF83         MOV     R7,DPH
    766          
    767            /* Destination EP */
    768            *pTmp++ = pMsg->endPoint;
   \   00012E   E5..         MOV     A,?V8
   \   000130   2414         ADD     A,#0x14
   \   000132   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000135   AE82         MOV     R6,DPL
   \   000137   AF83         MOV     R7,DPH
    769          
    770            /* WasBroadCast */
    771            *pTmp++ = pMsg->wasBroadcast;
   \   000139   E5..         MOV     A,?V8
   \   00013B   2415         ADD     A,#0x15
   \   00013D   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000140   12....       LCALL   ??Subroutine52_0 & 0xFFFF
    772          
    773            /* LinkQuality */
    774            *pTmp++ = pMsg->LinkQuality;
   \                     ??CrossCallReturnLabel_116:
   \   000143   2416         ADD     A,#0x16
   \   000145   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000148   12....       LCALL   ??Subroutine52_0 & 0xFFFF
    775          
    776            /* SecurityUse */
    777            *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_117:
   \   00014B   2419         ADD     A,#0x19
   \   00014D   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000150   12....       LCALL   ??Subroutine52_0 & 0xFFFF
    778          
    779            /* Timestamp */
    780            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 0);
   \                     ??CrossCallReturnLabel_118:
   \   000153   241A         ADD     A,#0x1a
   \   000155   FA           MOV     R2,A
   \   000156   E4           CLR     A
   \   000157   35..         ADDC    A,?V9
   \   000159   FB           MOV     R3,A
   \   00015A   8A82         MOV     DPL,R2
   \   00015C   8B83         MOV     DPH,R3
   \   00015E   78..         MOV     R0,#?V4
   \   000160   12....       LCALL   ?L_MOV_X
   \   000163   12....       LCALL   ?Subroutine25 & 0xFFFF
    781            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 1);
   \                     ??CrossCallReturnLabel_99:
   \   000166   12....       LCALL   ?L_MOV_X
   \   000169   E5..         MOV     A,?V5
   \   00016B   8E82         MOV     DPL,R6
   \   00016D   8F83         MOV     DPH,R7
   \   00016F   12....       LCALL   ??Subroutine48_0 & 0xFFFF
    782            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 2);
   \                     ??CrossCallReturnLabel_101:
   \   000172   12....       LCALL   ?L_MOV_X
   \   000175   7410         MOV     A,#0x10
   \   000177   78..         MOV     R0,#?V4
   \   000179   12....       LCALL   ?UL_SHR
   \   00017C   12....       LCALL   ?Subroutine25 & 0xFFFF
    783            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 3);
   \                     ??CrossCallReturnLabel_100:
   \   00017F   12....       LCALL   ?L_MOV_X
   \   000182   7418         MOV     A,#0x18
   \   000184   78..         MOV     R0,#?V4
   \   000186   12....       LCALL   ?UL_SHR
   \   000189   8E82         MOV     DPL,R6
   \   00018B   8F83         MOV     DPH,R7
   \   00018D   E5..         MOV     A,?V4
   \   00018F   F0           MOVX    @DPTR,A
   \   000190   A3           INC     DPTR
   \   000191   0E           INC     R6
   \   000192   AF83         MOV     R7,DPH
    784          
    785          
    786            /* Data Length */
    787            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   000194   7482         MOV     A,#-0x7e
   \   000196   65..         XRL     A,?V14
   \   000198   700E         JNZ     ??MT_AfIncomingMsg_10
    788            {
    789              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    790               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    791               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    792               */
    793              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   00019A   E4           CLR     A
   \   00019B   F0           MOVX    @DPTR,A
   \   00019C   A3           INC     DPTR
    794              *pTmp++ = LO_UINT16(dataLen);
   \   00019D   E5..         MOV     A,?V2
   \   00019F   F0           MOVX    @DPTR,A
   \   0001A0   A3           INC     DPTR
    795              *pTmp++ = HI_UINT16(dataLen);
   \   0001A1   E5..         MOV     A,?V3
   \   0001A3   F0           MOVX    @DPTR,A
   \   0001A4   A3           INC     DPTR
   \   0001A5   0E           INC     R6
   \   0001A6   800B         SJMP    ??MT_AfIncomingMsg_11
    796            }
    797            else
    798            {
    799              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_10:
   \   0001A8   E5..         MOV     A,?V8
   \   0001AA   241F         ADD     A,#0x1f
   \   0001AC   12....       LCALL   ??Subroutine49_0 & 0xFFFF
    800              *pTmp++ = dataLen;
   \                     ??CrossCallReturnLabel_103:
   \   0001AF   E5..         MOV     A,?V2
   \   0001B1   F0           MOVX    @DPTR,A
   \   0001B2   A3           INC     DPTR
   \                     ??MT_AfIncomingMsg_11:
   \   0001B3   0E           INC     R6
   \   0001B4   0E           INC     R6
   \   0001B5   AF83         MOV     R7,DPH
    801            }
    802          
    803            /* Data */
    804            if (pItem != NULL)
   \   0001B7   E5..         MOV     A,?V10
   \   0001B9   45..         ORL     A,?V11
   \   0001BB   7003         JNZ     $+5
   \   0001BD   02....       LJMP    ??MT_AfIncomingMsg_12 & 0xFFFF
    805            {
    806              // Enqueue the new huge incoming item.
    807              pItem->next = pMtAfInMsgList;
   \   0001C0   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0001C3   85..82       MOV     DPL,?V10
   \   0001C6   85..83       MOV     DPH,?V11
   \   0001C9   12....       LCALL   ?Subroutine27 & 0xFFFF
    808              pMtAfInMsgList = pItem;
   \                     ??CrossCallReturnLabel_45:
   \   0001CC   90....       MOV     DPTR,#pMtAfInMsgList
   \   0001CF   E5..         MOV     A,?V10
   \   0001D1   F0           MOVX    @DPTR,A
   \   0001D2   A3           INC     DPTR
   \   0001D3   E5..         MOV     A,?V11
   \   0001D5   F0           MOVX    @DPTR,A
    809          
    810              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    811              pItem->tick = MT_AF_EXEC_CNT;
   \   0001D6   85..82       MOV     DPL,?V10
   \   0001D9   F583         MOV     DPH,A
   \   0001DB   A3           INC     DPTR
   \   0001DC   A3           INC     DPTR
   \   0001DD   A3           INC     DPTR
   \   0001DE   A3           INC     DPTR
   \   0001DF   A3           INC     DPTR
   \   0001E0   A3           INC     DPTR
   \   0001E1   A3           INC     DPTR
   \   0001E2   A3           INC     DPTR
   \   0001E3   740F         MOV     A,#0xf
   \   0001E5   F0           MOVX    @DPTR,A
    812              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   0001E6                ; Setup parameters for call to function osal_start_timerEx
   \   0001E6   90....       MOV     DPTR,#__Constant_3e8
   \   0001E9   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001EC   7A08         MOV     R2,#0x8
   \   0001EE   7B00         MOV     R3,#0x0
   \   0001F0   90....       MOV     DPTR,#MT_TaskID
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   F9           MOV     R1,A
   \   0001F5   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0001F8   7404         MOV     A,#0x4
   \   0001FA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FD   E9           MOV     A,R1
   \   0001FE   600C         JZ      ??MT_AfIncomingMsg_13
    813              {
    814                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000200                ; Setup parameters for call to function osal_set_event
   \   000200   7A08         MOV     R2,#0x8
   \   000202   7B00         MOV     R3,#0x0
   \   000204   90....       MOV     DPTR,#MT_TaskID
   \   000207   E0           MOVX    A,@DPTR
   \   000208   F9           MOV     R1,A
   \   000209   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
    815              }
    816          
    817              pItem->timestamp = pMsg->timestamp;
   \                     ??MT_AfIncomingMsg_13:
   \   00020C   E5..         MOV     A,?V8
   \   00020E   241A         ADD     A,#0x1a
   \   000210   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000213   12....       LCALL   ?XLOAD_R0123
   \   000216   85..82       MOV     DPL,?V10
   \   000219   85..83       MOV     DPH,?V11
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   12....       LCALL   ?XSTORE_R0123
    818              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   000223                ; Setup parameters for call to function osal_memcpy
   \   000223   12....       LCALL   ?Subroutine19 & 0xFFFF
    819            }
   \                     ??CrossCallReturnLabel_29:
   \   000226   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000229   AC..         MOV     R4,?V2
   \   00022B   AD..         MOV     R5,?V3
   \   00022D   85..82       MOV     DPL,?V10
   \   000230   85..83       MOV     DPH,?V11
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000238   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00023B   7403         MOV     A,#0x3
   \   00023D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000240   801E         SJMP    ??MT_AfIncomingMsg_14
    820            else
    821            {
    822              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_12:
   \   000242                ; Setup parameters for call to function osal_memcpy
   \   000242   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000245   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000248   AC..         MOV     R4,?V2
   \   00024A   AD..         MOV     R5,?V3
   \   00024C   EE           MOV     A,R6
   \   00024D   FA           MOV     R2,A
   \   00024E   EF           MOV     A,R7
   \   00024F   FB           MOV     R3,A
   \   000250   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000253   7403         MOV     A,#0x3
   \   000255   12....       LCALL   ?DEALLOC_XSTACK8
    823              pTmp += dataLen;
   \   000258   EE           MOV     A,R6
   \   000259   25..         ADD     A,?V2
   \   00025B   FE           MOV     R6,A
   \   00025C   EF           MOV     A,R7
   \   00025D   35..         ADDC    A,?V3
   \   00025F   FF           MOV     R7,A
    824            }
    825          
    826            // MAC Source address
    827            *pTmp++ = LO_UINT16(pMsg->macSrcAddr);
   \                     ??MT_AfIncomingMsg_14:
   \   000260   E5..         MOV     A,?V8
   \   000262   2424         ADD     A,#0x24
   \   000264   12....       LCALL   ?Subroutine2 & 0xFFFF
    828            *pTmp++ = HI_UINT16(pMsg->macSrcAddr);
    829          
    830            // messages result radius
    831            *pTmp = pMsg->radius;
   \                     ??CrossCallReturnLabel_114:
   \   000267   2426         ADD     A,#0x26
   \   000269   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00026C   12....       LCALL   ?Subroutine43 & 0xFFFF
    832          
    833            /* Build and send back the response */
    834            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \                     ??CrossCallReturnLabel_121:
   \   00026F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00026F   AC..         MOV     R4,?V12
   \   000271   AD..         MOV     R5,?V13
   \   000273   AB..         MOV     R3,?V0
   \   000275   AA..         MOV     R2,?V14
   \   000277   7944         MOV     R1,#0x44
   \   000279   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    835          
    836            (void)osal_mem_free(pRsp);
   \   00027C                ; Setup parameters for call to function osal_mem_free
   \   00027C   AA..         MOV     R2,?V12
   \   00027E   AB..         MOV     R3,?V13
   \   000280   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    837          }
   \                     ??MT_AfIncomingMsg_3:
   \   000283   7F0F         MOV     R7,#0xf
   \   000285   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V9
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E5..         MOV     A,?V8
   \   000002   2406         ADD     A,#0x6
   \   000004   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   35..         ADDC    A,?V9
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E5..         MOV     A,?V4
   \   000006                REQUIRE ??Subroutine48_0
   \   000006                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   0E           INC     R6
   \   000003   AF83         MOV     R7,DPH
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   78..         MOV     R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   240F         ADD     A,#0xf
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V9
   \   000005   F583         MOV     DPH,A
   \   000007   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   0E           INC     R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E5..         MOV     A,?V8
   \   000002   2422         ADD     A,#0x22
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V9
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V4,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V5,A
   \   000012   78..         MOV     R0,#?V4
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000006   AE82         MOV     R6,DPL
   \   000008                REQUIRE ??Subroutine51_0
   \   000008                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   AF83         MOV     R7,DPH
   \   000002   8882         MOV     DPL,R0
   \   000004   8983         MOV     DPH,R1
   \   000006   A3           INC     DPTR
   \   000007                REQUIRE ??Subroutine52_0
   \   000007                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   E5..         MOV     A,?V8
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   A3           INC     DPTR
   \   000004   0E           INC     R6
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V3,A
   \   000007   22           RET
    838          
    839          /**************************************************************************************************
    840           * @fn          MT_AfDataRetrieve
    841           *
    842           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    843           *          incoming AF message.
    844           *
    845           * input parameters
    846           *
    847           * @param pBuf - pointer to the received buffer
    848           *
    849           * output parameters
    850           *
    851           * @param rtrn - AF-Status of the operation.
    852           *
    853           * @return      None.
    854           **************************************************************************************************
    855           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    856          void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    857          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
    858            #define MT_AF_RTV_HDR_SZ  2
    859          
    860            uint32 timestamp;
    861            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   000009   90....       MOV     DPTR,#pMtAfInMsgList
   \   00000C   12....       LCALL   ?Subroutine15 & 0xFFFF
    862            uint8 rtrn = afStatus_FAILED;
   \                     ??CrossCallReturnLabel_23:
   \   00000F   7A01         MOV     R2,#0x1
    863            uint8 len = 0;
   \   000011   75..00       MOV     ?V12,#0x0
    864          
    865            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000014   E5..         MOV     A,?V0
   \   000016   2403         ADD     A,#0x3
   \   000018   F5..         MOV     ?V0,A
   \   00001A   5002         JNC     ??MT_AfDataRetrieve_0
   \   00001C   05..         INC     ?V1
    866            timestamp = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \                     ??MT_AfDataRetrieve_0:
   \   00001E   F582         MOV     DPL,A
   \   000020   85..83       MOV     DPH,?V1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V4,A
   \   000026   E4           CLR     A
   \   000027   F5..         MOV     ?V5,A
   \   000029   F5..         MOV     ?V6,A
   \   00002B   F5..         MOV     ?V7,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V8,A
   \   000031   E4           CLR     A
   \   000032   F5..         MOV     ?V9,A
   \   000034   F5..         MOV     ?V10,A
   \   000036   F5..         MOV     ?V11,A
   \   000038   7408         MOV     A,#0x8
   \   00003A   78..         MOV     R0,#?V8
   \   00003C   12....       LCALL   ?L_SHL
   \   00003F   78..         MOV     R0,#?V4
   \   000041   79..         MOV     R1,#?V8
   \   000043   12....       LCALL   ?L_ADD
   \   000046   85..82       MOV     DPL,?V0
   \   000049   85..83       MOV     DPH,?V1
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V8,A
   \   000051   E4           CLR     A
   \   000052   F5..         MOV     ?V9,A
   \   000054   7410         MOV     A,#0x10
   \   000056   78..         MOV     R0,#?V8
   \   000058   12....       LCALL   ?L_SHL
   \   00005B   78..         MOV     R0,#?V4
   \   00005D   79..         MOV     R1,#?V8
   \   00005F   12....       LCALL   ?L_ADD
   \   000062   85..82       MOV     DPL,?V0
   \   000065   85..83       MOV     DPH,?V1
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F5..         MOV     ?V8,A
   \   00006E   E4           CLR     A
   \   00006F   F5..         MOV     ?V10,A
   \   000071   7418         MOV     A,#0x18
   \   000073   78..         MOV     R0,#?V8
   \   000075   12....       LCALL   ?L_SHL
   \   000078   78..         MOV     R0,#?V4
   \   00007A   79..         MOV     R1,#?V8
   \   00007C   12....       LCALL   ?L_ADD
   \   00007F   8007         SJMP    ??CrossCallReturnLabel_24
    867          
    868            while (pItem != NULL)
    869            {
    870              pPrev = pItem;
    871              if (pItem->timestamp == timestamp)
    872              {
    873                break;
    874              }
    875              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_1:
   \   000081   8C82         MOV     DPL,R4
   \   000083   8D83         MOV     DPH,R5
   \   000085   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000088   E5..         MOV     A,?V2
   \   00008A   45..         ORL     A,?V3
   \   00008C   6059         JZ      ??MT_AfDataRetrieve_2
   \   00008E   AC..         MOV     R4,?V2
   \   000090   AD..         MOV     R5,?V3
   \   000092   8C82         MOV     DPL,R4
   \   000094   8D83         MOV     DPH,R5
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   78..         MOV     R0,#?V4
   \   00009C   12....       LCALL   ?L_EQ_X
   \   00009F   70E0         JNZ     ??MT_AfDataRetrieve_1
    876            }
    877          
    878            if (pItem != NULL)
    879            {
    880              uint16 idx;
    881              uint8 *pRsp;
    882          
    883              pBuf += 4;
   \   0000A1   E5..         MOV     A,?V0
   \   0000A3   2404         ADD     A,#0x4
   \   0000A5   F5..         MOV     ?V0,A
   \   0000A7   5002         JNC     ??MT_AfDataRetrieve_3
   \   0000A9   05..         INC     ?V1
    884              idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRetrieve_3:
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   85..83       MOV     DPH,?V1
   \   0000B0   12....       LCALL   ?Subroutine4 & 0xFFFF
    885              len = pBuf[2];
   \                     ??CrossCallReturnLabel_1:
   \   0000B3   85..82       MOV     DPL,?V0
   \   0000B6   85..83       MOV     DPH,?V1
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F5..         MOV     ?V12,A
    886          
    887              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   0000BE   7045         JNZ     ??MT_AfDataRetrieve_4
    888              {
    889                if (pMtAfInMsgList == pItem)
   \   0000C0   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000C3   EC           MOV     A,R4
   \   0000C4   68           XRL     A,R0
   \   0000C5   7002         JNZ     ??MT_AfDataRetrieve_5
   \   0000C7   ED           MOV     A,R5
   \   0000C8   69           XRL     A,R1
   \                     ??MT_AfDataRetrieve_5:
   \   0000C9   8C82         MOV     DPL,R4
   \   0000CB   8D83         MOV     DPH,R5
   \   0000CD   7005         JNZ     ??MT_AfDataRetrieve_6
    890                {
    891                  pMtAfInMsgList = pItem->next;
   \   0000CF   12....       LCALL   ?Subroutine20 & 0xFFFF
    892                }
   \                     ??CrossCallReturnLabel_32:
   \   0000D2   8007         SJMP    ??MT_AfDataRetrieve_7
    893                else
    894                {
    895                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_6:
   \   0000D4   12....       LCALL   ??Subroutine53_0 & 0xFFFF
    896                }
   \                     ??CrossCallReturnLabel_125:
   \   0000D7   8C82         MOV     DPL,R4
   \   0000D9   8D83         MOV     DPH,R5
   \                     ??MT_AfDataRetrieve_7:
   \   0000DB   12....       LCALL   ?Subroutine27 & 0xFFFF
    897                (void)osal_mem_free(pItem);
   \                     ??CrossCallReturnLabel_46:
   \   0000DE                ; Setup parameters for call to function osal_mem_free
   \   0000DE   AA..         MOV     R2,?V2
   \   0000E0   AB..         MOV     R3,?V3
   \   0000E2   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    898                rtrn = afStatus_SUCCESS;
   \   0000E5   7A00         MOV     R2,#0x0
    899              }
    900              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    901              {
    902                rtrn = afStatus_MEM_FAIL;
    903                len = 0;
    904              }
    905              else
    906              {
    907                pRsp[0] = ZSuccess;
    908                pRsp[1] = len;
    909                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    910                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    911                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    912                (void)osal_mem_free(pRsp);
    913                return;
    914              }
    915            }
    916          
    917            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_2:
   \   0000E7   EA           MOV     A,R2
   \   0000E8   85..82       MOV     DPL,?V0
   \   0000EB   85..83       MOV     DPH,?V1
   \   0000EE   F0           MOVX    @DPTR,A
    918            pBuf[1] = len;
   \   0000EF   A3           INC     DPTR
   \   0000F0   E5..         MOV     A,?V12
   \   0000F2   F0           MOVX    @DPTR,A
    919            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    920                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   0000F3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000F3   AC..         MOV     R4,?V0
   \   0000F5   AD..         MOV     R5,?V1
   \   0000F7   7B02         MOV     R3,#0x2
   \   0000F9   7A12         MOV     R2,#0x12
   \   0000FB   7964         MOV     R1,#0x64
   \   0000FD   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    921          }
   \                     ??MT_AfDataRetrieve_8:
   \   000100   7F0D         MOV     R7,#0xd
   \   000102   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??MT_AfDataRetrieve_4:
   \   000105                ; Setup parameters for call to function osal_mem_alloc
   \   000105   2402         ADD     A,#0x2
   \   000107   FA           MOV     R2,A
   \   000108   E4           CLR     A
   \   000109   3400         ADDC    A,#0x0
   \   00010B   FB           MOV     R3,A
   \   00010C   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00010F   8A..         MOV     ?V6,R2
   \   000111   8B..         MOV     ?V7,R3
   \   000113   AE..         MOV     R6,?V6
   \   000115   AF..         MOV     R7,?V7
   \   000117   EE           MOV     A,R6
   \   000118   4F           ORL     A,R7
   \   000119   7007         JNZ     ??MT_AfDataRetrieve_9
   \   00011B   7A10         MOV     R2,#0x10
   \   00011D   75..00       MOV     ?V12,#0x0
   \   000120   80C5         SJMP    ??MT_AfDataRetrieve_2
   \                     ??MT_AfDataRetrieve_9:
   \   000122   8E82         MOV     DPL,R6
   \   000124   8F83         MOV     DPH,R7
   \   000126   E4           CLR     A
   \   000127   F0           MOVX    @DPTR,A
   \   000128   A3           INC     DPTR
   \   000129   E5..         MOV     A,?V12
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C                ; Setup parameters for call to function osal_memcpy
   \   00012C   85..82       MOV     DPL,?V2
   \   00012F   85..83       MOV     DPH,?V3
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   25..         ADD     A,?V4
   \   000137   F5..         MOV     ?V0,A
   \   000139   A3           INC     DPTR
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   35..         ADDC    A,?V5
   \   00013D   F5..         MOV     ?V1,A
   \   00013F   75..00       MOV     ?V2,#0x0
   \   000142   78..         MOV     R0,#?V0
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000147   AC..         MOV     R4,?V12
   \   000149   7D00         MOV     R5,#0x0
   \   00014B   EE           MOV     A,R6
   \   00014C   2402         ADD     A,#0x2
   \   00014E   FA           MOV     R2,A
   \   00014F   E4           CLR     A
   \   000150   3F           ADDC    A,R7
   \   000151   FB           MOV     R3,A
   \   000152   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000155   7403         MOV     A,#0x3
   \   000157   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00015A   EE           MOV     A,R6
   \   00015B   FC           MOV     R4,A
   \   00015C   EF           MOV     A,R7
   \   00015D   FD           MOV     R5,A
   \   00015E   7402         MOV     A,#0x2
   \   000160   25..         ADD     A,?V12
   \   000162   FB           MOV     R3,A
   \   000163   7A12         MOV     R2,#0x12
   \   000165   7964         MOV     R1,#0x64
   \   000167   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
   \   00016A                ; Setup parameters for call to function osal_mem_free
   \   00016A   EE           MOV     A,R6
   \   00016B   FA           MOV     R2,A
   \   00016C   EF           MOV     A,R7
   \   00016D   FB           MOV     R3,A
   \   00016E   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000171   808D         SJMP    ??MT_AfDataRetrieve_8
    922          
    923          /**************************************************************************************************
    924           * @fn          MT_AfDataStore
    925           *
    926           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    927           *          outgoing AF message.
    928           *
    929           * input parameters
    930           *
    931           * @param pBuf - pointer to the received buffer
    932           *
    933           * output parameters
    934           *
    935           * @param rtrn - AF-Status of the operation.
    936           *
    937           * @return      None.
    938           **************************************************************************************************
    939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    940          void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    941          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    942            uint16 idx;
    943            uint8 len, rtrn = afStatus_FAILED;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
    944          
    945            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   FA           MOV     R2,A
   \   000017   5001         JNC     ??MT_AfDataStore_0
   \   000019   0B           INC     R3
    946            idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataStore_0:
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FC           MOV     R4,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   E4           CLR     A
   \   000024   C8           XCH     A,R0
   \   000025   F9           MOV     R1,A
   \   000026   EC           MOV     A,R4
   \   000027   28           ADD     A,R0
   \   000028   FE           MOV     R6,A
   \   000029   E4           CLR     A
   \   00002A   39           ADDC    A,R1
   \   00002B   FF           MOV     R7,A
    947            len = pBuf[2];
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FC           MOV     R4,A
    948            pBuf += 3;
   \   000034   EA           MOV     A,R2
   \   000035   2403         ADD     A,#0x3
   \   000037   FA           MOV     R2,A
   \   000038   5001         JNC     ??MT_AfDataStore_1
   \   00003A   0B           INC     R3
    949          
    950            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   00003B   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00003E   700B         JNZ     ??MT_AfDataStore_2
    951            {
    952              rtrn = afStatus_MEM_FAIL;
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   7410         MOV     A,#0x10
   \   000048   02....       LJMP    ??MT_AfDataStore_3 & 0xFFFF
    953            }
    954            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   00004B   EC           MOV     A,R4
   \   00004C   705E         JNZ     ??MT_AfDataStore_4
    955            {
    956              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    957                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    958                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   00004E                ; Setup parameters for call to function AF_DataRequest
   \   00004E   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F5..         MOV     ?V0,A
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000059   90....       MOV     DPTR,#pMtAfDataReq
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   2414         ADD     A,#0x14
   \   00005F   F5..         MOV     ?V0,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   3400         ADDC    A,#0x0
   \   000065   F5..         MOV     ?V1,A
   \   000067   78..         MOV     R0,#?V0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00006F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000072   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000075   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000078   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00007B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00007E   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000086   E0           MOVX    A,@DPTR
   \   000087   FC           MOV     R4,A
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   FD           MOV     R5,A
   \   00008B   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00008E   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   000091   7409         MOV     A,#0x9
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   \   000096   E9           MOV     A,R1
   \   000097   85..82       MOV     DPL,?XSP + 0
   \   00009A   85..83       MOV     DPH,?XSP + 1
   \   00009D   F0           MOVX    @DPTR,A
    959              (void)osal_mem_free(pMtAfDataReq);
   \   00009E                ; Setup parameters for call to function osal_mem_free
   \   00009E   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0000A1   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    960              pMtAfDataReq = NULL;
   \   0000A4   90....       MOV     DPTR,#pMtAfDataReq
   \   0000A7   E4           CLR     A
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   8027         SJMP    ??MT_AfDataStore_3
    961            }
    962            else
    963            {
    964              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   0000AC                ; Setup parameters for call to function osal_memcpy
   \   0000AC   8A..         MOV     ?V0,R2
   \   0000AE   8B..         MOV     ?V1,R3
   \   0000B0   75..00       MOV     ?V2,#0x0
   \   0000B3   78..         MOV     R0,#?V0
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B8   7D00         MOV     R5,#0x0
   \   0000BA   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   2E           ADD     A,R6
   \   0000BF   FA           MOV     R2,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   3F           ADDC    A,R7
   \   0000C3   FB           MOV     R3,A
   \   0000C4   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000C7   7403         MOV     A,#0x3
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
    965              rtrn = afStatus_SUCCESS;
   \   0000CC   85..82       MOV     DPL,?XSP + 0
   \   0000CF   85..83       MOV     DPH,?XSP + 1
   \   0000D2   E4           CLR     A
    966            }
   \                     ??MT_AfDataStore_3:
   \   0000D3   12....       LCALL   ?Subroutine30 & 0xFFFF
    967          
    968            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    969                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \                     ??CrossCallReturnLabel_55:
   \   0000D6   7B01         MOV     R3,#0x1
   \   0000D8   7A11         MOV     R2,#0x11
   \   0000DA   7964         MOV     R1,#0x64
   \   0000DC   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    970          }
   \   0000DF   7401         MOV     A,#0x1
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E4   7F03         MOV     R7,#0x3
   \   0000E6   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfExec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfExec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfCommandProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfRegister?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDelete?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRequestSrcRtg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfReflectError?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfIncomingMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRetrieve?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRetrieve

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataStore?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataStore

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
    971          
    972          /**************************************************************************************************
    973           * @fn          MT_AfAPSF_ConfigSet
    974           *
    975           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    976           *
    977           * input parameters
    978           *
    979           * @param       pBuf - Pointer to the received buffer.
    980           *
    981           * output parameters
    982           *
    983           * None.
    984           *
    985           * @return      None.
    986           */
    987          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
    988          {
    989            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
    990            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
    991          
    992            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    993                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
    994          }
    995          
    996          /**************************************************************************************************
    997           * @fn          MT_AfAPSF_ConfigGet
    998           *
    999           * @brief       This function is the MT proxy for afAPSF_ConfigGet().
   1000           *
   1001           * input parameters
   1002           *
   1003           * @param       pBuf - Pointer to the received buffer.
   1004           *
   1005           * output parameters
   1006           *
   1007           * None.
   1008           *
   1009           * @return      None.
   1010           */
   1011          static void MT_AfAPSF_ConfigGet(uint8 *pBuf)
   1012          {
   1013            afAPSF_Config_t cfg = { 0, 0 };
   1014            uint8 buf[2];
   1015          
   1016            afAPSF_ConfigGet( pBuf[MT_RPC_POS_DAT0], &cfg );
   1017          
   1018            buf[0] = cfg.frameDelay;
   1019            buf[1] = cfg.windowSize;
   1020          
   1021            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
   1022                                                 MT_AF_APSF_CONFIG_GET, 3, buf );
   1023          }
   1024          
   1025          /***************************************************************************************************
   1026          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   MT_AfCommandProcessing
        0     14   -> MT_AfDataRequest
        0     14   -> MT_AfDataRequestSrcRtg
        0     14   -> MT_AfDataRetrieve
        0     14   -> MT_AfDataStore
        0     14   -> MT_AfDelete
        0     14   -> MT_AfRegister
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> afAPSF_ConfigGet
        0     14   -> afAPSF_ConfigSet
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     59   MT_AfDataRequest
        0     45   -> AF_DataRequest
        0     36   -> MT_BuildAndSendZToolResponse
        0     36   -> afFindEndPointDesc
        0     36   -> osal_mem_alloc
        0     39   -> osal_memcpy
        0     36   -> osal_set_event
        0     40   -> osal_start_timerEx
      1     60   MT_AfDataRequestSrcRtg
        0     46   -> AF_DataRequestSrcRtg
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> afFindEndPointDesc
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
      1     38   MT_AfDataRetrieve
        0     21   -> MT_BuildAndSendZToolResponse
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     24   -> osal_memcpy
      1     35   MT_AfDataStore
        0     21   -> AF_DataRequest
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> osal_mem_free
        0     15   -> osal_memcpy
      1     24   MT_AfDelete
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> afDelete
      0     13   MT_AfExec
        0      9   -> osal_mem_free
        0      9   -> osal_set_event
        0     13   -> osal_start_timerEx
      1     27   MT_AfIncomingMsg
        0     23   -> MT_BuildAndSendZToolResponse
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     26   -> osal_memcpy
        0     23   -> osal_set_event
        0     27   -> osal_start_timerEx
      3      6   MT_AfReflectError
        2      6   -> MT_BuildAndSendZToolResponse
      1     29   MT_AfRegister
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_BuildEndpointDesc
        0     15   -> afRegister
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
       6  ??MT_AfCommandProcessing?relay
       6  ??MT_AfDataConfirm?relay
       6  ??MT_AfDataRequest?relay
       6  ??MT_AfDataRequestSrcRtg?relay
       6  ??MT_AfDataRetrieve?relay
       6  ??MT_AfDataStore?relay
       6  ??MT_AfDelete?relay
       6  ??MT_AfExec?relay
       6  ??MT_AfIncomingMsg?relay
       6  ??MT_AfReflectError?relay
       6  ??MT_AfRegister?relay
       5  ??Subroutine45_0
      10  ??Subroutine46_0
       8  ??Subroutine47_0
      12  ??Subroutine48_0
      11  ??Subroutine49_0
       6  ??Subroutine50_0
       7  ??Subroutine51_0
       6  ??Subroutine52_0
       6  ??Subroutine53_0
       3  ?Subroutine0
      10  ?Subroutine1
      12  ?Subroutine10
      12  ?Subroutine11
      12  ?Subroutine12
      12  ?Subroutine13
       1  ?Subroutine14
       8  ?Subroutine15
      11  ?Subroutine16
       3  ?Subroutine17
      13  ?Subroutine18
      21  ?Subroutine19
       8  ?Subroutine2
       9  ?Subroutine20
       3  ?Subroutine21
       5  ?Subroutine22
       2  ?Subroutine23
      10  ?Subroutine24
       6  ?Subroutine25
      12  ?Subroutine26
       6  ?Subroutine27
       7  ?Subroutine28
       5  ?Subroutine29
       3  ?Subroutine3
       6  ?Subroutine30
       7  ?Subroutine31
      12  ?Subroutine32
       8  ?Subroutine33
       8  ?Subroutine34
       9  ?Subroutine35
       8  ?Subroutine36
       5  ?Subroutine37
       6  ?Subroutine38
       6  ?Subroutine39
      17  ?Subroutine4
       9  ?Subroutine40
       9  ?Subroutine41
      10  ?Subroutine42
       7  ?Subroutine43
       7  ?Subroutine44
      10  ?Subroutine5
      16  ?Subroutine6
      11  ?Subroutine7
       8  ?Subroutine8
      12  ?Subroutine9
     239  MT_AfCommandProcessing
      47  MT_AfDataConfirm
     677  MT_AfDataRequest
     370  MT_AfDataRequestSrcRtg
     371  MT_AfDataRetrieve
     233  MT_AfDataStore
      50  MT_AfDelete
     169  MT_AfExec
     648  MT_AfIncomingMsg
      98  MT_AfReflectError
     124  MT_AfRegister
       4  __Constant_3e8
       2  pMtAfDataReq
       2  pMtAfInMsgList

 
 3 482 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_ROM_C
     4 bytes in segment XDATA_Z
 
 3 548 bytes of CODE  memory
     2 bytes of CONST memory (+ 4 bytes shared)
     4 bytes of XDATA memory

Errors: none
Warnings: none
