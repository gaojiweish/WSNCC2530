###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                02/Sep/2016  18:31:06
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Components\stack\zdo\ZDProfile.c" -D NWK_AUTO_POLL -D ZTOOL_P1
#        -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D HAL_UART=TRUE -D
#        HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D xLCD_SUPPORTED=DEBUG -D
#        xPOWER_SAVING -lC "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\"
#        -lA "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\ZDProfile.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh
#        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\ZDProfile.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh v1.0.0\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2013-10-02 15:57:50 -0700 (Wed, 02 Oct 2013) $
      4            Revision:       $Revision: 35529 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          
    135          /*********************************************************************
    136           * EXTERNAL VARIABLES
    137           */
    138          
    139          extern endPointDesc_t ZDApp_epDesc;
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL FUNCTIONS
    147           */
    148          
    149          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    150          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    151          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    152          
    153          /*********************************************************************
    154           * LOCAL VARIABLES
    155           */
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    158          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          /*********************************************************************
    164           * ZDO Message Processing table
    165           */
    166          
    167          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    168          
    169          typedef struct
    170          {
    171            uint16                clusterID;
    172            pfnZDPMsgProcessor    pFn;
    173          } zdpMsgProcItem_t;
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0100         DW 1
   \   000002   ....         DW ??zdpProcessAddrReq?relay
   \   000004   0200         DW 2
   \   000006   ....         DW ??ZDO_ProcessNodeDescReq?relay
   \   000008   0300         DW 3
   \   00000A   ....         DW ??ZDO_ProcessPowerDescReq?relay
   \   00000C   0400         DW 4
   \   00000E   ....         DW ??ZDO_ProcessSimpleDescReq?relay
   \   000010   0500         DW 5
   \   000012   ....         DW ??ZDO_ProcessActiveEPReq?relay
   \   000014   0600         DW 6
   \   000016   ....         DW ??ZDO_ProcessMatchDescReq?relay
   \   000018   1100         DW 17
   \   00001A   ....         DW ??ZDO_ProcessUserDescReq?relay
   \   00001C   1400         DW 20
   \   00001E   ....         DW ??ZDO_ProcessUserDescSet?relay
   \   000020   1500         DW 21
   \   000022   ....         DW ??ZDO_ProcessServerDiscReq?relay
   \   000024   1F00         DW 31
   \   000026   ....         DW ??ZDO_ProcessEndDeviceTimeoutReq?relay
   \   000028   FFFF         DW 65535
   \   00002A   0000         DW 0H
    176          {
    177          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    178            // These aren't processed by sleeping end devices.
    179            { NWK_addr_req,           zdpProcessAddrReq },
    180            { Device_annce,           ZDO_ProcessDeviceAnnce },
    181          #endif
    182            { IEEE_addr_req,          zdpProcessAddrReq },
    183            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    184            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    185            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    186            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    187            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    188          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    189            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    192            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    198            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    202          #endif
    203          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    204            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    205          #endif
    206          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    207            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    208          #endif
    209          #if defined ( ZDO_USERDESC_RESPONSE )
    210            { User_Desc_req,          ZDO_ProcessUserDescReq },
    211          #endif
    212          #if defined ( ZDO_USERDESCSET_RESPONSE )
    213            { User_Desc_set,          ZDO_ProcessUserDescSet },
    214          #endif
    215          #if defined ( ZDO_SERVERDISC_RESPONSE )
    216            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    217          #endif
    218          #if defined ( ZIGBEE_CHILD_AGING )
    219          #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
    220            { End_Device_Timeout_req, ZDO_ProcessEndDeviceTimeoutReq },
    221          #endif
    222          #endif // ZIGBEE_CHILD_AGING
    223            {0xFFFF, NULL} // Last
    224          };
    225          
    226          /*********************************************************************
    227           * @fn          fillAndSend
    228           *
    229           * @brief       Combined to reduce space
    230           *
    231           * @param
    232           * @param
    233           *
    234           * @return      afStatus_t
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V4,R1
    238            afAddrType_t afAddr;
    239          
    240            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV     R4,#0xc
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7900         MOV     R1,#0x0
   \   00001A   AA..         MOV     R2,?XSP + 0
   \   00001C   AB..         MOV     R3,?XSP + 1
   \   00001E   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    241            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV     A,#0x9
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E4           CLR     A
   \   000027   F0           MOVX    @DPTR,A
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   C0E0         PUSH    A
   \   000037   7408         MOV     A,#0x8
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000046   12....       LCALL   ??Subroutine121_0 & 0xFFFF
    242          
    243            *(ZDP_TmpBuf-1) = *transSeq;
   \                     ??CrossCallReturnLabel_256:
   \   000049   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   24FF         ADD     A,#-0x1
   \   00004F   F5..         MOV     ?V2,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   34FF         ADDC    A,#-0x1
   \   000055   F5..         MOV     ?V3,A
   \   000057   85..82       MOV     DPL,?V0
   \   00005A   85..83       MOV     DPH,?V1
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   85..82       MOV     DPL,?V2
   \   000061   85..83       MOV     DPH,?V3
   \   000064   F0           MOVX    @DPTR,A
    244          
    245            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    246                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    247                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   000065                ; Setup parameters for call to function AF_DataRequest
   \   000065   75..1E       MOV     ?V5,#0x1e
   \   000068   78..         MOV     R0,#?V5
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006D   78..         MOV     R0,#?V0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   78..         MOV     R0,#?V2
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   E5..         MOV     A,?V4
   \   000079   2401         ADD     A,#0x1
   \   00007B   F5..         MOV     ?V0,A
   \   00007D   E4           CLR     A
   \   00007E   3400         ADDC    A,#0x0
   \   000080   F5..         MOV     ?V1,A
   \   000082   78..         MOV     R0,#?V0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   7421         MOV     A,#0x21
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00008F   90....       MOV     DPTR,#ZDP_TxOptions
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F9           MOV     R1,A
   \   000094   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000096   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000098   7409         MOV     A,#0x9
   \   00009A   12....       LCALL   ?XSTACK_DISP101_8
   \   00009D   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   0000A0   7409         MOV     A,#0x9
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   740C         MOV     A,#0xc
   \   0000A7   02....       LJMP    ?Subroutine0 & 0xFFFF
    248          
    249          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine108_0
   \   000003                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine122_0
   \   000001                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    250          
    251          /*********************************************************************
    252           * @fn          ZDP_SendData
    253           *
    254           * @brief       This builds and send a request message that has
    255           *              NWKAddrOfInterest as its only parameter.
    256           *
    257           * @param       dstAddr - destination address
    258           * @param       cmd - clusterID
    259           * @param       dataLen - number of bytes of data
    260           * @param       data - pointer to the data
    261           * @param       SecurityEnable - Security Options
    262           *
    263           * @return      afStatus_t
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    266                                  byte len, uint8 *buf, byte SecurityEnable )
    267          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    268            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000A   12....       LCALL   ??Subroutine109_0 & 0xFFFF
    269            byte cnt = len;
   \                     ??CrossCallReturnLabel_198:
   \   00000D   EF           MOV     A,R7
   \   00000E   FE           MOV     R6,A
   \   00000F   740E         MOV     A,#0xe
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000017   8020         SJMP    ??ZDP_SendData_0
    270          
    271            while ( cnt-- )
    272            {
    273              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   85..82       MOV     DPL,?V2
   \   000021   85..83       MOV     DPH,?V3
   \   000024   12....       LCALL   ?Subroutine35 & 0xFFFF
    274            }
   \                     ??CrossCallReturnLabel_40:
   \   000027   A3           INC     DPTR
   \   000028   A882         MOV     R0,DPL
   \   00002A   A983         MOV     R1,DPH
   \   00002C   85..82       MOV     DPL,?V2
   \   00002F   85..83       MOV     DPH,?V3
   \   000032   A3           INC     DPTR
   \   000033   8582..       MOV     ?V2,DPL
   \   000036   8583..       MOV     ?V3,DPH
   \                     ??ZDP_SendData_0:
   \   000039   74FF         MOV     A,#-0x1
   \   00003B   2E           ADD     A,R6
   \   00003C   FE           MOV     R6,A
   \   00003D   04           INC     A
   \   00003E   70D9         JNZ     ??ZDP_SendData_1
    275          
    276            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   000040   7410         MOV     A,#0x10
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E0           MOVX    A,@DPTR
   \   000046   90....       MOV     DPTR,#ZDP_TxOptions
   \   000049   6004         JZ      ??ZDP_SendData_2
   \   00004B   7440         MOV     A,#0x40
   \   00004D   8001         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00004F   E4           CLR     A
   \                     ??ZDP_SendData_3:
   \   000050   F0           MOVX    @DPTR,A
   \   000051                ; Setup parameters for call to function fillAndSend
   \   000051   740C         MOV     A,#0xc
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000059   EF           MOV     A,R7
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
   \   000063   E9           MOV     A,R1
   \   000064   F9           MOV     R1,A
   \   000065   90....       MOV     DPTR,#ZDP_TxOptions
   \   000068   E4           CLR     A
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   02....       LJMP    ??Subroutine107_0 & 0xFFFF
    277          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET
    278          
    279          /*********************************************************************
    280           * @fn          ZDP_NWKAddrOfInterestReq
    281           *
    282           * @brief       This builds and send a request message that has
    283           *              NWKAddrOfInterest as its only parameter.
    284           *
    285           * @param       dstAddr - destination address
    286           * @param       nwkAddr - 16 bit address
    287           * @param       SecurityEnable - Security Options
    288           *
    289           * @return      afStatus_t
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    292                                               byte cmd, byte SecurityEnable )
    293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    294            (void)SecurityEnable;  // Intentionally unreferenced parameter
    295          
    296            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   12....       LCALL   ?Subroutine22 & 0xFFFF
    297            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_18:
   \   00000A   F0           MOVX    @DPTR,A
    298          
    299            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   8E..         MOV     ?V0,R6
   \   00000D   02....       LJMP    ?Subroutine2 & 0xFFFF
    300          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75..00       MOV     ?V1,#0x0
   \   000003   78..         MOV     R0,#?V0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7902         MOV     R1,#0x2
   \   00000A                REQUIRE ??Subroutine90_0
   \   00000A                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine91_0
   \   000008                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000003   7402         MOV     A,#0x2
   \   000005                REQUIRE ??Subroutine92_0
   \   000005                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000006   EC           MOV     A,R4
   \   000007   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00000A   ED           MOV     A,R5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000004   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    301          
    302          /*********************************************************************
    303           * Address Requests
    304           */
    305          
    306          /*********************************************************************
    307           * @fn          ZDP_NwkAddrReq
    308           *
    309           * @brief       This builds and send a NWK_addr_req message.  This
    310           *              function sends a broadcast message looking for a 16
    311           *              bit address with a 64 bit address as bait.
    312           *
    313           * @param       IEEEAddress - looking for this device
    314           * @param       SecurityEnable - Security Options
    315           *
    316           * @return      afStatus_t
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    319                                     byte StartIndex, byte SecurityEnable )
    320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V2,R1
   \   000010   8C..         MOV     ?V3,R4
    321            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   12....       LCALL   ??Subroutine118_0 & 0xFFFF
    322            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    323            zAddrType_t dstAddr;
    324          
    325            (void)SecurityEnable;  // Intentionally unreferenced parameter
    326          
    327            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_253:
   \   000015                ; Setup parameters for call to function sAddrExtCmp
   \   000015   EE           MOV     A,R6
   \   000016   FC           MOV     R4,A
   \   000017   EF           MOV     A,R7
   \   000018   FD           MOV     R5,A
   \   000019   7A..         MOV     R2,#saveExtAddr & 0xff
   \   00001B   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   00001D   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000020   E9           MOV     A,R1
   \   000021   700A         JNZ     ??ZDP_NwkAddrReq_0
    328            {
    329              dstAddr.addrMode = AddrBroadcast;
   \   000023   7408         MOV     A,#0x8
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine69 & 0xFFFF
    330              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    331            }
   \                     ??CrossCallReturnLabel_111:
   \   00002B   8012         SJMP    ??ZDP_NwkAddrReq_1
    332            else
    333            {
    334              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7402         MOV     A,#0x2
   \   000034   F0           MOVX    @DPTR,A
    335              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000035   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000038   12....       LCALL   ?Subroutine47 & 0xFFFF
    336            }
   \                     ??CrossCallReturnLabel_63:
   \   00003B   E8           MOV     A,R0
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   E9           MOV     A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   00003F   F0           MOVX    @DPTR,A
    337          
    338            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   EE           MOV     A,R6
   \   000041   FC           MOV     R4,A
   \   000042   EF           MOV     A,R7
   \   000043   FD           MOV     R5,A
   \   000044   AA..         MOV     R2,?V0
   \   000046   AB..         MOV     R3,?V1
   \   000048   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    339          
    340            *pBuf++ = ReqType;
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   E5..         MOV     A,?V2
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
    341            *pBuf++ = StartIndex;
   \   000053   E5..         MOV     A,?V3
   \   000055   F0           MOVX    @DPTR,A
    342          
    343            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000056                ; Setup parameters for call to function fillAndSend
   \   000056   E4           CLR     A
   \   000057   F5..         MOV     ?V0,A
   \   000059   F5..         MOV     ?V1,A
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   790A         MOV     R1,#0xa
   \   000062   7402         MOV     A,#0x2
   \   000064   12....       LCALL   ?XSTACK_DISP102_8
   \   000067   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000069   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00006B   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00006E   7402         MOV     A,#0x2
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   7409         MOV     A,#0x9
   \   000075   02....       LJMP    ?Subroutine0 & 0xFFFF
    344          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FD         MOV     A,#-0x3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine119_0
   \   000003                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET
    345          
    346          /*********************************************************************
    347           * @fn          ZDP_IEEEAddrReq
    348           *
    349           * @brief       This builds and send a IEEE_addr_req message.  This
    350           *              function sends a unicast message looking for a 64
    351           *              bit IEEE address with a 16 bit address as bait.
    352           *
    353           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    354           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    355           * @param       SecurityEnable - Security Options
    356           *
    357           * @return      afStatus_t
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    360                                      byte StartIndex, byte SecurityEnable )
    361          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    362            uint8 *pBuf = ZDP_TmpBuf;
   \   00000E   12....       LCALL   ??Subroutine88_0 & 0xFFFF
    363            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    364            zAddrType_t dstAddr;
    365          
    366            (void)SecurityEnable;  // Intentionally unreferenced parameter
    367          
    368            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_140:
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine30 & 0xFFFF
    369            dstAddr.addr.shortAddr = shortAddr;
    370          
    371            *pBuf++ = LO_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_28:
   \   000019   EA           MOV     A,R2
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
    372            *pBuf++ = HI_UINT16( shortAddr );
   \   000020   EB           MOV     A,R3
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
    373          
    374            *pBuf++ = ReqType;
   \   000023   EE           MOV     A,R6
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
    375            *pBuf++ = StartIndex;
   \   000026   EF           MOV     A,R7
   \   000027   F0           MOVX    @DPTR,A
    376          
    377            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   000028                ; Setup parameters for call to function fillAndSend
   \   000028   75..01       MOV     ?V0,#0x1
   \   00002B   75..00       MOV     ?V1,#0x0
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7904         MOV     R1,#0x4
   \   000035   02....       LJMP    ?Subroutine8 & 0xFFFF
    378          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine89_0
   \   000003                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?XSTACK_DISP102_8
   \   000005   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000007   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000009   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000011                REQUIRE ??Subroutine94_0
   \   000011                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   7409         MOV     A,#0x9
   \   000002   02....       LJMP    ??Subroutine92_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   EA           MOV     A,R2
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   EB           MOV     A,R3
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET
    379          
    380          /*********************************************************************
    381           * @fn          ZDP_MatchDescReq
    382           *
    383           * @brief       This builds and send a Match_Desc_req message.  This
    384           *              function sends a broadcast or unicast message
    385           *              requesting the list of endpoint/interfaces that
    386           *              match profile ID and cluster IDs.
    387           *
    388           * @param       dstAddr - destination address
    389           * @param       nwkAddr - network address of interest
    390           * @param       ProfileID - Profile ID
    391           * @param       NumInClusters - number of input clusters
    392           * @param       InClusterList - input cluster ID list
    393           * @param       NumOutClusters - number of output clusters
    394           * @param       OutClusterList - output cluster ID list
    395           * @param       SecurityEnable - Security Options
    396           *
    397           * @return      afStatus_t
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine87_0
   \   000001                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   FE           MOV     R6,A
   \   000001                REQUIRE ??Subroutine88_0
   \   000001                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    400                                          uint16 ProfileID,
    401                                          byte NumInClusters, cId_t *InClusterList,
    402                                          byte NumOutClusters, cId_t *OutClusterList,
    403                                          byte SecurityEnable )
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine51 & 0xFFFF
    405            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_129:
   \   000008   7412         MOV     A,#0x12
   \   00000A   12....       LCALL   ?XSTACK_DISP0_8
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0,A
    406            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    407            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    408          
    409            (void)SecurityEnable;  // Intentionally unreferenced parameter
    410          
    411            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000010   EE           MOV     A,R6
   \   000011   25..         ADD     A,?V0
   \   000013   C3           CLR     C
   \   000014   33           RLC     A
   \   000015   2406         ADD     A,#0x6
   \   000017   FF           MOV     R7,A
    412          
    413            if ( len >= ZDP_BUF_SZ-1 )
   \   000018   C3           CLR     C
   \   000019   944F         SUBB    A,#0x4f
   \   00001B   4005         JC      ??ZDP_MatchDescReq_0
    414            {
    415              return afStatus_MEM_FAIL;
   \   00001D   7910         MOV     R1,#0x10
   \   00001F   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    416            }
    417          
    418            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    419            // this command to 0xFFFF.  So, here we will filter this and replace
    420            // with 0xFFFD to only send to devices with RX ON.  This includes the
    421            // network address of interest.
    422            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    423                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   640F         XRL     A,#0xf
   \   000031   6011         JZ      ??ZDP_MatchDescReq_2
   \   000033   8A82         MOV     DPL,R2
   \   000035   8B83         MOV     DPH,R3
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6402         XRL     A,#0x2
   \   000042   7018         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   000044   8A82         MOV     DPL,R2
   \   000046   8B83         MOV     DPH,R3
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F4           CPL     A
   \   00004A   7003         JNZ     ??ZDP_MatchDescReq_4
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F4           CPL     A
   \                     ??ZDP_MatchDescReq_4:
   \   00004F   700B         JNZ     ??ZDP_MatchDescReq_3
    424            {
    425              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000051   8A82         MOV     DPL,R2
   \   000053   8B83         MOV     DPH,R3
   \   000055   74FD         MOV     A,#-0x3
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   74FF         MOV     A,#-0x1
   \   00005B   F0           MOVX    @DPTR,A
    426            }
    427            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   00005C   74FF         MOV     A,#-0x1
   \   00005E   6C           XRL     A,R4
   \   00005F   7003         JNZ     ??ZDP_MatchDescReq_5
   \   000061   74FF         MOV     A,#-0x1
   \   000063   6D           XRL     A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   000064   7004         JNZ     ??ZDP_MatchDescReq_6
    428            {
    429              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000066   7CFD         MOV     R4,#-0x3
   \   000068   7DFF         MOV     R5,#-0x1
    430            }
    431          
    432            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   00006A   EC           MOV     A,R4
   \   00006B   8882         MOV     DPL,R0
   \   00006D   8983         MOV     DPH,R1
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
    433            *pBuf++ = HI_UINT16( nwkAddr );
   \   000071   ED           MOV     A,R5
   \   000072   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000075   740E         MOV     A,#0xe
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   12....       LCALL   ?Subroutine43 & 0xFFFF
    434          
    435            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
    436            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_56:
   \   00007D   A3           INC     DPTR
    437          
    438            *pBuf++ = NumInClusters; // Input cluster list
   \   00007E   EE           MOV     A,R6
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   08           INC     R0
   \   000082   08           INC     R0
   \   000083   08           INC     R0
   \   000084   A983         MOV     R1,DPH
    439            if ( NumInClusters )
   \   000086   6011         JZ      ??ZDP_MatchDescReq_7
    440            {
    441              for (i=0; i<NumInClusters; ++i)  {
   \   000088   75..00       MOV     ?V1,#0x0
   \   00008B   7410         MOV     A,#0x10
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?Subroutine52 & 0xFFFF
    442                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_71:
   \   000093   12....       LCALL   ?Subroutine10 & 0xFFFF
    443                *pBuf++ = HI_UINT16( InClusterList[i] );
    444              }
    445            }
   \                     ??CrossCallReturnLabel_2:
   \   000096   9E           SUBB    A,R6
   \   000097   40FA         JC      ??CrossCallReturnLabel_71
    446          
    447            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_7:
   \   000099   8882         MOV     DPL,R0
   \   00009B   8983         MOV     DPH,R1
   \   00009D   E5..         MOV     A,?V0
   \   00009F   12....       LCALL   ??Subroutine113_0 & 0xFFFF
    448            if ( NumOutClusters )
   \                     ??CrossCallReturnLabel_220:
   \   0000A2   6012         JZ      ??ZDP_MatchDescReq_8
    449            {
    450              for (i=0; i<NumOutClusters; ++i)  {
   \   0000A4   75..00       MOV     ?V1,#0x0
   \   0000A7   7413         MOV     A,#0x13
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL   ?Subroutine52 & 0xFFFF
    451                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_72:
   \   0000AF   12....       LCALL   ?Subroutine10 & 0xFFFF
    452                *pBuf++ = HI_UINT16( OutClusterList[i] );
    453              }
    454            }
   \                     ??CrossCallReturnLabel_3:
   \   0000B2   95..         SUBB    A,?V0
   \   0000B4   40F9         JC      ??CrossCallReturnLabel_72
    455          
    456            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_8:
   \   0000B6                ; Setup parameters for call to function fillAndSend
   \   0000B6   75..06       MOV     ?V0,#0x6
   \   0000B9   75..00       MOV     ?V1,#0x0
   \   0000BC   78..         MOV     R0,#?V0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   EF           MOV     A,R7
   \   0000C2   F9           MOV     R1,A
   \   0000C3   EA           MOV     A,R2
   \   0000C4   FC           MOV     R4,A
   \   0000C5   EB           MOV     A,R3
   \   0000C6   FD           MOV     R5,A
   \   0000C7   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000C9   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000CB   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000CE   7402         MOV     A,#0x2
   \   0000D0   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000D3   02....       LJMP    ??Subroutine108_0 & 0xFFFF
    457          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   8C..         MOV     ?V2,R4
   \   000007   8D..         MOV     ?V3,R5
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   AC..         MOV     R4,?V1
   \   000002   EC           MOV     A,R4
   \   000003   2C           ADD     A,R4
   \   000004   FC           MOV     R4,A
   \   000005   E4           CLR     A
   \   000006   33           RLC     A
   \   000007   FD           MOV     R5,A
   \   000008   E5..         MOV     A,?V2
   \   00000A   2C           ADD     A,R4
   \   00000B   FC           MOV     R4,A
   \   00000C   E5..         MOV     A,?V3
   \   00000E   3D           ADDC    A,R5
   \   00000F   FD           MOV     R5,A
   \   000010   8C82         MOV     DPL,R4
   \   000012   8D83         MOV     DPH,R5
   \   000014   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   00001E   05..         INC     ?V1
   \   000020   E5..         MOV     A,?V1
   \   000022   C3           CLR     C
   \   000023   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003                REQUIRE ??Subroutine93_0
   \   000003                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   A882         MOV     R0,DPL
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine100_0
   \   000001                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine101_0
   \   000001                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EC           MOV     A,R4
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   ED           MOV     A,R5
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   12....       LCALL   ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003   22           RET
    458          
    459          /*********************************************************************
    460           * @fn          ZDP_SimpleDescReq
    461           *
    462           * @brief       This builds and send a NWK_Simple_Desc_req
    463           *              message.  This function sends unicast message to the
    464           *              destination device.
    465           *
    466           * @param       dstAddr - destination address
    467           * @param       nwkAddr - 16 bit address
    468           * @param       epIntf - endpoint/interface
    469           * @param       SecurityEnable - Security Options
    470           *
    471           * @return      afStatus_t
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    474                                              byte endPoint, byte SecurityEnable )
    475          
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    477            (void)SecurityEnable;  // Intentionally unreferenced parameter
    478          
    479            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL   ?Subroutine22 & 0xFFFF
    480            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_19:
   \   000008   12....       LCALL   ?Subroutine19 & 0xFFFF
    481            ZDP_TmpBuf[2] = endPoint;
    482          
    483            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_14:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV     ?V0,#0x4
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV     R1,#0x3
   \   000018   02....       LJMP    ??Subroutine90_0 & 0xFFFF
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   A3           INC     DPTR
   \   000004   E9           MOV     A,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
    485          
    486          /*********************************************************************
    487           * @fn          ZDP_UserDescSet
    488           *
    489           * @brief       This builds and send a User_Desc_set message to set
    490           *              the user descriptor.  This function sends unicast
    491           *              message to the destination device.
    492           *
    493           * @param       dstAddr - destination address
    494           * @param       nwkAddr - 16 bit address
    495           * @param       UserDescriptor - user descriptor
    496           * @param       SecurityEnable - Security Options
    497           *
    498           * @return      afStatus_t
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    501                                    UserDescriptorFormat_t *UserDescriptor,
    502                                    byte SecurityEnable )
    503          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine39 & 0xFFFF
    504            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_245:
   \   000008   740F         MOV     A,#0xf
   \   00000A   12....       LCALL   ?XSTACK_DISP0_8
   \   00000D   12....       LCALL   ?Subroutine41 & 0xFFFF
    505            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    506                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_53:
   \   000010   C3           CLR     C
   \   000011   9410         SUBB    A,#0x10
   \   000013   5005         JNC     ??ZDP_UserDescSet_0
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V2,A
   \   000018   8003         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00001A   75..10       MOV     ?V2,#0x10
    507            byte addrLen = 2;
    508          
    509            (void)SecurityEnable;  // Intentionally unreferenced parameter
    510          
    511            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   00001D   EC           MOV     A,R4
   \   00001E   85..82       MOV     DPL,?V0
   \   000021   85..83       MOV     DPH,?V1
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
    512            *pBuf++ = HI_UINT16( nwkAddr );
   \   000026   ED           MOV     A,R5
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
    513          
    514            *pBuf++ = len;
   \   000029   E5..         MOV     A,?V2
   \   00002B   12....       LCALL   ?Subroutine12 & 0xFFFF
    515            addrLen = 3;
    516          
    517            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \                     ??CrossCallReturnLabel_4:
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000031   AC..         MOV     R4,?V2
   \   000033   7D00         MOV     R5,#0x0
   \   000035   AA..         MOV     R2,?V0
   \   000037   AB..         MOV     R3,?V1
   \   000039   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
    518            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   000041                ; Setup parameters for call to function osal_memset
   \   000041   A8..         MOV     R0,?V2
   \   000043   7410         MOV     A,#0x10
   \   000045   C3           CLR     C
   \   000046   98           SUBB    A,R0
   \   000047   FC           MOV     R4,A
   \   000048   95E0         SUBB    A,0xE0 /* A   */
   \   00004A   FD           MOV     R5,A
   \   00004B   7920         MOV     R1,#0x20
   \   00004D   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    519          
    520            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000050                ; Setup parameters for call to function fillAndSend
   \   000050   75..14       MOV     ?V0,#0x14
   \   000053   75..00       MOV     ?V1,#0x0
   \   000056   78..         MOV     R0,#?V0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   7913         MOV     R1,#0x13
   \   00005D   EE           MOV     A,R6
   \   00005E   FC           MOV     R4,A
   \   00005F   EF           MOV     A,R7
   \   000060   FD           MOV     R5,A
   \   000061   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000063   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000065   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000068   7402         MOV     A,#0x2
   \   00006A                REQUIRE ?Subroutine3
   \   00006A                ; // Fall through to label ?Subroutine3
    521          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003   A3           INC     DPTR
   \   000004   A982         MOV     R1,DPL
   \   000006   AA83         MOV     R2,DPH
   \   000008   89..         MOV     ?V4,R1
   \   00000A   8A..         MOV     ?V5,R2
   \   00000C   75..00       MOV     ?V6,#0x0
   \   00000F   78..         MOV     R0,#?V4
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V0,DPL
   \   000005   8583..       MOV     ?V1,DPH
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                REQUIRE ??Subroutine118_0
   \   000004                ; // Fall through to label ??Subroutine118_0
    522          
    523          /*********************************************************************
    524           * @fn          ZDP_ServerDiscReq
    525           *
    526           * @brief       Build and send a Server_Discovery_req request message.
    527           *
    528           * @param       serverMask - 16-bit bit-mask of server services being sought.
    529           * @param       SecurityEnable - Security Options
    530           *
    531           * @return      afStatus_t
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    534          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine51 & 0xFFFF
    535            uint8 *pBuf = ZDP_TmpBuf;
    536            zAddrType_t dstAddr;
    537          
    538            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_130:
   \   00000D   7408         MOV     A,#0x8
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine23 & 0xFFFF
    539            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    540          
    541            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_20:
   \   000015   EA           MOV     A,R2
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
    542            *pBuf = HI_UINT16( serverMask );
   \   00001C   EB           MOV     A,R3
   \   00001D   F0           MOVX    @DPTR,A
    543          
    544            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    545                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00001E   EE           MOV     A,R6
   \   00001F   90....       MOV     DPTR,#ZDP_TxOptions
   \   000022   6004         JZ      ??ZDP_ServerDiscReq_0
   \   000024   7440         MOV     A,#0x40
   \   000026   8001         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000028   E4           CLR     A
   \                     ??ZDP_ServerDiscReq_1:
   \   000029   F0           MOVX    @DPTR,A
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..15       MOV     ?V0,#0x15
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7902         MOV     R1,#0x2
   \   000037   E9           MOV     A,R1
   \   000038   12....       LCALL   ?XSTACK_DISP102_8
   \   00003B   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00003D   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00003F   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \   000047   E9           MOV     A,R1
   \   000048   F9           MOV     R1,A
   \   000049   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   02....       LJMP    ??Subroutine94_0 & 0xFFFF
    546          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    547          
    548          /*********************************************************************
    549           * @fn          ZDP_DeviceAnnce
    550           *
    551           * @brief       This builds and send a Device_Annce message.  This
    552           *              function sends a broadcast message.
    553           *
    554           * @param       nwkAddr - 16 bit address of the device
    555           * @param       IEEEAddr - 64 bit address of the device
    556           * @param       capabilities - device capabilities.  This field is only
    557           *                 sent for v1.1 networks.
    558           * @param       SecurityEnable - Security Options
    559           *
    560           * @return      afStatus_t
    561           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    563                                        byte capabilities, byte SecurityEnable )
    564          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    565            zAddrType_t dstAddr;
    566            uint8 len;
    567          
    568            (void)SecurityEnable;  // Intentionally unreferenced parameter
    569          
    570            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV     A,#0x8
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine23 & 0xFFFF
    571            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    572          
    573            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_21:
   \   000014   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000017   EA           MOV     A,R2
   \   000018   12....       LCALL   ?Subroutine24 & 0xFFFF
    574            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_22:
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    575            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2402         ADD     A,#0x2
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    576            len = 2 + Z_EXTADDR_LEN;
    577          
    578            ZDP_TmpBuf[10] = capabilities;
   \   00002C   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   00002F   C8           XCH     A,R0
   \   000030   240A         ADD     A,#0xa
   \   000032   F582         MOV     DPL,A
   \   000034   E4           CLR     A
   \   000035   38           ADDC    A,R0
   \   000036   F583         MOV     DPH,A
   \   000038   EE           MOV     A,R6
   \   000039   F0           MOVX    @DPTR,A
    579            len++;
    580          
    581            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..13       MOV     ?V0,#0x13
   \   00003D   75..00       MOV     ?V1,#0x0
   \   000040   78..         MOV     R0,#?V0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   790B         MOV     R1,#0xb
   \   000047   80..         SJMP    ?Subroutine8
    582          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine102_0
   \   000003                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine117_0
   \   000003                ; // Fall through to label ??Subroutine117_0
    583          
    584          #if defined ( ZIGBEE_CHILD_AGING )
    585          /*********************************************************************
    586           * @fn          ZDP_EndDeviceTimeoutReq
    587           *
    588           * @brief       This builds and send an End_Device_Timeout_req message.
    589           *
    590           * @param       parentAddr - destination address
    591           * @param       reqTimeout - Timeout value the device is requesting
    592           * @param       SecurityEnable - Security Options
    593           *
    594           * @return      afStatus_t
    595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    596          afStatus_t ZDP_EndDeviceTimeoutReq( uint16 parentAddr, uint16 reqTimeout,
   \                     ZDP_EndDeviceTimeoutReq:
    597                                              uint8 SecurityEnable )
    598          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    599            uint8 *pBuf = ZDP_TmpBuf;
    600            uint8 len = Z_EXTADDR_LEN + 2;  // Device_IEEEAddress + reqTimeout.
    601            zAddrType_t dstAddr;
    602          
    603            (void)SecurityEnable;  // Intentionally unreferenced parameter
    604          
    605            dstAddr.addrMode = Addr16Bit;
   \   00000E   7408         MOV     A,#0x8
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine30 & 0xFFFF
    606            dstAddr.addr.shortAddr = parentAddr;
    607          
    608            pBuf = osal_cpyExtAddr( pBuf, saveExtAddr );
   \                     ??CrossCallReturnLabel_29:
   \   000016                ; Setup parameters for call to function sAddrExtCpy
   \   000016   7C..         MOV     R4,#saveExtAddr & 0xff
   \   000018   7D..         MOV     R5,#(saveExtAddr >> 8) & 0xff
   \   00001A   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   00001D   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
    609          
    610            *pBuf++ = LO_UINT16( reqTimeout );
   \   000024   EE           MOV     A,R6
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
    611            *pBuf++ = HI_UINT16( reqTimeout );
   \   000027   EF           MOV     A,R7
   \   000028   F0           MOVX    @DPTR,A
    612          
    613            return fillAndSend( &ZDP_TransID, &dstAddr, End_Device_Timeout_req, len );
   \   000029                ; Setup parameters for call to function fillAndSend
   \   000029   75..1F       MOV     ?V0,#0x1f
   \   00002C   75..00       MOV     ?V1,#0x0
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   790A         MOV     R1,#0xa
   \   000036                REQUIRE ?Subroutine8
   \   000036                ; // Fall through to label ?Subroutine8
    614          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine104_0
   \   000003                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    615          #endif // ZIGBEE_CHILD_AGING
    616          
    617          /*********************************************************************
    618           * Address Responses
    619           */
    620          
    621          /*********************************************************************
    622           * @fn      zdpProcessAddrReq
    623           *
    624           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    625           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    626           *
    627           * @param   inMsg - incoming message
    628           *
    629           * @return  none
    630           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    631          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    632          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    633            associated_devices_t *pAssoc;
    634            uint8 reqType;
    635            uint16 aoi = INVALID_NODE_ADDR;
   \   000009   75..FE       MOV     ?V0,#-0x2
   \   00000C   75..FF       MOV     ?V1,#-0x1
    636            uint8 *ieee = NULL;
   \   00000F   75..00       MOV     ?V2,#0x0
   \   000012   75..00       MOV     ?V3,#0x0
    637          
    638            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000015   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000018   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00001B   49           ORL     A,R1
   \   00001C   7004         JNZ     ??zdpProcessAddrReq_0
   \   00001E   7808         MOV     R0,#0x8
   \   000020   8002         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000022   7802         MOV     R0,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   000024   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000027   28           ADD     A,R0
   \   000028   FA           MOV     R2,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   3400         ADDC    A,#0x0
   \   00002D   8A82         MOV     DPL,R2
   \   00002F   F583         MOV     DPH,A
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V4,A
    639          
    640            if ( inMsg->clusterID == NWK_addr_req )
   \   000034   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000037   49           ORL     A,R1
   \   000038   701F         JNZ     ??zdpProcessAddrReq_2
    641          
    642            {
    643              ieee = inMsg->asdu;
   \   00003A   EE           MOV     A,R6
   \   00003B   2413         ADD     A,#0x13
   \   00003D   F582         MOV     DPL,A
   \   00003F   E4           CLR     A
   \   000040   3F           ADDC    A,R7
   \   000041   12....       LCALL   ?Subroutine42 & 0xFFFF
    644          
    645              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \                     ??CrossCallReturnLabel_200:
   \   000044                ; Setup parameters for call to function sAddrExtCmp
   \   000044   AC..         MOV     R4,?V2
   \   000046   FD           MOV     R5,A
   \   000047   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000049   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   00004B   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   00004E   E9           MOV     A,R1
   \   00004F   6043         JZ      ??zdpProcessAddrReq_3
    646              {
    647                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000051   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000054   12....       LCALL   ??Subroutine119_0 & 0xFFFF
    648              }
    649              // Handle response for sleeping end devices
    650              else if ( (ZSTACK_ROUTER_BUILD)
    651                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    652                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    653              {
    654                aoi = pAssoc->shortAddr;
    655                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    656                  reqType = 0xFF; // Force Invalid
    657              }
    658            }
   \                     ??CrossCallReturnLabel_247:
   \   000057   8029         SJMP    ??zdpProcessAddrReq_4
    659            else  // if ( inMsg->clusterID == IEEE_addr_req )
    660            {
    661              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   000059   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00005C   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00005F   FA           MOV     R2,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   \   000063   E4           CLR     A
   \   000064   C8           XCH     A,R0
   \   000065   F9           MOV     R1,A
   \   000066   EA           MOV     A,R2
   \   000067   28           ADD     A,R0
   \   000068   F5..         MOV     ?V0,A
   \   00006A   E4           CLR     A
   \   00006B   39           ADDC    A,R1
   \   00006C   F5..         MOV     ?V1,A
    662          
    663              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   00006E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000071   E0           MOVX    A,@DPTR
   \   000072   65..         XRL     A,?V0
   \   000074   7004         JNZ     ??zdpProcessAddrReq_5
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_5:
   \   00007A   7018         JNZ     ??zdpProcessAddrReq_3
    664              {
    665                ieee = saveExtAddr;
   \   00007C   75....       MOV     ?V2,#saveExtAddr & 0xff
   \   00007F   75....       MOV     ?V3,#(saveExtAddr >> 8) & 0xff
    666              }
    667              else if ( (ZSTACK_ROUTER_BUILD)
    668                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    669                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    670              {
    671                AddrMgrEntry_t addrEntry;
    672                addrEntry.user = ADDRMGR_USER_DEFAULT;
    673                addrEntry.index = pAssoc->addrIdx;
    674                if ( AddrMgrEntryGet( &addrEntry ) )
    675                {
    676                  ieee = addrEntry.extAddr;
    677                }
    678          
    679                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    680                  reqType = 0xFF; // Force Invalid
    681              }
    682            }
    683          
    684            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   000082   74FE         MOV     A,#-0x2
   \   000084   65..         XRL     A,?V0
   \   000086   7004         JNZ     ??zdpProcessAddrReq_6
   \   000088   74FF         MOV     A,#-0x1
   \   00008A   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_6:
   \   00008C   6006         JZ      ??zdpProcessAddrReq_3
   \   00008E   E5..         MOV     A,?V2
   \   000090   45..         ORL     A,?V3
   \   000092   700C         JNZ     ??zdpProcessAddrReq_7
   \                     ??zdpProcessAddrReq_3:
   \   000094   EE           MOV     A,R6
   \   000095   240B         ADD     A,#0xb
   \   000097   F582         MOV     DPL,A
   \   000099   E4           CLR     A
   \   00009A   3F           ADDC    A,R7
   \   00009B   F583         MOV     DPH,A
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   707F         JNZ     ??zdpProcessAddrReq_8
    685            {
    686              uint8 stat;
    687              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_7:
   \   0000A0   12....       LCALL   ??Subroutine103_0 & 0xFFFF
    688              // Status + IEEE-Addr + Nwk-Addr.
    689              uint8 len = 1 + Z_EXTADDR_LEN + 2;
    690          
    691              // If aoi and iee are both setup, we found results
    692              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \                     ??CrossCallReturnLabel_192:
   \   0000A3   74FE         MOV     A,#-0x2
   \   0000A5   65..         XRL     A,?V0
   \   0000A7   7004         JNZ     ??zdpProcessAddrReq_9
   \   0000A9   74FF         MOV     A,#-0x1
   \   0000AB   65..         XRL     A,?V1
   \                     ??zdpProcessAddrReq_9:
   \   0000AD   6018         JZ      ??zdpProcessAddrReq_10
   \   0000AF   E5..         MOV     A,?V2
   \   0000B1   45..         ORL     A,?V3
   \   0000B3   6012         JZ      ??zdpProcessAddrReq_10
    693              {
    694                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    695                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   0000B5   E5..         MOV     A,?V4
   \   0000B7   6006         JZ      ??zdpProcessAddrReq_11
   \   0000B9   7401         MOV     A,#0x1
   \   0000BB   65..         XRL     A,?V4
   \   0000BD   7004         JNZ     ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   0000BF   7800         MOV     R0,#0x0
   \   0000C1   801E         SJMP    ??zdpProcessAddrReq_13
   \                     ??zdpProcessAddrReq_12:
   \   0000C3   7880         MOV     R0,#-0x80
   \   0000C5   801A         SJMP    ??zdpProcessAddrReq_13
    696              }
    697              else
    698              {
    699                // not found and the req was unicast to this device
    700                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_10:
   \   0000C7   7881         MOV     R0,#-0x7f
    701          
    702                // Fill in the missing field with this device's address
    703                if ( inMsg->clusterID == NWK_addr_req )
   \   0000C9   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000CC   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000CF   EC           MOV     A,R4
   \   0000D0   4D           ORL     A,R5
   \   0000D1   7008         JNZ     ??zdpProcessAddrReq_14
    704                {
    705                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   0000D3   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000D6   12....       LCALL   ??Subroutine119_0 & 0xFFFF
    706                }
   \                     ??CrossCallReturnLabel_248:
   \   0000D9   8006         SJMP    ??zdpProcessAddrReq_13
    707                else
    708                {
    709                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_14:
   \   0000DB   75....       MOV     ?V2,#saveExtAddr & 0xff
   \   0000DE   75....       MOV     ?V3,#(saveExtAddr >> 8) & 0xff
    710                }
    711              }
    712          
    713              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_13:
   \   0000E1   E8           MOV     A,R0
   \   0000E2   12....       LCALL   ??Subroutine95_0 & 0xFFFF
    714          
    715              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \                     ??CrossCallReturnLabel_151:
   \   0000E5                ; Setup parameters for call to function sAddrExtCpy
   \   0000E5   AC..         MOV     R4,?V2
   \   0000E7   AD..         MOV     R5,?V3
   \   0000E9   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    716          
    717              *pBuf++ = LO_UINT16( aoi );
   \   0000EC   8A82         MOV     DPL,R2
   \   0000EE   8B83         MOV     DPH,R3
   \   0000F0   E5..         MOV     A,?V0
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   A3           INC     DPTR
    718              *pBuf++ = HI_UINT16( aoi );
   \   0000F4   E5..         MOV     A,?V1
   \   0000F6   F0           MOVX    @DPTR,A
    719          
    720              if ( ZSTACK_ROUTER_BUILD )
    721              {
    722                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    723                     && (stat == ZDP_SUCCESS) )
    724                {
    725                  uint8  cnt = 0;
    726                  uint16 *list = AssocMakeList( &cnt );
    727          
    728                  if ( list != NULL )
    729                  {
    730                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
    731                    uint16 *pList = list + idx;
    732          
    733                    // NumAssocDev field is only present on success.
    734                    if ( cnt > idx )
    735                    {
    736                      cnt -= idx;
    737                      len += (cnt * sizeof( uint16 ));
    738                    }
    739                    else
    740                    {
    741                      cnt = 0;
    742                    }
    743                    *pBuf++ = cnt;
    744                    len++;
    745          
    746                    // StartIndex field is only present if NumAssocDev field is non-zero.
    747                    *pBuf++ = idx;
    748                    len++;
    749          
    750                    while ( cnt != 0 )
    751                    {
    752                      *pBuf++ = LO_UINT16( *pList );
    753                      *pBuf++ = HI_UINT16( *pList );
    754                      pList++;
    755                      cnt--;
    756                    }
    757          
    758                    osal_mem_free( (uint8 *)list );
    759                  }
    760                  else
    761                  {
    762                    // NumAssocDev field is only present on success.
    763                    *pBuf++ = 0;
    764                    len++;
    765                  }
    766                }
    767              }
    768          
    769              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   0000F7   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000FA   7410         MOV     A,#0x10
   \   0000FC   F0           MOVX    @DPTR,A
    770              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   0000FD                ; Setup parameters for call to function fillAndSend
   \   0000FD   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000100   F5..         MOV     ?V0,A
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   4480         ORL     A,#0x80
   \   000106   F5..         MOV     ?V1,A
   \   000108   78..         MOV     R0,#?V0
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010D   790B         MOV     R1,#0xb
   \   00010F   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000112   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000115   7402         MOV     A,#0x2
   \   000117   12....       LCALL   ?DEALLOC_XSTACK8
    771              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00011A   90....       MOV     DPTR,#ZDP_TxOptions
   \   00011D   E4           CLR     A
   \   00011E   F0           MOVX    @DPTR,A
    772            }
    773          }
   \                     ??zdpProcessAddrReq_8:
   \   00011F   7F05         MOV     R7,#0x5
   \   000121   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine96_0
   \   000004                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AA82         MOV     R2,DPL
   \   000004   AB83         MOV     R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FD           MOV     R5,A
   \   000007   EE           MOV     A,R6
   \   000008   240F         ADD     A,#0xf
   \   00000A   FA           MOV     R2,A
   \   00000B   E4           CLR     A
   \   00000C   3F           ADDC    A,R7
   \   00000D   FB           MOV     R3,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine109_0
   \   000002                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    774          
    775          /*********************************************************************
    776           * @fn          ZDP_NodeDescMsg
    777           *
    778           * @brief       Builds and sends a Node Descriptor message, unicast to the
    779           *              specified device.
    780           *
    781           * @param       inMsg - incoming message
    782           * @param       nwkAddr - 16 bit network address for device
    783           * @param       pNodeDesc - pointer to the node descriptor
    784           *
    785           * @return      afStatus_t
    786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    787          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    788                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    789          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    790            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   12....       LCALL   ??Subroutine88_0 & 0xFFFF
    791            byte len;
    792          
    793            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    794          
    795            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_141:
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   12....       LCALL   ?Subroutine36 & 0xFFFF
    796          
    797            *pBuf++ = LO_UINT16( nwkAddr );
    798            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_41:
   \   00000F   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000012   740A         MOV     A,#0xa
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine55 & 0xFFFF
    799          
    800            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    801                               (pNodeDesc->UserDescAvail << 4) |
    802                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_77:
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   541F         ANL     A,#0x1f
   \   000021   12....       LCALL   ??Subroutine99_0 & 0xFFFF
    803          
    804            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_167:
   \   000024   12....       LCALL   ?Subroutine26 & 0xFFFF
    805            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_165:
   \   000027   A3           INC     DPTR
   \   000028   12....       LCALL   ?Subroutine25 & 0xFFFF
    806            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_24:
   \   00002B   12....       LCALL   ?Subroutine25 & 0xFFFF
    807            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_25:
   \   00002E   A3           INC     DPTR
   \   00002F   12....       LCALL   ?Subroutine21 & 0xFFFF
    808            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_16:
   \   000032   12....       LCALL   ?Subroutine21 & 0xFFFF
    809            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_17:
   \   000035   12....       LCALL   ?Subroutine18 & 0xFFFF
    810            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_12:
   \   000038   12....       LCALL   ?Subroutine27 & 0xFFFF
    811          
    812            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_155:
   \   00003B   2408         ADD     A,#0x8
   \   00003D   FE           MOV     R6,A
   \   00003E   E4           CLR     A
   \   00003F   3D           ADDC    A,R5
   \   000040   FF           MOV     R7,A
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   12....       LCALL   ??Subroutine98_0 & 0xFFFF
    813            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_159:
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   12....       LCALL   ?Subroutine18 & 0xFFFF
    814            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_13:
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   12....       LCALL   ?Subroutine27 & 0xFFFF
    815            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \                     ??CrossCallReturnLabel_156:
   \   000055   240B         ADD     A,#0xb
   \   000057   F582         MOV     DPL,A
   \   000059   E4           CLR     A
   \   00005A   3D           ADDC    A,R5
   \   00005B   F583         MOV     DPH,A
   \   00005D   12....       LCALL   ?Subroutine27 & 0xFFFF
    816            *pBuf = pNodeDesc->DescriptorCapability;
   \                     ??CrossCallReturnLabel_157:
   \   000060   240C         ADD     A,#0xc
   \   000062   F582         MOV     DPL,A
   \   000064   E4           CLR     A
   \   000065   3D           ADDC    A,R5
   \   000066   F583         MOV     DPH,A
   \   000068   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00006B   F0           MOVX    @DPTR,A
    817          
    818            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   00006C                ; Setup parameters for call to function fillAndSend
   \   00006C   75..02       MOV     ?V0,#0x2
   \   00006F   75..80       MOV     ?V1,#-0x80
   \   000072   78..         MOV     R0,#?V0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   7910         MOV     R1,#0x10
   \   000079   EA           MOV     A,R2
   \   00007A   2402         ADD     A,#0x2
   \   00007C   FC           MOV     R4,A
   \   00007D   E4           CLR     A
   \   00007E   3B           ADDC    A,R3
   \   00007F   FD           MOV     R5,A
   \   000080   EA           MOV     A,R2
   \   000081   240F         ADD     A,#0xf
   \   000083   FA           MOV     R2,A
   \   000084   5001         JNC     ??ZDP_NodeDescMsg_0
   \   000086   0B           INC     R3
   \                     ??ZDP_NodeDescMsg_0:
   \   000087   02....       LJMP    ??Subroutine91_0 & 0xFFFF
    819          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine97_0
   \   000001                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   EC           MOV     A,R4
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EC           MOV     A,R4
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   ED           MOV     A,R5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine99_0
   \   000001                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET
    820          
    821          /*********************************************************************
    822           * @fn          ZDP_PowerDescMsg
    823           *
    824           * @brief       Builds and sends a Power Descriptor message, unicast to the
    825           *              specified device.
    826           *
    827           * @param       inMsg - incoming message (request)
    828           * @param       nwkAddr - 16 bit network address for device
    829           * @param       pPowerDesc - pointer to the node descriptor
    830           *
    831           * @return      afStatus_t
    832           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    833          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    834                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    835          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    836            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   12....       LCALL   ??Subroutine103_0 & 0xFFFF
    837            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    838          
    839            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_193:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   12....       LCALL   ?Subroutine36 & 0xFFFF
    840          
    841            *pBuf++ = LO_UINT16( nwkAddr );
    842            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_42:
   \   000013   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000016   740A         MOV     A,#0xa
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine41 & 0xFFFF
    843          
    844            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    845                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_54:
   \   00001E   12....       LCALL   ??Subroutine114_0 & 0xFFFF
    846            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    847                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_233:
   \   000021   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000024   540F         ANL     A,#0xf
   \   000026   F9           MOV     R1,A
   \   000027   740C         MOV     A,#0xc
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?US_SHR
   \   00002E   E5..         MOV     A,?V0
   \   000030   C4           SWAP    A
   \   000031   49           ORL     A,R1
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   F0           MOVX    @DPTR,A
    848          
    849            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..03       MOV     ?V0,#0x3
   \   00003A   75..80       MOV     ?V1,#-0x80
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7905         MOV     R1,#0x5
   \   000044   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000047   02....       LJMP    ??Subroutine91_0 & 0xFFFF
    850          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   0A           INC     R2
   \   000007   AB83         MOV     R3,DPH
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   22           RET
    851          
    852          /*********************************************************************
    853           * @fn          ZDP_SimpleDescMsg
    854           *
    855           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    856           *              specified device.
    857           *
    858           * @param       inMsg - incoming message (request)
    859           * @param       Status - message status (ZDP_SUCCESS or other)
    860           * @param       pSimpleDesc - pointer to the node descriptor
    861           *
    862           * @return      afStatus_t
    863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    865                                        SimpleDescriptionFormat_t *pSimpleDesc )
    866          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   12....       LCALL   ?Subroutine51 & 0xFFFF
    867            uint8 *pBuf = ZDP_TmpBuf;
    868            uint8 i, len;
    869          
    870            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_131:
   \   00000C   EE           MOV     A,R6
   \   00000D   702E         JNZ     ??ZDP_SimpleDescMsg_0
   \   00000F   EC           MOV     A,R4
   \   000010   4D           ORL     A,R5
   \   000011   602A         JZ      ??ZDP_SimpleDescMsg_0
    871            {
    872              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    873              len = 1 + 2 + 1 + 8;
    874              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   000013   8C82         MOV     DPL,R4
   \   000015   8D83         MOV     DPH,R5
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FA           MOV     R2,A
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   2A           ADD     A,R2
   \   00002E   C3           CLR     C
   \   00002F   33           RLC     A
   \   000030   240C         ADD     A,#0xc
   \   000032   FA           MOV     R2,A
    875            }
    876            else
    877            {
    878              len = 1 + 2 + 1; // Status + desc length
    879            }
    880            if ( len >= ZDP_BUF_SZ-1 )
   \   000033   C3           CLR     C
   \   000034   944F         SUBB    A,#0x4f
   \   000036   4007         JC      ??ZDP_SimpleDescMsg_1
    881            {
    882              return afStatus_MEM_FAIL;
   \   000038   7910         MOV     R1,#0x10
   \   00003A   02....       LJMP    ??ZDP_SimpleDescMsg_2 & 0xFFFF
    883            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   00003D   7A04         MOV     R2,#0x4
    884          
    885            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   00003F   12....       LCALL   ?Subroutine11 & 0xFFFF
    886          
    887            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_226:
   \   000042   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000045   12....       LCALL   ??Subroutine98_0 & 0xFFFF
    888            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_160:
   \   000048   90....       MOV     DPTR,#ZDAppNwkAddr + 1
   \   00004B   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
    889          
    890            if ( len > 4 )
   \   000050   EA           MOV     A,R2
   \   000051   C3           CLR     C
   \   000052   9405         SUBB    A,#0x5
   \   000054   5003         JNC     $+5
   \   000056   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    891            {
    892              *pBuf++ = len - 4;   // Simple descriptor length
   \   000059   74FC         MOV     A,#-0x4
   \   00005B   2A           ADD     A,R2
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   08           INC     R0
   \   00005F   08           INC     R0
   \   000060   A983         MOV     R1,DPH
    893          
    894              *pBuf++ = pSimpleDesc->EndPoint;
   \   000062   8C82         MOV     DPL,R4
   \   000064   8D83         MOV     DPH,R5
   \   000066   12....       LCALL   ?Subroutine26 & 0xFFFF
    895              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_166:
   \   000069   8582..       MOV     ?V0,DPL
   \   00006C   8583..       MOV     ?V1,DPH
   \   00006F   12....       LCALL   ?Subroutine14 & 0xFFFF
    896              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
    897              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_6:
   \   000072   EC           MOV     A,R4
   \   000073   2403         ADD     A,#0x3
   \   000075   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000078   12....       LCALL   ?Subroutine14 & 0xFFFF
    898              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
    899          
    900              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \                     ??CrossCallReturnLabel_7:
   \   00007B   8C82         MOV     DPL,R4
   \   00007D   8D83         MOV     DPH,R5
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   540F         ANL     A,#0xf
   \   000087   12....       LCALL   ??Subroutine97_0 & 0xFFFF
    901          
    902              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_158:
   \   00008A   2406         ADD     A,#0x6
   \   00008C   F5..         MOV     ?V0,A
   \   00008E   E4           CLR     A
   \   00008F   3D           ADDC    A,R5
   \   000090   F5..         MOV     ?V1,A
   \   000092   85..82       MOV     DPL,?V0
   \   000095   12....       LCALL   ?Subroutine28 & 0xFFFF
    903              if ( pSimpleDesc->AppNumInClusters )
   \                     ??CrossCallReturnLabel_163:
   \   000098   85..82       MOV     DPL,?V0
   \   00009B   85..83       MOV     DPH,?V1
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   601D         JZ      ??ZDP_SimpleDescMsg_4
    904              {
    905                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000A1   7B00         MOV     R3,#0x0
   \   0000A3   8008         SJMP    ??CrossCallReturnLabel_0
    906                {
    907                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_5:
   \   0000A5   12....       LCALL   ?Subroutine64 & 0xFFFF
    908                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
    909                }
   \                     ??CrossCallReturnLabel_101:
   \   0000A8   2407         ADD     A,#0x7
   \   0000AA   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000AD   8C82         MOV     DPL,R4
   \   0000AF   8D83         MOV     DPH,R5
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   FF           MOV     R7,A
   \   0000B9   EB           MOV     A,R3
   \   0000BA   C3           CLR     C
   \   0000BB   9F           SUBB    A,R7
   \   0000BC   40E7         JC      ??ZDP_SimpleDescMsg_5
    910              }
    911          
    912              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000BE   EC           MOV     A,R4
   \   0000BF   2409         ADD     A,#0x9
   \   0000C1   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   12....       LCALL   ??Subroutine112_0 & 0xFFFF
    913              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_224:
   \   0000C8   85..82       MOV     DPL,?V0
   \   0000CB   85..83       MOV     DPH,?V1
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   6022         JZ      ??ZDP_SimpleDescMsg_6
    914              {
    915                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   0000D1   7B00         MOV     R3,#0x0
   \                     ??ZDP_SimpleDescMsg_7:
   \   0000D3   8C82         MOV     DPL,R4
   \   0000D5   8D83         MOV     DPH,R5
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   FF           MOV     R7,A
   \   0000E2   EB           MOV     A,R3
   \   0000E3   C3           CLR     C
   \   0000E4   9F           SUBB    A,R7
   \   0000E5   500C         JNC     ??ZDP_SimpleDescMsg_6
    916                {
    917                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   0000E7   12....       LCALL   ?Subroutine64 & 0xFFFF
    918                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
    919                }
    920              }
    921            }
   \                     ??CrossCallReturnLabel_102:
   \   0000EA   240A         ADD     A,#0xa
   \   0000EC   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000EF   80E2         SJMP    ??ZDP_SimpleDescMsg_7
    922          
    923            else
    924            {
    925              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   0000F1   E4           CLR     A
   \   0000F2   F0           MOVX    @DPTR,A
    926            }
    927          
    928            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_6:
   \   0000F3                ; Setup parameters for call to function fillAndSend
   \   0000F3   75..04       MOV     ?V0,#0x4
   \   0000F6   75..80       MOV     ?V1,#-0x80
   \   0000F9   78..         MOV     R0,#?V0
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FE   EA           MOV     A,R2
   \   0000FF   F9           MOV     R1,A
   \   000100   E5..         MOV     A,?V2
   \   000102   2402         ADD     A,#0x2
   \   000104   FC           MOV     R4,A
   \   000105   E4           CLR     A
   \   000106   35..         ADDC    A,?V3
   \   000108   FD           MOV     R5,A
   \   000109   E5..         MOV     A,?V2
   \   00010B   240F         ADD     A,#0xf
   \   00010D   FA           MOV     R2,A
   \   00010E   E4           CLR     A
   \   00010F   35..         ADDC    A,?V3
   \   000111   FB           MOV     R3,A
   \   000112   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000115   7402         MOV     A,#0x2
   \   000117   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   00011A                REQUIRE ?Subroutine4
   \   00011A                ; // Fall through to label ?Subroutine4
    929          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   8B..         MOV     ?V0,R3
   \   000002   E5..         MOV     A,?V0
   \   000004   25E0         ADD     A,0xE0 /* A   */
   \   000006   F5..         MOV     ?V0,A
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   F5..         MOV     ?V1,A
   \   00000C   EC           MOV     A,R4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   F5..         MOV     ?V0,A
   \   000002   E4           CLR     A
   \   000003   3D           ADDC    A,R5
   \   000004   F5..         MOV     ?V1,A
   \   000006   85..82       MOV     DPL,?V0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine98_0
   \   000002                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000003   85..82       MOV     DPL,?V0
   \   000006   85..83       MOV     DPH,?V1
   \   000009   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F5..         MOV     ?V4,A
   \   000002   E4           CLR     A
   \   000003   3D           ADDC    A,R5
   \   000004   F5..         MOV     ?V5,A
   \   000006   85..82       MOV     DPL,?V4
   \   000009   F583         MOV     DPH,A
   \   00000B   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00000E   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000011   85..82       MOV     DPL,?V4
   \   000014   85..83       MOV     DPH,?V5
   \   000017   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00001A   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00001D   0B           INC     R3
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0
   \   000003   FF           MOV     R7,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V1
   \   000008   8F82         MOV     DPL,R7
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine112_0
   \   000001                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine113_0
   \   000004                ; // Fall through to label ??Subroutine113_0
    930          
    931          /*********************************************************************
    932           * @fn          ZDP_EPRsp
    933           *
    934           * @brief       This builds and send an endpoint list. Used in
    935           *              Active_EP_rsp and Match_Desc_Rsp
    936           *              message.  This function sends unicast message to the
    937           *              requesting device.
    938           *
    939           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    940           * @param       dstAddr - destination address
    941           * @param       Status - message status (ZDP_SUCCESS or other)
    942           * @param       nwkAddr - Device's short address that this response describes
    943           * @param       Count - number of endpoint/interfaces in list
    944           * @param       pEPIntfList - Array of Endpoint/Interfaces
    945           * @param       SecurityEnable - Security Options
    946           *
    947           * @return      afStatus_t
    948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine95_0
   \   000001                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    949          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    950                                  byte Status, uint16 nwkAddr, byte Count,
    951                                  uint8 *pEPList,
    952                                  byte SecurityEnable )
    953          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   EC           MOV     A,R4
   \   000017   FE           MOV     R6,A
   \   000018   ED           MOV     A,R5
   \   000019   FF           MOV     R7,A
    954            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   12....       LCALL   ??Subroutine103_0 & 0xFFFF
    955            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_194:
   \   00001D   75..04       MOV     ?V0,#0x4
    956            byte txOptions;
    957          
    958            (void)SecurityEnable;  // Intentionally unreferenced parameter
    959          
    960            if ( MsgType == Match_Desc_rsp )
   \   000020   7406         MOV     A,#0x6
   \   000022   65..         XRL     A,?V2
   \   000024   7004         JNZ     ??ZDP_EPRsp_0
   \   000026   7480         MOV     A,#-0x80
   \   000028   65..         XRL     A,?V3
   \                     ??ZDP_EPRsp_0:
   \   00002A   7005         JNZ     ??ZDP_EPRsp_1
    961              txOptions = AF_MSG_ACK_REQUEST;
   \   00002C   75..10       MOV     ?V1,#0x10
   \   00002F   8003         SJMP    ??ZDP_EPRsp_2
    962            else
    963              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000031   75..00       MOV     ?V1,#0x0
    964          
    965              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000034   7410         MOV     A,#0x10
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00003C   7411         MOV     A,#0x11
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ?Subroutine33 & 0xFFFF
    966            *pBuf++ = LO_UINT16( nwkAddr );
    967            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_35:
   \   000044   7413         MOV     A,#0x13
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FC           MOV     R4,A
    968          
    969            *pBuf++ = Count;   // Endpoint/Interface count
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   0A           INC     R2
   \   000052   AB83         MOV     R3,DPH
    970          
    971            if ( Count )
   \   000054   601A         JZ      ??ZDP_EPRsp_3
    972            {
    973              len += Count;
   \   000056   7404         MOV     A,#0x4
   \   000058   2C           ADD     A,R4
   \   000059   F5..         MOV     ?V0,A
    974              osal_memcpy( pBuf, pEPList, Count );
   \   00005B                ; Setup parameters for call to function osal_memcpy
   \   00005B   7414         MOV     A,#0x14
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   12....       LCALL   ?Subroutine45 & 0xFFFF
    975            }
   \                     ??CrossCallReturnLabel_58:
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000066   7D00         MOV     R5,#0x0
   \   000068   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00006B   7403         MOV     A,#0x3
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
    976          
    977            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000070   E5..         MOV     A,?V1
   \   000072   90....       MOV     DPTR,#ZDP_TxOptions
   \   000075   F0           MOVX    @DPTR,A
   \   000076                ; Setup parameters for call to function fillAndSend
   \   000076   78..         MOV     R0,#?V2
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   A9..         MOV     R1,?V0
   \   00007D   EE           MOV     A,R6
   \   00007E   FC           MOV     R4,A
   \   00007F   EF           MOV     A,R7
   \   000080   FD           MOV     R5,A
   \   000081   7402         MOV     A,#0x2
   \   000083   12....       LCALL   ?XSTACK_DISP101_8
   \   000086   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000089   7402         MOV     A,#0x2
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   E9           MOV     A,R1
   \   00008F   F9           MOV     R1,A
   \   000090   90....       MOV     DPTR,#ZDP_TxOptions
   \   000093   E4           CLR     A
   \   000094   F0           MOVX    @DPTR,A
   \   000095   04           INC     A
   \   000096   02....       LJMP    ?Subroutine3 & 0xFFFF
    978          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E9           MOV     A,R1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   0A           INC     R2
   \   000009   0A           INC     R2
   \   00000A   AB83         MOV     R3,DPH
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   75..00       MOV     ?V6,#0x0
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   22           RET
    979          
    980          /*********************************************************************
    981           * @fn          ZDP_UserDescRsp
    982           *
    983           * @brief       Build and send the User Decriptor Response.
    984           *
    985           *
    986           * @param       dstAddr - destination address
    987           * @param       nwkAddrOfInterest -
    988           * @param       userDesc -
    989           * @param       SecurityEnable - Security Options
    990           *
    991           * @return      ZStatus_t
    992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    993          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    994                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    995                          byte SecurityEnable )
    996          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   12....       LCALL   ?Subroutine39 & 0xFFFF
    997            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_246:
   \   000015   7413         MOV     A,#0x13
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00001D   88..         MOV     ?V8,R0
   \   00001F   89..         MOV     ?V9,R1
    998            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    999          
   1000            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1001          
   1002            len += userDesc->len;
   \   000021   8882         MOV     DPL,R0
   \   000023   F583         MOV     DPH,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   2404         ADD     A,#0x4
   \   000028   F5..         MOV     ?V2,A
   1003          
   1004            *pBuf++ = ZSUCCESS;
   \   00002A   85..82       MOV     DPL,?V0
   \   00002D   85..83       MOV     DPH,?V1
   \   000030   12....       LCALL   ?Subroutine36 & 0xFFFF
   1005          
   1006            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   1007            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \                     ??CrossCallReturnLabel_43:
   \   000033   12....       LCALL   ?Subroutine70 & 0xFFFF
   1008          
   1009            *pBuf++ = userDesc->len;
   \                     ??CrossCallReturnLabel_113:
   \   000036   E0           MOVX    A,@DPTR
   \   000037   85..82       MOV     DPL,?V0
   \   00003A   85..83       MOV     DPH,?V1
   \   00003D   12....       LCALL   ?Subroutine12 & 0xFFFF
   1010            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_5:
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000043   85..82       MOV     DPL,?V8
   \   000046   85..83       MOV     DPH,?V9
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FC           MOV     R4,A
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   AA..         MOV     R2,?V0
   \   00004F   AB..         MOV     R3,?V1
   \   000051   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000054   7403         MOV     A,#0x3
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   1011          
   1012            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   000059                ; Setup parameters for call to function fillAndSend
   \   000059   75..11       MOV     ?V0,#0x11
   \   00005C   75..80       MOV     ?V1,#-0x80
   \   00005F   78..         MOV     R0,#?V0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   A9..         MOV     R1,?V2
   \   000066   EE           MOV     A,R6
   \   000067   FC           MOV     R4,A
   \   000068   EF           MOV     A,R7
   \   000069   FD           MOV     R5,A
   \   00006A   7402         MOV     A,#0x2
   \   00006C   12....       LCALL   ?XSTACK_DISP101_8
   \   00006F   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000072   7402         MOV     A,#0x2
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   02....       LJMP    ?Subroutine5 & 0xFFFF
   1013          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine115_0
   \   000005                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1014          
   1015          /*********************************************************************
   1016           * @fn          ZDP_ServerDiscRsp
   1017           *
   1018           * @brief       Build and send the Server_Discovery_rsp response.
   1019           *
   1020           * @param       transID - Transaction sequence number of request.
   1021           * @param       dstAddr - Network Destination Address.
   1022           * @param       status - Status of response to request.
   1023           * @param       aoi - Network Address of Interest of request.
   1024           * @param       serverMask - Bit map of service(s) being sought.
   1025           * @param       SecurityEnable - Security Options
   1026           *
   1027           * @return      ZStatus_t
   1028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1030                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1031          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EC           MOV     A,R4
   \   000013   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   1032            const byte len = 1  + 2;  // status + aoi + mask.
   1033            uint8 *pBuf = ZDP_TmpBuf;
   1034            ZStatus_t stat;
   1035          
   1036            // Intentionally unreferenced parameters
   1037            (void)aoi;
   1038            (void)SecurityEnable;
   1039          
   1040            *pBuf++ = status;
   \                     ??CrossCallReturnLabel_132:
   \   000016   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000019   740D         MOV     A,#0xd
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine43 & 0xFFFF
   1041          
   1042            *pBuf++ = LO_UINT16( serverMask );
   1043            *pBuf++ = HI_UINT16( serverMask );
   1044          
   1045            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??CrossCallReturnLabel_57:
   \   000021   90....       MOV     DPTR,#ZDP_TxOptions
   \   000024   7410         MOV     A,#0x10
   \   000026   F0           MOVX    @DPTR,A
   1046            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000027                ; Setup parameters for call to function fillAndSend
   \   000027   75..15       MOV     ?V0,#0x15
   \   00002A   75..80       MOV     ?V1,#-0x80
   \   00002D   78..         MOV     R0,#?V0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7903         MOV     R1,#0x3
   \   000034   EA           MOV     A,R2
   \   000035   FC           MOV     R4,A
   \   000036   EB           MOV     A,R3
   \   000037   FD           MOV     R5,A
   \   000038   7402         MOV     A,#0x2
   \   00003A   12....       LCALL   ?XSTACK_DISP101_8
   \   00003D   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   E9           MOV     A,R1
   \   000046   F9           MOV     R1,A
   1047            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000047   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004A   E4           CLR     A
   \   00004B   F0           MOVX    @DPTR,A
   1048          
   1049            return ( stat );
   \   00004C   04           INC     A
   \   00004D   02....       LJMP    ??Subroutine92_0 & 0xFFFF
   1050          }
   1051          
   1052          /*********************************************************************
   1053           * @fn          ZDP_GenericRsp
   1054           *
   1055           * @brief       Sends a response message with only the parameter status
   1056           *              byte and the addr of interest for data.
   1057           *              This function sends unicast message to the
   1058           *              requesting device.
   1059           *
   1060           * @param       dstAddr - destination address
   1061           * @param       status  - generic status for response
   1062           * @param       aoi     - address of interest
   1063           * @param       dstAddr - destination address
   1064           * @param       rspId   - response cluster ID
   1065           * @param       SecurityEnable - Security Options
   1066           *
   1067           * @return      afStatus_t
   1068           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1069          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1070                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1071          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   1072            uint8 len;
   1073          
   1074            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1075          
   1076            ZDP_TmpBuf[0] = status;
   \   000012   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000015   EC           MOV     A,R4
   \   000016   F0           MOVX    @DPTR,A
   \   000017   740A         MOV     A,#0xa
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   1077            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_135:
   \   00001F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FC           MOV     R4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F583         MOV     DPH,A
   \   000028   8C82         MOV     DPL,R4
   \   00002A   A3           INC     DPTR
   \   00002B   E8           MOV     A,R0
   \   00002C   12....       LCALL   ?Subroutine19 & 0xFFFF
   1078            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   1079          
   1080            // Length byte
   1081            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_15:
   \   00002F   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   1082            len = 4;
   1083          
   1084            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   740C         MOV     A,#0xc
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00003F   7904         MOV     R1,#0x4
   \   000041   EA           MOV     A,R2
   \   000042   FC           MOV     R4,A
   \   000043   EB           MOV     A,R3
   \   000044   FD           MOV     R5,A
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP101_8
   \   00004A   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000052   7401         MOV     A,#0x1
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057                REQUIRE ?Subroutine6
   \   000057                ; // Fall through to label ?Subroutine6
   1085          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1086          
   1087          /*********************************************************************
   1088           * Binding
   1089           */
   1090          /*********************************************************************
   1091           * @fn          ZDP_EndDeviceBindReq
   1092           *
   1093           * @brief       This builds and sends a End_Device_Bind_req message.
   1094           *              This function sends a unicast message.
   1095           *
   1096           * @param       dstAddr - destination address
   1097           * @param       LocalCoordinator - short address of local coordinator
   1098           * @param       epIntf - Endpoint/Interface of Simple Desc
   1099           * @param       ProfileID - Profile ID
   1100           *
   1101           *   The Input cluster list is the opposite of what you would think.
   1102           *   This is the output cluster list of this device
   1103           * @param       NumInClusters - number of input clusters
   1104           * @param       InClusterList - input cluster ID list
   1105           *
   1106           *   The Output cluster list is the opposite of what you would think.
   1107           *   This is the input cluster list of this device
   1108           * @param       NumOutClusters - number of output clusters
   1109           * @param       OutClusterList - output cluster ID list
   1110           *
   1111           * @param       SecurityEnable - Security Options
   1112           *
   1113           * @return      afStatus_t
   1114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1115          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1116                                           uint16 LocalCoordinator,
   1117                                           byte endPoint,
   1118                                           uint16 ProfileID,
   1119                                           byte NumInClusters, cId_t *InClusterList,
   1120                                           byte NumOutClusters, cId_t *OutClusterList,
   1121                                           byte SecurityEnable )
   1122          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   89..         MOV     ?V3,R1
   1123            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FF           MOV     R7,A
   \   000017   7414         MOV     A,#0x14
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V2,A
   \   00001F   7417         MOV     A,#0x17
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V1,A
   1124            uint8 i, len;
   1125            uint8 *ieeeAddr;
   1126          
   1127            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1128          
   1129            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1130            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1131            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000027   E5..         MOV     A,?V2
   \   000029   25..         ADD     A,?V1
   \   00002B   C3           CLR     C
   \   00002C   33           RLC     A
   \   00002D   240F         ADD     A,#0xf
   \   00002F   F5..         MOV     ?V0,A
   1132          
   1133            if ( len >= ZDP_BUF_SZ-1 )
   \   000031   C3           CLR     C
   \   000032   944F         SUBB    A,#0x4f
   \   000034   4005         JC      ??ZDP_EndDeviceBindReq_0
   1134            {
   1135              return afStatus_MEM_FAIL;
   \   000036   7910         MOV     R1,#0x10
   \   000038   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1136            }
   1137          
   1138            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   00003B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003B   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   00003E   EA           MOV     A,R2
   \   00003F   65..         XRL     A,?V4
   \   000041   7003         JNZ     ??ZDP_EndDeviceBindReq_2
   \   000043   EB           MOV     A,R3
   \   000044   65..         XRL     A,?V5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000046   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1139            {
   1140              return afStatus_INVALID_PARAMETER;
   \   000048   7902         MOV     R1,#0x2
   \   00004A   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1141            }
   1142          
   1143            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   E5..         MOV     A,?V4
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   1144            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000055   E5..         MOV     A,?V5
   \   000057   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   1145          
   1146            ieeeAddr = NLME_GetExtAddr();
   \                     ??CrossCallReturnLabel_202:
   \   00005A                ; Setup parameters for call to function NLME_GetExtAddr
   \   00005A   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   00005D   8A..         MOV     ?V4,R2
   \   00005F   8B..         MOV     ?V5,R3
   \   000061   AC..         MOV     R4,?V4
   \   000063   AD..         MOV     R5,?V5
   1147            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   000065                ; Setup parameters for call to function sAddrExtCpy
   \   000065   EE           MOV     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   EF           MOV     A,R7
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00006C   8A..         MOV     ?V4,R2
   \   00006E   8B..         MOV     ?V5,R3
   \   000070   AE..         MOV     R6,?V4
   \   000072   AF..         MOV     R7,?V5
   1148          
   1149            *pBuf++ = endPoint;
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   E5..         MOV     A,?V3
   \   00007A   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   00007D   7412         MOV     A,#0x12
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   12....       LCALL   ?Subroutine50 & 0xFFFF
   1150          
   1151            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_68:
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   1152            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_254:
   \   00008C   A3           INC     DPTR
   1153          
   1154            *pBuf++ = NumInClusters; // Input cluster list
   \   00008D   E5..         MOV     A,?V2
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   0E           INC     R6
   \   000092   0E           INC     R6
   \   000093   0E           INC     R6
   \   000094   AF83         MOV     R7,DPH
   1155            for ( i = 0; i < NumInClusters; ++i )
   \   000096   7C00         MOV     R4,#0x0
   \   000098   7415         MOV     A,#0x15
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000A0   8003         SJMP    ??CrossCallReturnLabel_8
   1156            {
   1157              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000A2   12....       LCALL   ?Subroutine15 & 0xFFFF
   1158              *pBuf++ = HI_UINT16(InClusterList[i]);
   1159            }
   \                     ??CrossCallReturnLabel_8:
   \   0000A5   EC           MOV     A,R4
   \   0000A6   C3           CLR     C
   \   0000A7   95..         SUBB    A,?V2
   \   0000A9   40F7         JC      ??ZDP_EndDeviceBindReq_4
   1160          
   1161            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   E5..         MOV     A,?V1
   \   0000B1   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   1162            for ( i = 0; i < NumOutClusters; ++i )
   \                     ??CrossCallReturnLabel_204:
   \   0000B4   7C00         MOV     R4,#0x0
   \   0000B6   7418         MOV     A,#0x18
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000BE   8003         SJMP    ??CrossCallReturnLabel_9
   1163            {
   1164              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0000C0   12....       LCALL   ?Subroutine15 & 0xFFFF
   1165              *pBuf++ = HI_UINT16(OutClusterList[i]);
   1166            }
   \                     ??CrossCallReturnLabel_9:
   \   0000C3   EC           MOV     A,R4
   \   0000C4   C3           CLR     C
   \   0000C5   95..         SUBB    A,?V1
   \   0000C7   40F7         JC      ??ZDP_EndDeviceBindReq_5
   1167          
   1168            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   0000C9                ; Setup parameters for call to function fillAndSend
   \   0000C9   75..20       MOV     ?V4,#0x20
   \   0000CC   75..00       MOV     ?V5,#0x0
   \   0000CF   78..         MOV     R0,#?V4
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D4   A9..         MOV     R1,?V0
   \   0000D6   AC..         MOV     R4,?V6
   \   0000D8   AD..         MOV     R5,?V7
   \   0000DA   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000DC   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000DE   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000E1   7402         MOV     A,#0x2
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   0000E6   02....       LJMP    ??Subroutine115_0 & 0xFFFF
   1169          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003   E8           MOV     A,R0
   \   000004   FA           MOV     R2,A
   \   000005   E9           MOV     A,R1
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   EC           MOV     A,R4
   \   000001   25E0         ADD     A,0xE0 /* A   */
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   F9           MOV     R1,A
   \   000007   EA           MOV     A,R2
   \   000008   28           ADD     A,R0
   \   000009   F8           MOV     R0,A
   \   00000A   EB           MOV     A,R3
   \   00000B   39           ADDC    A,R1
   \   00000C   F9           MOV     R1,A
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
   \   000011   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   AE82         MOV     R6,DPL
   \   000018   AF83         MOV     R7,DPH
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   A3           INC     DPTR
   \   00001F   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000022   0C           INC     R4
   \   000023   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AE82         MOV     R6,DPL
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   0E           INC     R6
   \   000006   AF83         MOV     R7,DPH
   \   000008   22           RET
   1170          
   1171          /*********************************************************************
   1172           * @fn          ZDP_BindUnbindReq
   1173           *
   1174           * @brief       This builds and send a Bind_req or Unbind_req message
   1175           *              Depending on the ClusterID. This function
   1176           *              sends a unicast message to the local coordinator.
   1177           *
   1178           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1179           * @param       dstAddr - destination address of the message
   1180           * @param       SourceAddr - source 64 bit address of the binding
   1181           * @param       SrcEPIntf - Source endpoint/interface
   1182           * @param       ClusterID - Binding cluster ID
   1183           * @param       DestinationAddr - destination 64 bit addr of binding
   1184           * @param       DstEPIntf - destination endpoint/interface
   1185           * @param       SecurityEnable - Security Options
   1186           *
   1187           * @return      afStatus_t
   1188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1189          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1190                                        uint8 *SourceAddr, byte SrcEndPoint,
   1191                                        cId_t ClusterID,
   1192                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1193                                        byte SecurityEnable )
   1194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   E9           MOV     A,R1
   \   00000E   FF           MOV     R7,A
   1195            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   1196            byte len;
   1197          
   1198            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1199          
   1200            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1201            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_195:
   \   000012   7E0C         MOV     R6,#0xc
   \   000014   7414         MOV     A,#0x14
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   1202            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_250:
   \   00001C   85..82       MOV     DPL,?V0
   \   00001F   F583         MOV     DPH,A
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6403         XRL     A,#0x3
   \   00002C   7004         JNZ     ??ZDP_BindUnbindReq_0
   1203              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   00002E   7E15         MOV     R6,#0x15
   \   000030   8015         SJMP    ??ZDP_BindUnbindReq_1
   1204            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000032   85..82       MOV     DPL,?V0
   \   000035   85..83       MOV     DPH,?V1
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6401         XRL     A,#0x1
   \   000043   7002         JNZ     ??ZDP_BindUnbindReq_1
   1205              len += sizeof ( uint16 );
   \   000045   7E0E         MOV     R6,#0xe
   1206          
   1207            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   000047                ; Setup parameters for call to function sAddrExtCpy
   \   000047   7410         MOV     A,#0x10
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00004F   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1208            *pBuf++ = SrcEndPoint;
   \   000052   EF           MOV     A,R7
   \   000053   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000056   7412         MOV     A,#0x12
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ?Subroutine33 & 0xFFFF
   1209          
   1210            *pBuf++ = LO_UINT16( ClusterID );
   1211          
   1212            *pBuf++ = HI_UINT16( ClusterID );
   1213            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_36:
   \   00005E   E5..         MOV     A,?V0
   \   000060   2408         ADD     A,#0x8
   \   000062   F8           MOV     R0,A
   \   000063   E4           CLR     A
   \   000064   35..         ADDC    A,?V1
   \   000066   12....       LCALL   ?Subroutine29 & 0xFFFF
   1214            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_26:
   \   000069   7017         JNZ     ??ZDP_BindUnbindReq_2
   1215            {
   1216              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1217              *pBuf = DstEndPoint;
   \   00006B   7416         MOV     A,#0x16
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   E0           MOVX    A,@DPTR
   \   000071   C0E0         PUSH    A
   \   000073                ; Setup parameters for call to function sAddrExtCpy
   \   000073   AC..         MOV     R4,?V0
   \   000075   AD..         MOV     R5,?V1
   \   000077   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00007A   8A82         MOV     DPL,R2
   \   00007C   8B83         MOV     DPH,R3
   \   00007E   D0E0         POP     A
   \   000080   802B         SJMP    ??CrossCallReturnLabel_81
   1218            }
   1219            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_2:
   \   000082   85..82       MOV     DPL,?V0
   \   000085   85..83       MOV     DPH,?V1
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   6401         XRL     A,#0x1
   \   000093   7019         JNZ     ??ZDP_BindUnbindReq_3
   1220            {
   1221              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   000095   85..82       MOV     DPL,?V0
   \   000098   85..83       MOV     DPH,?V1
   \   00009B   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   0A           INC     R2
   \   0000A1   AB83         MOV     R3,DPH
   1222              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \   0000A3   85..82       MOV     DPL,?V0
   \   0000A6   85..83       MOV     DPH,?V1
   \   0000A9   A3           INC     DPTR
   \   0000AA   12....       LCALL   ?Subroutine56 & 0xFFFF
   1223            }
   \                     ??CrossCallReturnLabel_81:
   \   0000AD   F0           MOVX    @DPTR,A
   1224          
   1225            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_3:
   \   0000AE   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000B1   7410         MOV     A,#0x10
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4                ; Setup parameters for call to function fillAndSend
   \   0000B4   78..         MOV     R0,#?V4
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B9   EE           MOV     A,R6
   \   0000BA   F9           MOV     R1,A
   \   0000BB   AC..         MOV     R4,?V2
   \   0000BD   AD..         MOV     R5,?V3
   \   0000BF   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000C1   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000C3   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000C6   7402         MOV     A,#0x2
   \   0000C8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CB   E9           MOV     A,R1
   \   0000CC   F9           MOV     R1,A
   \   0000CD   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000D0   E4           CLR     A
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   02....       LJMP    ?Subroutine4 & 0xFFFF
   1226          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   6403         XRL     A,#0x3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   F9           MOV     R1,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006                REQUIRE ??Subroutine114_0
   \   000006                ; // Fall through to label ??Subroutine114_0
   1227          
   1228          /*********************************************************************
   1229           * Network Management
   1230           */
   1231          
   1232          /*********************************************************************
   1233           * @fn          ZDP_MgmtNwkDiscReq
   1234           *
   1235           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1236           *              function sends a unicast message.
   1237           *
   1238           * @param       dstAddr - destination address of the message
   1239           * @param       ScanChannels - 32 bit address bit map
   1240           * @param       StartIndex - Starting index within the reporting network
   1241           *                           list
   1242           * @param       SecurityEnable - Security Options
   1243           *
   1244           * @return      afStatus_t
   1245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1246          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1247                                         uint32 ScanChannels,
   1248                                         byte ScanDuration,
   1249                                         byte StartIndex,
   1250                                         byte SecurityEnable )
   1251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
   \   00000B   8C..         MOV     ?V1,R4
   1252            uint8 *pBuf = ZDP_TmpBuf;
   1253            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1254          
   1255            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1256          
   1257            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV     A,#0xc
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000015   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000018   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   1258          
   1259            *pBuf++ = ScanDuration;
   \   000024   E5..         MOV     A,?V0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   1260            *pBuf = StartIndex;
   \   000028   E5..         MOV     A,?V1
   \   00002A   F0           MOVX    @DPTR,A
   1261          
   1262            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   00002B                ; Setup parameters for call to function fillAndSend
   \   00002B   75..30       MOV     ?V2,#0x30
   \   00002E   75..00       MOV     ?V3,#0x0
   \   000031   78..         MOV     R0,#?V2
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7906         MOV     R1,#0x6
   \   000038   80..         SJMP    ??Subroutine105_0
   1263          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   EE           MOV     A,R6
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00000B   7402         MOV     A,#0x2
   \   00000D                REQUIRE ??Subroutine106_0
   \   00000D                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine107_0
   \   000003                ; // Fall through to label ??Subroutine107_0
   1264          
   1265          /*********************************************************************
   1266           * @fn          ZDP_MgmtDirectJoinReq
   1267           *
   1268           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1269           *              function sends a unicast message.
   1270           *
   1271           * @param       dstAddr - destination address of the message
   1272           * @param       deviceAddr - 64 bit IEEE Address
   1273           * @param       SecurityEnable - Security Options
   1274           *
   1275           * @return      afStatus_t
   1276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   89..         MOV     ?V0,R1
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                REQUIRE ??Subroutine103_0
   \   000006                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..00       MOV     ?V3,#0x0
   \   000003   78..         MOV     R0,#?V2
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV     R1,#0x9
   \   00000A                REQUIRE ??Subroutine105_0
   \   00000A                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1277          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1278                                         uint8 *deviceAddr,
   1279                                         byte capInfo,
   1280                                         byte SecurityEnable )
   1281          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine54 & 0xFFFF
   1282            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1283          
   1284            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \                     ??CrossCallReturnLabel_188:
   \   000008   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1285            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   00000B   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00000E   E5..         MOV     A,?V0
   \   000010   F0           MOVX    @DPTR,A
   1286          
   1287            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000011                ; Setup parameters for call to function fillAndSend
   \   000011   75..35       MOV     ?V2,#0x35
   \   000014   80..         SJMP    ?Subroutine1
   1288          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   C8           XCH     A,R0
   \   000004   2408         ADD     A,#0x8
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   38           ADDC    A,R0
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET
   1289          
   1290          /*********************************************************************
   1291           * @fn          ZDP_MgmtPermitJoinReq
   1292           *
   1293           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1294           *
   1295           * @param       dstAddr - destination address of the message
   1296           * @param       duration - Permit duration
   1297           * @param       TcSignificance - Trust Center Significance
   1298           *
   1299           * @return      afStatus_t
   1300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1301          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1302                                            byte TcSignificance, byte SecurityEnable )
   1303          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1304            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1305          
   1306            // Build buffer
   1307            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   000005   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000008   E9           MOV     A,R1
   \   000009   12....       LCALL   ?Subroutine24 & 0xFFFF
   1308            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_23:
   \   00000C   EC           MOV     A,R4
   \   00000D   F0           MOVX    @DPTR,A
   1309          
   1310            // Send the message
   1311            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1312                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00000E                ; Setup parameters for call to function fillAndSend
   \   00000E   75..36       MOV     ?V0,#0x36
   \   000011   02....       LJMP    ?Subroutine2 & 0xFFFF
   1313          }
   1314          
   1315          /*********************************************************************
   1316           * @fn          ZDP_MgmtLeaveReq
   1317           *
   1318           * @brief       This builds and send a Mgmt_Leave_req message.
   1319           *
   1320           * @param       dstAddr - destination address of the message
   1321           *              IEEEAddr - IEEE adddress of device that is removed
   1322           *              RemoveChildren - set to 1 to remove the children of the
   1323           *                                device as well. 0 otherwise.
   1324           *              Rejoin - set to 1 if the removed device should rejoin
   1325                                   afterwards. 0 otherwise.
   1326           *
   1327           * @return      afStatus_t
   1328           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1329          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1330                           uint8 Rejoin, uint8 SecurityEnable )
   1331          
   1332          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine54 & 0xFFFF
   1333            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1334          
   1335            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \                     ??CrossCallReturnLabel_189:
   \   000008   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1336            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   00000B   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
   1337          
   1338            if ( RemoveChildren == TRUE )
   \   000010   04           INC     A
   \   000011   65..         XRL     A,?V0
   \   000013   7006         JNZ     ??ZDP_MgmtLeaveReq_0
   1339            {
   1340              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000015   12....       LCALL   ?Subroutine40 & 0xFFFF
   1341            }
   \                     ??CrossCallReturnLabel_51:
   \   000018   7440         MOV     A,#0x40
   \   00001A   F0           MOVX    @DPTR,A
   1342            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   00001B   740C         MOV     A,#0xc
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6401         XRL     A,#0x1
   \   000023   7007         JNZ     ??ZDP_MgmtLeaveReq_1
   1343            {
   1344              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   000025   12....       LCALL   ?Subroutine40 & 0xFFFF
   1345            }
   \                     ??CrossCallReturnLabel_52:
   \   000028   E0           MOVX    A,@DPTR
   \   000029   D2E7         SETB    0xE0 /* A   */.7
   \   00002B   F0           MOVX    @DPTR,A
   1346          
   1347            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   00002C                ; Setup parameters for call to function fillAndSend
   \   00002C   75..34       MOV     ?V2,#0x34
   \   00002F   02....       LJMP    ?Subroutine1 & 0xFFFF
   1348          }
   1349          
   1350          /*********************************************************************
   1351           * @fn          ZDP_MgmtNwkUpdateReq
   1352           *
   1353           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1354           *              function sends a unicast or broadcast message.
   1355           *
   1356           * @param       dstAddr - destination address of the message
   1357           * @param       ChannelMask - 32 bit address bit map
   1358           * @param       ScanDuration - length of time to spend scanning each channel
   1359           * @param       ScanCount - number of energy scans to be conducted
   1360           * @param       NwkUpdateId - NWk Update Id value
   1361           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1362           *                               bit set in its Node Descriptor
   1363           *
   1364           * @return      afStatus_t
   1365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1366          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1367                                           uint32 ChannelMask,
   1368                                           uint8 ScanDuration,
   1369                                           uint8 ScanCount,
   1370                                           uint8 NwkUpdateId,
   1371                                           uint16 NwkManagerAddr )
   1372          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V2,R4
   \   00000D   8D..         MOV     ?V3,R5
   1373            uint8 *pBuf = ZDP_TmpBuf;
   1374            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   7E05         MOV     R6,#0x5
   1375          
   1376            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000011                ; Setup parameters for call to function osal_buffer_uint32
   \   000011   740E         MOV     A,#0xe
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000019   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00001C   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   8A..         MOV     ?V4,R2
   \   000026   8B..         MOV     ?V5,R3
   \   000028   A8..         MOV     R0,?V4
   \   00002A   A9..         MOV     R1,?V5
   1377          
   1378            *pBuf++ = ScanDuration;
   \   00002C   EF           MOV     A,R7
   \   00002D   8882         MOV     DPL,R0
   \   00002F   8983         MOV     DPH,R1
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   1379          
   1380            if ( ScanDuration <= 0x05 )
   \   000033   C3           CLR     C
   \   000034   9406         SUBB    A,#0x6
   \   000036   5006         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1381            {
   1382              // Request is to scan over channelMask
   1383              len += sizeof( uint8 );
   \   000038   7E06         MOV     R6,#0x6
   1384          
   1385              *pBuf++ = ScanCount;
   \   00003A   E5..         MOV     A,?V2
   \   00003C   8027         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1386            }
   1387            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   00003E   74FE         MOV     A,#-0x2
   \   000040   6F           XRL     A,R7
   \   000041   6005         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   000043   74FF         MOV     A,#-0x1
   \   000045   6F           XRL     A,R7
   \   000046   701E         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1388            {
   1389              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1390              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000048   7E06         MOV     R6,#0x6
   1391          
   1392              *pBuf++ = NwkUpdateId;
   \   00004A   E5..         MOV     A,?V3
   \   00004C   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   1393          
   1394              if ( ScanDuration == 0xFF )
   \                     ??CrossCallReturnLabel_222:
   \   00004F   74FF         MOV     A,#-0x1
   \   000051   6F           XRL     A,R7
   \   000052   7012         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1395              {
   1396                len += sizeof( uint16 );
   \   000054   7E08         MOV     R6,#0x8
   \   000056   7412         MOV     A,#0x12
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ?Subroutine53 & 0xFFFF
   1397          
   1398                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \                     ??CrossCallReturnLabel_73:
   \   00005E   8882         MOV     DPL,R0
   \   000060   8983         MOV     DPH,R1
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   1399                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   000064   EB           MOV     A,R3
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   000065   F0           MOVX    @DPTR,A
   1400              }
   1401            }
   1402          
   1403            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_3:
   \   000066                ; Setup parameters for call to function fillAndSend
   \   000066   75..38       MOV     ?V4,#0x38
   \   000069   75..00       MOV     ?V5,#0x0
   \   00006C   78..         MOV     R0,#?V4
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   EE           MOV     A,R6
   \   000072   F9           MOV     R1,A
   \   000073   AC..         MOV     R4,?V0
   \   000075   AD..         MOV     R5,?V1
   \   000077   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000079   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00007B   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00007E   7402         MOV     A,#0x2
   \   000080                REQUIRE ?Subroutine0
   \   000080                ; // Fall through to label ?Subroutine0
   1404          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET
   1405          
   1406          
   1407          /*********************************************************************
   1408           * Network Management Responses
   1409           */
   1410          
   1411          /*********************************************************************
   1412           * @fn          ZDP_MgmtNwkDiscRsp
   1413           *
   1414           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1415           *              function sends a unicast message.
   1416           *
   1417           * @param       dstAddr - destination address of the message
   1418           * @param       Status - message status (ZDP_SUCCESS or other)
   1419           * @param       NetworkCount - Total number of networks found
   1420           * @param       StartIndex - Starting index within the reporting network
   1421           *                           list
   1422           * @param       NetworkListCount - number of network lists included
   1423           *                                 in this message
   1424           * @param       NetworkList - List of network descriptors
   1425           * @param       SecurityEnable - Security Options
   1426           *
   1427           * @return      afStatus_t
   1428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1429          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1430                                      byte Status,
   1431                                      byte NetworkCount,
   1432                                      byte StartIndex,
   1433                                      byte NetworkListCount,
   1434                                      networkDesc_t *NetworkList,
   1435                                      byte SecurityEnable )
   1436          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V10,R2
   \   000014   8B..         MOV     ?V11,R3
   \   000016   8C..         MOV     ?V8,R4
   \   000018   8D..         MOV     ?V6,R5
   \   00001A   7416         MOV     A,#0x16
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V4,A
   1437            uint8 *buf;
   1438            uint8 *pBuf;
   1439            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1440            byte idx;
   1441          
   1442            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1443          
   1444            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   000022   75F00C       MOV     B,#0xc
   \   000025   12....       LCALL   ?Subroutine59 & 0xFFFF
   1445          
   1446            buf = osal_mem_alloc( len+1 );
   \                     ??CrossCallReturnLabel_234:
   \   000028   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00002B   8A..         MOV     ?V0,R2
   \   00002D   8B..         MOV     ?V1,R3
   1447            if ( buf == NULL )
   \   00002F   EA           MOV     A,R2
   \   000030   45..         ORL     A,?V1
   \   000032   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1448            {
   1449              return afStatus_MEM_FAIL;
   \   000034   7910         MOV     R1,#0x10
   \   000036   02....       LJMP    ??CrossCallReturnLabel_32 & 0xFFFF
   1450            }
   1451          
   1452            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   A3           INC     DPTR
   1453          
   1454            *pBuf++ = Status;
   \   00003E   E5..         MOV     A,?V8
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   1455            *pBuf++ = NetworkCount;
   \   000042   E5..         MOV     A,?V6
   \   000044   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   1456            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_205:
   \   000047   7415         MOV     A,#0x15
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00004F   12....       LCALL   ?Subroutine37 & 0xFFFF
   1457            *pBuf++ = NetworkListCount;
   \                     ??CrossCallReturnLabel_44:
   \   000052   0E           INC     R6
   \   000053   0E           INC     R6
   \   000054   AF83         MOV     R7,DPH
   1458          
   1459            for ( idx = 0; idx < NetworkListCount; idx++ )
   \   000056   75..00       MOV     ?V7,#0x0
   \   000059   7417         MOV     A,#0x17
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000061   8014         SJMP    ??ZDP_MgmtNwkDiscRsp_1
   1460            {
   1461              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1462              pBuf += Z_EXTADDR_LEN;
   1463          
   1464              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1465              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1466              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1467              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1468              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   1469          
   1470              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1471              {
   1472                *pBuf++ = TRUE;                         // Permit Joining
   1473              }
   1474              else
   1475              {
   1476                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   000063   E4           CLR     A
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   0E           INC     R6
   \   000067   AF83         MOV     R7,DPH
   1477              }
   1478          
   1479              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   000069   E5..         MOV     A,?V2
   \   00006B   2414         ADD     A,#0x14
   \   00006D   F582         MOV     DPL,A
   \   00006F   E4           CLR     A
   \   000070   35..         ADDC    A,?V3
   \   000072   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000075   05..         INC     ?V7
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   000077   E5..         MOV     A,?V7
   \   000079   C3           CLR     C
   \   00007A   95..         SUBB    A,?V4
   \   00007C   507C         JNC     ??ZDP_MgmtNwkDiscRsp_4
   \   00007E                ; Setup parameters for call to function sAddrExtCpy
   \   00007E   E5..         MOV     A,?V2
   \   000080   240B         ADD     A,#0xb
   \   000082   FC           MOV     R4,A
   \   000083   E4           CLR     A
   \   000084   35..         ADDC    A,?V3
   \   000086   FD           MOV     R5,A
   \   000087   EE           MOV     A,R6
   \   000088   FA           MOV     R2,A
   \   000089   EF           MOV     A,R7
   \   00008A   FB           MOV     R3,A
   \   00008B   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00008E   EE           MOV     A,R6
   \   00008F   2408         ADD     A,#0x8
   \   000091   FE           MOV     R6,A
   \   000092   5001         JNC     ??ZDP_MgmtNwkDiscRsp_5
   \   000094   0F           INC     R7
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   000095   85..82       MOV     DPL,?V2
   \   000098   85..83       MOV     DPH,?V3
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   0000A0   85..82       MOV     DPL,?V2
   \   0000A3   85..83       MOV     DPH,?V3
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000AF   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000B2   85..82       MOV     DPL,?V2
   \   0000B5   85..83       MOV     DPH,?V3
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000C0   8E82         MOV     DPL,R6
   \   0000C2   8F83         MOV     DPH,R7
   \   0000C4   740F         MOV     A,#0xf
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   08           INC     R0
   \   0000C8   EF           MOV     A,R7
   \   0000C9   F9           MOV     R1,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   0E           INC     R6
   \   0000CC   AF83         MOV     R7,DPH
   \   0000CE   8882         MOV     DPL,R0
   \   0000D0   8983         MOV     DPH,R1
   \   0000D2   740F         MOV     A,#0xf
   \   0000D4   44F0         ORL     A,#0xf0
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   85..82       MOV     DPL,?V2
   \   0000DA   85..83       MOV     DPH,?V3
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   64FE         XRL     A,#0xfe
   \   0000E7   7003         JNZ     ??ZDP_MgmtNwkDiscRsp_6
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F4           CPL     A
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   7003         JNZ     $+5
   \   0000F2   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
   \   0000F5   7401         MOV     A,#0x1
   \   0000F7   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   1480            }
   1481          
   1482            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   0000FA   85..82       MOV     DPL,?V0
   \   0000FD   85..83       MOV     DPH,?V1
   \   000100   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000103                ; Setup parameters for call to function fillAndSend
   \   000103   75..30       MOV     ?V2,#0x30
   \   000106   75..80       MOV     ?V3,#-0x80
   \   000109   78..         MOV     R0,#?V2
   \   00010B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010E   A9..         MOV     R1,?V5
   \   000110   AC..         MOV     R4,?V10
   \   000112   AD..         MOV     R5,?V11
   \   000114   7402         MOV     A,#0x2
   \   000116   12....       LCALL   ?XSTACK_DISP101_8
   \   000119   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00011C   7402         MOV     A,#0x2
   \   00011E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000121   E9           MOV     A,R1
   \   000122   FE           MOV     R6,A
   \   000123                ; Setup parameters for call to function osal_mem_free
   \   000123   AA..         MOV     R2,?V0
   \   000125   AB..         MOV     R3,?V1
   \   000127   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00012A   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00012D                REQUIRE ?Subroutine7
   \   00012D                ; // Fall through to label ?Subroutine7
   1483          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F0C         MOV     R7,#0xc
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000003                REQUIRE ??Subroutine110_0
   \   000003                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C4           SWAP    A
   \   000002   54F0         ANL     A,#0xf0
   \   000004   FA           MOV     R2,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   4A           ORL     A,R2
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   F8           MOV     R0,A
   \   000003   EF           MOV     A,R7
   \   000004   F9           MOV     R1,A
   \   000005   A3           INC     DPTR
   \   000006   0E           INC     R6
   \   000007   AF83         MOV     R7,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E5..         MOV     A,?V4
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   A4           MUL     AB
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V5,A
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                REQUIRE ??Subroutine116_0
   \   000005                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   2401         ADD     A,#0x1
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   3400         ADDC    A,#0x0
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   A3           INC     DPTR
   \   000001   A882         MOV     R0,DPL
   \   000003   A983         MOV     R1,DPH
   \   000005   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000008                REQUIRE ??Subroutine121_0
   \   000008                ; // Fall through to label ??Subroutine121_0
   1484          
   1485          /*********************************************************************
   1486           * @fn          ZDP_MgmtLqiRsp
   1487           *
   1488           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1489           *              function sends a unicast message.
   1490           *
   1491           * @param       dstAddr - destination address of the message
   1492           * @param       Status - message status (ZDP_SUCCESS or other)
   1493           * @param       NeighborLqiEntries - Total number of entries found
   1494           * @param       StartIndex - Starting index within the reporting list
   1495           * @param       NeighborLqiCount - number of lists included
   1496           *                                 in this message
   1497           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1498           *                is the list to be sent, not the entire list
   1499           * @param       SecurityEnable - true if secure
   1500           *
   1501           * @return      ZStatus_t
   1502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1503          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1504                                    byte Status,
   1505                                    byte NeighborLqiEntries,
   1506                                    byte StartIndex,
   1507                                    byte NeighborLqiCount,
   1508                                    ZDP_MgmtLqiItem_t* NeighborList,
   1509                                    byte SecurityEnable )
   1510          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V10,R2
   \   000014   8B..         MOV     ?V11,R3
   \   000016   8D..         MOV     ?V12,R5
   1511            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000018   7418         MOV     A,#0x18
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   1512            uint8 *buf, *pBuf;
   1513            byte len, x;
   1514          
   1515            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1516          
   1517            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_251:
   \   000020   EC           MOV     A,R4
   \   000021   6026         JZ      ??ZDP_MgmtLqiRsp_0
   1518            {
   1519              ZDP_TmpBuf[0] = Status;
   \   000023   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000026   EC           MOV     A,R4
   \   000027   F0           MOVX    @DPTR,A
   1520              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   000028                ; Setup parameters for call to function fillAndSend
   \   000028   75..31       MOV     ?V0,#0x31
   \   00002B   75..80       MOV     ?V1,#-0x80
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7901         MOV     R1,#0x1
   \   000035   AC..         MOV     R4,?V10
   \   000037   AD..         MOV     R5,?V11
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP101_8
   \   00003E   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   \   000046   02....       LJMP    ??CrossCallReturnLabel_33 & 0xFFFF
   1521            }
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000049   7417         MOV     A,#0x17
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V5,A
   1522          
   1523            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1524            //  neighbor LQI data.
   1525            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   000051   75F016       MOV     B,#0x16
   \   000054   A4           MUL     AB
   \   000055   2404         ADD     A,#0x4
   \   000057   F5..         MOV     ?V6,A
   1526          
   1527            buf = osal_mem_alloc( len+1 );
   \   000059                ; Setup parameters for call to function osal_mem_alloc
   \   000059   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00005C   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00005F   8A..         MOV     ?V2,R2
   \   000061   8B..         MOV     ?V3,R3
   1528            if ( buf == NULL )
   \   000063   EA           MOV     A,R2
   \   000064   45..         ORL     A,?V3
   \   000066   7005         JNZ     ??ZDP_MgmtLqiRsp_1
   1529            {
   1530              return afStatus_MEM_FAIL;
   \   000068   7910         MOV     R1,#0x10
   \   00006A   02....       LJMP    ??CrossCallReturnLabel_33 & 0xFFFF
   1531            }
   1532          
   1533            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_1:
   \   00006D   8A82         MOV     DPL,R2
   \   00006F   8B83         MOV     DPH,R3
   \   000071   A3           INC     DPTR
   1534          
   1535            *pBuf++ = Status;
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   1536            *pBuf++ = NeighborLqiEntries;
   \   000075   E5..         MOV     A,?V12
   \   000077   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   1537            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_206:
   \   00007A   7416         MOV     A,#0x16
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   1538            *pBuf++ = NeighborLqiCount;
   \   000084   E5..         MOV     A,?V5
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   0E           INC     R6
   \   000089   0E           INC     R6
   \   00008A   AF83         MOV     R7,DPH
   1539          
   1540            for ( x = 0; x < NeighborLqiCount; x++ )
   \   00008C   75..00       MOV     ?V4,#0x0
   \   00008F   02....       LJMP    ??ZDP_MgmtLqiRsp_2 & 0xFFFF
   1541            {
   1542              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_3:
   \   000092                ; Setup parameters for call to function sAddrExtCpy
   \   000092   E5..         MOV     A,?V0
   \   000094   2402         ADD     A,#0x2
   \   000096   FC           MOV     R4,A
   \   000097   E4           CLR     A
   \   000098   35..         ADDC    A,?V1
   \   00009A   FD           MOV     R5,A
   \   00009B   EE           MOV     A,R6
   \   00009C   FA           MOV     R2,A
   \   00009D   EF           MOV     A,R7
   \   00009E   FB           MOV     R3,A
   \   00009F   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1543              pBuf += Z_EXTADDR_LEN;
   1544          
   1545              // EXTADDR
   1546              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   0000A2                ; Setup parameters for call to function sAddrExtCpy
   \   0000A2   E5..         MOV     A,?V0
   \   0000A4   240A         ADD     A,#0xa
   \   0000A6   FC           MOV     R4,A
   \   0000A7   E4           CLR     A
   \   0000A8   35..         ADDC    A,?V1
   \   0000AA   FD           MOV     R5,A
   \   0000AB   EE           MOV     A,R6
   \   0000AC   2408         ADD     A,#0x8
   \   0000AE   FA           MOV     R2,A
   \   0000AF   E4           CLR     A
   \   0000B0   3F           ADDC    A,R7
   \   0000B1   FB           MOV     R3,A
   \   0000B2   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0000B5   8A..         MOV     ?V8,R2
   \   0000B7   8B..         MOV     ?V9,R3
   \   0000B9   AE..         MOV     R6,?V8
   \   0000BB   AF..         MOV     R7,?V9
   1547          
   1548              // NWKADDR
   1549              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000BD   E5..         MOV     A,?V0
   \   0000BF   2412         ADD     A,#0x12
   \   0000C1   F8           MOV     R0,A
   \   0000C2   E4           CLR     A
   \   0000C3   35..         ADDC    A,?V1
   \   0000C5   F9           MOV     R1,A
   \   0000C6   8882         MOV     DPL,R0
   \   0000C8   8983         MOV     DPH,R1
   \   0000CA   12....       LCALL   ?Subroutine16 & 0xFFFF
   1550              *pBuf++ = HI_UINT16( list->nwkAddr );
   \                     ??CrossCallReturnLabel_208:
   \   0000CD   8882         MOV     DPL,R0
   \   0000CF   8983         MOV     DPH,R1
   \   0000D1   A3           INC     DPTR
   \   0000D2   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   1551          
   1552              // DEVICETYPE
   1553              *pBuf = list->devType;
   \                     ??CrossCallReturnLabel_212:
   \   0000D5   2414         ADD     A,#0x14
   \   0000D7   F582         MOV     DPL,A
   \   0000D9   E4           CLR     A
   \   0000DA   35..         ADDC    A,?V1
   \   0000DC   F583         MOV     DPH,A
   \   0000DE   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000E1   F0           MOVX    @DPTR,A
   1554          
   1555              // RXONIDLE
   1556              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \   0000E2   E5..         MOV     A,?V0
   \   0000E4   2415         ADD     A,#0x15
   \   0000E6   F582         MOV     DPL,A
   \   0000E8   E4           CLR     A
   \   0000E9   35..         ADDC    A,?V1
   \   0000EB   F583         MOV     DPH,A
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   33           RLC     A
   \   0000EF   33           RLC     A
   \   0000F0   54FC         ANL     A,#0xfc
   \   0000F2   F8           MOV     R0,A
   \   0000F3   8E82         MOV     DPL,R6
   \   0000F5   8F83         MOV     DPH,R7
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   48           ORL     A,R0
   \   0000F9   12....       LCALL   ?Subroutine38 & 0xFFFF
   1557          
   1558              // RELATIONSHIP
   1559              *pBuf++ |= (uint8)(list->relation << 4);
   \                     ??CrossCallReturnLabel_48:
   \   0000FC   E5..         MOV     A,?V0
   \   0000FE   2416         ADD     A,#0x16
   \   000100   F582         MOV     DPL,A
   \   000102   E4           CLR     A
   \   000103   35..         ADDC    A,?V1
   \   000105   F583         MOV     DPH,A
   \   000107   12....       LCALL   ?Subroutine46 & 0xFFFF
   1560          
   1561              // PERMITJOINING
   1562              *pBuf++ = (uint8)(list->permit);
   \                     ??CrossCallReturnLabel_61:
   \   00010A   E5..         MOV     A,?V0
   \   00010C   2417         ADD     A,#0x17
   \   00010E   12....       LCALL   ?Subroutine20 & 0xFFFF
   1563          
   1564              // DEPTH
   1565              *pBuf++ = list->depth;
   1566          
   1567              // LQI
   1568              *pBuf++ = list->lqi;
   1569          
   1570              list++; // next list entry
   1571            }
   \                     ??CrossCallReturnLabel_209:
   \   000111   2418         ADD     A,#0x18
   \   000113   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000116   2419         ADD     A,#0x19
   \   000118   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   00011B   241A         ADD     A,#0x1a
   \   00011D   F5..         MOV     ?V0,A
   \   00011F   5002         JNC     ??ZDP_MgmtLqiRsp_4
   \   000121   05..         INC     ?V1
   \                     ??ZDP_MgmtLqiRsp_4:
   \   000123   05..         INC     ?V4
   \                     ??ZDP_MgmtLqiRsp_2:
   \   000125   E5..         MOV     A,?V4
   \   000127   C3           CLR     C
   \   000128   95..         SUBB    A,?V5
   \   00012A   5003         JNC     $+5
   \   00012C   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1572          
   1573            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   00012F   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000132                ; Setup parameters for call to function fillAndSend
   \   000132   75..31       MOV     ?V0,#0x31
   \   000135   75..80       MOV     ?V1,#-0x80
   \   000138   78..         MOV     R0,#?V0
   \   00013A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013D   A9..         MOV     R1,?V6
   \   00013F   AC..         MOV     R4,?V10
   \   000141   AD..         MOV     R5,?V11
   \   000143   7402         MOV     A,#0x2
   \   000145   12....       LCALL   ?XSTACK_DISP101_8
   \   000148   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00014B   7402         MOV     A,#0x2
   \   00014D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000150   E9           MOV     A,R1
   \   000151   FE           MOV     R6,A
   \   000152                ; Setup parameters for call to function osal_mem_free
   \   000152   AA..         MOV     R2,?V2
   \   000154   AB..         MOV     R3,?V3
   \   000156   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000159   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00015C   7401         MOV     A,#0x1
   \   00015E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000161   7F0D         MOV     R7,#0xd
   \   000163   02....       LJMP    ?BANKED_LEAVE_XDATA
   1574          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V1
   \   000005   F583         MOV     DPH,A
   \   000007                REQUIRE ??Subroutine111_0
   \   000007                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000003   E5..         MOV     A,?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine120_0
   \   000006                ; // Fall through to label ??Subroutine120_0
   1575          
   1576          /*********************************************************************
   1577           * @fn          ZDP_MgmtRtgRsp
   1578           *
   1579           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1580           *              function sends a unicast message.
   1581           *
   1582           * @param       dstAddr - destination address of the message
   1583           * @param       Status - message status (ZDP_SUCCESS or other)
   1584           * @param       RoutingTableEntries - Total number of entries
   1585           * @param       StartIndex - Starting index within the reporting list
   1586           * @param       RoutingTableListCount - number of entries included
   1587           *                                      in this message
   1588           * @param       RoutingTableList - List of Routing Table entries
   1589           * @param       SecurityEnable - true to enable security for this message
   1590           *
   1591           * @return      ZStatus_t
   1592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1593          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1594                                      byte Status,
   1595                                      byte RoutingTableEntries,
   1596                                      byte StartIndex,
   1597                                      byte RoutingListCount,
   1598                                      rtgItem_t *RoutingTableList,
   1599                                      byte SecurityEnable )
   1600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   8C..         MOV     ?V1,R4
   \   000018   8D..         MOV     ?V0,R5
   \   00001A   7414         MOV     A,#0x14
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V4,A
   1601            uint8 *buf;
   1602            uint8 *pBuf;
   1603            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1604            byte len = 1 + 1 + 1 + 1;
   1605            byte x;
   1606          
   1607            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1608          
   1609            // Add an array for Routing List data
   1610            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000022   75F005       MOV     B,#0x5
   \   000025   12....       LCALL   ?Subroutine59 & 0xFFFF
   1611          
   1612            buf = osal_mem_alloc( (short)(len+1) );
   \                     ??CrossCallReturnLabel_235:
   \   000028   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00002B   8A..         MOV     ?V6,R2
   \   00002D   8B..         MOV     ?V7,R3
   \   00002F   AE..         MOV     R6,?V6
   \   000031   AF..         MOV     R7,?V7
   1613            if ( buf == NULL )
   \   000033   EE           MOV     A,R6
   \   000034   4F           ORL     A,R7
   \   000035   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1614            {
   1615              return afStatus_MEM_FAIL;
   \   000037   7910         MOV     R1,#0x10
   \   000039   02....       LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1616            }
   1617          
   1618            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   A3           INC     DPTR
   1619          
   1620            *pBuf++ = Status;
   \   000041   E5..         MOV     A,?V1
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   1621            *pBuf++ = RoutingTableEntries;
   \   000045   E5..         MOV     A,?V0
   \   000047   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   1622            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_223:
   \   00004A   7413         MOV     A,#0x13
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000052   12....       LCALL   ?Subroutine37 & 0xFFFF
   1623            *pBuf++ = RoutingListCount;
   \                     ??CrossCallReturnLabel_45:
   \   000055   08           INC     R0
   \   000056   08           INC     R0
   \   000057   A983         MOV     R1,DPH
   1624          
   1625            for ( x = 0; x < RoutingListCount; x++ )
   \   000059   7C00         MOV     R4,#0x0
   \   00005B   7415         MOV     A,#0x15
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000063   807A         SJMP    ??ZDP_MgmtRtgRsp_2
   1626            {
   1627              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_3:
   \   000065   8A82         MOV     DPL,R2
   \   000067   8B83         MOV     DPH,R3
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   1628              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \                     ??CrossCallReturnLabel_225:
   \   00006D   8A82         MOV     DPL,R2
   \   00006F   8B83         MOV     DPH,R3
   \   000071   A3           INC     DPTR
   \   000072   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   1629          
   1630              *pBuf = (RoutingTableList->status & 0x07);
   \                     ??CrossCallReturnLabel_161:
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   5407         ANL     A,#0x7
   \   000081   8882         MOV     DPL,R0
   \   000083   8983         MOV     DPH,R1
   \   000085   12....       LCALL   ?Subroutine31 & 0xFFFF
   1631              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \                     ??CrossCallReturnLabel_30:
   \   000088   5418         ANL     A,#0x18
   \   00008A   602A         JZ      ??ZDP_MgmtRtgRsp_4
   1632              {
   1633                uint8 options = 0;
   1634                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   00008C   7D02         MOV     R5,#0x2
   1635          
   1636                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   00008E   8A82         MOV     DPL,R2
   \   000090   8B83         MOV     DPH,R3
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   A2E2         MOV     C,0xE0 /* A   */.2
   \   00009B   5002         JNC     ??ZDP_MgmtRtgRsp_5
   1637                {
   1638                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   00009D   7D06         MOV     R5,#0x6
   1639                }
   1640          
   1641                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_5:
   \   00009F   A2E4         MOV     C,0xE0 /* A   */.4
   \   0000A1   5005         JNC     ??ZDP_MgmtRtgRsp_6
   1642                {
   1643                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   0000A3   D3           SETB    C
   \   0000A4   ED           MOV     A,R5
   \   0000A5   D2E0         SETB    0xE0 /* A   */.0
   \   0000A7   FD           MOV     R5,A
   1644                }
   1645          
   1646                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000A8   ED           MOV     A,R5
   \   0000A9   33           RLC     A
   \   0000AA   33           RLC     A
   \   0000AB   33           RLC     A
   \   0000AC   54F8         ANL     A,#0xf8
   \   0000AE   FD           MOV     R5,A
   \   0000AF   8882         MOV     DPL,R0
   \   0000B1   8983         MOV     DPH,R1
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   4D           ORL     A,R5
   \   0000B5   F0           MOVX    @DPTR,A
   1647              }
   1648              pBuf++;
   \                     ??ZDP_MgmtRtgRsp_4:
   \   0000B6   8882         MOV     DPL,R0
   \   0000B8   8983         MOV     DPH,R1
   \   0000BA   A3           INC     DPTR
   \   0000BB   08           INC     R0
   \   0000BC   A983         MOV     R1,DPH
   1649          
   1650              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \   0000BE   EA           MOV     A,R2
   \   0000BF   2402         ADD     A,#0x2
   \   0000C1   F5..         MOV     ?V6,A
   \   0000C3   E4           CLR     A
   \   0000C4   3B           ADDC    A,R3
   \   0000C5   F5..         MOV     ?V7,A
   \   0000C7   85..82       MOV     DPL,?V6
   \   0000CA   12....       LCALL   ?Subroutine28 & 0xFFFF
   1651              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \                     ??CrossCallReturnLabel_164:
   \   0000CD   85..82       MOV     DPL,?V6
   \   0000D0   85..83       MOV     DPH,?V7
   \   0000D3   A3           INC     DPTR
   \   0000D4   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   1652              RoutingTableList++;    // Move to next list entry
   \                     ??CrossCallReturnLabel_162:
   \   0000D7   EA           MOV     A,R2
   \   0000D8   2407         ADD     A,#0x7
   \   0000DA   FA           MOV     R2,A
   \   0000DB   5001         JNC     ??ZDP_MgmtRtgRsp_7
   \   0000DD   0B           INC     R3
   1653            }
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0000DE   0C           INC     R4
   \                     ??ZDP_MgmtRtgRsp_2:
   \   0000DF   EC           MOV     A,R4
   \   0000E0   C3           CLR     C
   \   0000E1   95..         SUBB    A,?V4
   \   0000E3   4080         JC      ??ZDP_MgmtRtgRsp_3
   1654          
   1655            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   0000EC                ; Setup parameters for call to function fillAndSend
   \   0000EC   75..32       MOV     ?V6,#0x32
   \   0000EF   75..80       MOV     ?V7,#-0x80
   \   0000F2   78..         MOV     R0,#?V6
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F7   A9..         MOV     R1,?V5
   \   0000F9   AC..         MOV     R4,?V2
   \   0000FB   AD..         MOV     R5,?V3
   \   0000FD   7402         MOV     A,#0x2
   \   0000FF   12....       LCALL   ?XSTACK_DISP101_8
   \   000102   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000105   7402         MOV     A,#0x2
   \   000107   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010A   E9           MOV     A,R1
   \   00010B   F5..         MOV     ?V2,A
   \   00010D                ; Setup parameters for call to function osal_mem_free
   \   00010D   EE           MOV     A,R6
   \   00010E   FA           MOV     R2,A
   \   00010F   EF           MOV     A,R7
   \   000110   FB           MOV     R3,A
   \   000111   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000114   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000117   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   A3           INC     DPTR
   \   00011B   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00011D   F0           MOVX    @DPTR,A
   \   00011E   A9..         MOV     R1,?V2
   \                     ??ZDP_MgmtRtgRsp_1:
   \   000120   02....       LJMP    ?Subroutine5 & 0xFFFF
   1656          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
   1657          
   1658          /*********************************************************************
   1659           * @fn          ZDP_MgmtBindRsp
   1660           *
   1661           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1662           *              function sends a unicast message.
   1663           *
   1664           * @param       dstAddr - destination address of the message
   1665           * @param       Status - message status (ZDP_SUCCESS or other)
   1666           * @param       BindingTableEntries - Total number of entries
   1667           * @param       StartIndex - Starting index within the reporting list
   1668           * @param       BindingTableListCount - number of entries included
   1669           *                                 in this message
   1670           * @param       BindingTableList - List of Binding Table entries
   1671           * @param       SecurityEnable - Security Options
   1672           *
   1673           * @return      ZStatus_t
   1674           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1675          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1676                                      byte Status,
   1677                                      byte BindingTableEntries,
   1678                                      byte StartIndex,
   1679                                      byte BindingTableListCount,
   1680                                      apsBindingItem_t *BindingTableList,
   1681                                      byte SecurityEnable )
   1682          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V10,R2
   \   000014   8B..         MOV     ?V11,R3
   \   000016   8C..         MOV     ?V6,R4
   \   000018   8D..         MOV     ?V5,R5
   \   00001A   7416         MOV     A,#0x16
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V4,A
   1683            uint8 *buf;
   1684            uint8 *pBuf;
   1685            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1686            uint8 len;    // Actual length varies due to different addrMode
   1687            uint8 x;
   1688            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1689            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1690          
   1691            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1692          
   1693            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1694            maxLen = 1 + 1 + 1 + 1;
   1695            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1696            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   75F015       MOV     B,#0x15
   \   000025   A4           MUL     AB
   \   000026   2404         ADD     A,#0x4
   \   000028   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00002B   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00002E   8A..         MOV     ?V2,R2
   \   000030   8B..         MOV     ?V3,R3
   1697          
   1698            if ( buf == NULL )
   \   000032   EA           MOV     A,R2
   \   000033   45..         ORL     A,?V3
   \   000035   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1699            {
   1700              return afStatus_MEM_FAIL;
   \   000037   7910         MOV     R1,#0x10
   \   000039   02....       LJMP    ??CrossCallReturnLabel_34 & 0xFFFF
   1701            }
   1702          
   1703            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   1704          
   1705            *pBuf++ = Status;
   \   000041   E5..         MOV     A,?V6
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   1706            *pBuf++ = BindingTableEntries;
   \   000045   E5..         MOV     A,?V5
   \   000047   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   1707            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_148:
   \   00004A   7415         MOV     A,#0x15
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000052   12....       LCALL   ?Subroutine37 & 0xFFFF
   1708            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_46:
   \   000055   0A           INC     R2
   \   000056   0A           INC     R2
   \   000057   AB83         MOV     R3,DPH
   1709          
   1710            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1711            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1712            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1713            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1714          
   1715            len = 1 + 1 + 1 + 1;
   \   000059   75..04       MOV     ?V0,#0x4
   1716            for ( x = 0; x < BindingTableListCount; x++ )
   \   00005C   75..00       MOV     ?V1,#0x0
   \   00005F   7417         MOV     A,#0x17
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FE           MOV     R6,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FF           MOV     R7,A
   \   000069   8017         SJMP    ??ZDP_MgmtBindRsp_1
   1717            {
   1718              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1719              *pBuf++ = BindingTableList->srcEP;
   1720          
   1721              // Cluster ID
   1722              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1723              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1724          
   1725              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1726              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1727              {
   1728                len += extZdpBindEntrySize;
   1729                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1730                *pBuf++ = BindingTableList->dstEP;
   1731              }
   1732              else
   1733              {
   1734                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_2:
   \   00006B   740E         MOV     A,#0xe
   \   00006D   25..         ADD     A,?V0
   \   00006F   F5..         MOV     ?V0,A
   1735                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000071   EE           MOV     A,R6
   \   000072   240B         ADD     A,#0xb
   \   000074   12....       LCALL   ?Subroutine17 & 0xFFFF
   1736                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1737              }
   \                     ??CrossCallReturnLabel_10:
   \   000077   AB83         MOV     R3,DPH
   1738              BindingTableList++;    // Move to next list entry
   \   000079   EE           MOV     A,R6
   \   00007A   2415         ADD     A,#0x15
   \   00007C   FE           MOV     R6,A
   \   00007D   5001         JNC     ??ZDP_MgmtBindRsp_3
   \   00007F   0F           INC     R7
   \                     ??ZDP_MgmtBindRsp_3:
   \   000080   05..         INC     ?V1
   \                     ??ZDP_MgmtBindRsp_1:
   \   000082   E5..         MOV     A,?V1
   \   000084   C3           CLR     C
   \   000085   95..         SUBB    A,?V4
   \   000087   504B         JNC     ??ZDP_MgmtBindRsp_4
   \   000089                ; Setup parameters for call to function sAddrExtCpy
   \   000089   EE           MOV     A,R6
   \   00008A   FC           MOV     R4,A
   \   00008B   EF           MOV     A,R7
   \   00008C   FD           MOV     R5,A
   \   00008D   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   00009F   EE           MOV     A,R6
   \   0000A0   2409         ADD     A,#0x9
   \   0000A2   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000A5   AB83         MOV     R3,DPH
   \   0000A7   EE           MOV     A,R6
   \   0000A8   2413         ADD     A,#0x13
   \   0000AA   F8           MOV     R0,A
   \   0000AB   E4           CLR     A
   \   0000AC   3F           ADDC    A,R7
   \   0000AD   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000B0   70B9         JNZ     ??ZDP_MgmtBindRsp_2
   \   0000B2   7415         MOV     A,#0x15
   \   0000B4   25..         ADD     A,?V0
   \   0000B6   F5..         MOV     ?V0,A
   \   0000B8                ; Setup parameters for call to function sAddrExtCpy
   \   0000B8   EE           MOV     A,R6
   \   0000B9   240B         ADD     A,#0xb
   \   0000BB   FC           MOV     R4,A
   \   0000BC   E4           CLR     A
   \   0000BD   3F           ADDC    A,R7
   \   0000BE   FD           MOV     R5,A
   \   0000BF   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0000C2   EE           MOV     A,R6
   \   0000C3   2414         ADD     A,#0x14
   \   0000C5   F582         MOV     DPL,A
   \   0000C7   E4           CLR     A
   \   0000C8   3F           ADDC    A,R7
   \   0000C9   F583         MOV     DPH,A
   \   0000CB   12....       LCALL   ?Subroutine56 & 0xFFFF
   1739            }
   \                     ??CrossCallReturnLabel_83:
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   AA82         MOV     R2,DPL
   \   0000D2   80A3         SJMP    ??CrossCallReturnLabel_10
   1740          
   1741            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_4:
   \   0000D4   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   0000D7                ; Setup parameters for call to function fillAndSend
   \   0000D7   75..33       MOV     ?V8,#0x33
   \   0000DA   75..80       MOV     ?V9,#-0x80
   \   0000DD   78..         MOV     R0,#?V8
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E2   A9..         MOV     R1,?V0
   \   0000E4   AC..         MOV     R4,?V10
   \   0000E6   AD..         MOV     R5,?V11
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   12....       LCALL   ?XSTACK_DISP101_8
   \   0000ED   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000F0   7402         MOV     A,#0x2
   \   0000F2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F5   E9           MOV     A,R1
   \   0000F6   FE           MOV     R6,A
   \   0000F7                ; Setup parameters for call to function osal_mem_free
   \   0000F7   AA..         MOV     R2,?V2
   \   0000F9   AB..         MOV     R3,?V3
   \   0000FB   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0000FE   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000101   02....       LJMP    ?Subroutine7 & 0xFFFF
   1742          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   3F           ADDC    A,R7
   \   000003   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   0A           INC     R2
   \   00000F   22           RET
   1743          
   1744          /*********************************************************************
   1745           * @fn          ZDP_MgmtNwkUpdateNotify
   1746           *
   1747           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1748           *              function sends a unicast message.
   1749           *
   1750           * @param       dstAddr - destination address of the message
   1751           * @param       status - message status (ZDP_SUCCESS or other)
   1752           * @param       scannedChannels - List of channels scanned by the request
   1753           * @param       totalTransmissions - Total transmissions
   1754           * @param       transmissionFailures - Sum of transmission failures
   1755           * @param       listCount - Number of records contained in the energyValues list
   1756           * @param       energyValues - List of descriptors, one for each of ListCount,
   1757           *                             of the enegry detect descriptors
   1758           * @param       txOptions - Transmit options
   1759           * @param       securityEnable - Security options
   1760           *
   1761           * @return      afStatus_t
   1762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1763          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1764                                              uint8 status, uint32 scannedChannels,
   1765                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1766                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1767                                              uint8 securityEnable )
   1768          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V8,R2
   \   000014   8B..         MOV     ?V9,R3
   \   000016   8C..         MOV     ?V2,R4
   \   000018   8D..         MOV     ?V0,R5
   1769            uint8 *buf;
   1770            uint8 *pBuf;
   1771            uint8 len;
   1772          
   1773            (void)securityEnable;  // Intentionally unreferenced parameter
   1774          
   1775            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1776            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001A   740A         MOV     A,#0xa
   \   00001C   2D           ADD     A,R5
   \   00001D   F5..         MOV     ?V1,A
   1777          
   1778            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000022   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000025   8A..         MOV     ?V4,R2
   \   000027   8B..         MOV     ?V5,R3
   \   000029   AE..         MOV     R6,?V4
   \   00002B   AF..         MOV     R7,?V5
   1779            if ( buf == NULL )
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1780            {
   1781              return afStatus_MEM_FAIL;
   \   000031   7910         MOV     R1,#0x10
   \   000033   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1782            }
   1783          
   1784            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   1785          
   1786            *pBuf++ = status;
   \   00003B   E5..         MOV     A,?V2
   \   00003D   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   1787          
   1788            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_149:
   \   000040                ; Setup parameters for call to function osal_buffer_uint32
   \   000040   7413         MOV     A,#0x13
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000048   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   00004B   7404         MOV     A,#0x4
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000050   7417         MOV     A,#0x17
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   12....       LCALL   ?Subroutine48 & 0xFFFF
   1789          
   1790            *pBuf++ = LO_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_64:
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   1791            *pBuf++ = HI_UINT16( totalTransmissions );
   \   00005A   E9           MOV     A,R1
   \   00005B   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00005E   7419         MOV     A,#0x19
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   12....       LCALL   ?Subroutine48 & 0xFFFF
   1792          
   1793            *pBuf++ = LO_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_65:
   \   000066   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   1794            *pBuf++ = HI_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_255:
   \   000069   A3           INC     DPTR
   1795          
   1796            *pBuf++ = listCount;
   \   00006A   E5..         MOV     A,?V0
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   0A           INC     R2
   \   00006F   0A           INC     R2
   \   000070   0A           INC     R2
   \   000071   AB83         MOV     R3,DPH
   1797          
   1798            if ( listCount > 0 )
   \   000073   6017         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1799              osal_memcpy( pBuf, energyValues, listCount );
   \   000075                ; Setup parameters for call to function osal_memcpy
   \   000075   741B         MOV     A,#0x1b
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000080   AC..         MOV     R4,?V0
   \   000082   7D00         MOV     R5,#0x0
   \   000084   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000087   7403         MOV     A,#0x3
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   1800          
   1801            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000093   741D         MOV     A,#0x1d
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E0           MOVX    A,@DPTR
   \   000099   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D                ; Setup parameters for call to function fillAndSend
   \   00009D   75..38       MOV     ?V4,#0x38
   \   0000A0   75..80       MOV     ?V5,#-0x80
   \   0000A3   78..         MOV     R0,#?V4
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   A9..         MOV     R1,?V1
   \   0000AA   AC..         MOV     R4,?V8
   \   0000AC   AD..         MOV     R5,?V9
   \   0000AE   7402         MOV     A,#0x2
   \   0000B0   12....       LCALL   ?XSTACK_DISP101_8
   \   0000B3   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000B6   7402         MOV     A,#0x2
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV     A,R1
   \   0000BC   F5..         MOV     ?V1,A
   \   0000BE                ; Setup parameters for call to function osal_mem_free
   \   0000BE   EE           MOV     A,R6
   \   0000BF   FA           MOV     R2,A
   \   0000C0   EF           MOV     A,R7
   \   0000C1   FB           MOV     R3,A
   \   0000C2   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0000C5   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000C8   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   A3           INC     DPTR
   \   0000CC   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000D2   E4           CLR     A
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   A9..         MOV     R1,?V1
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000D6                REQUIRE ?Subroutine5
   \   0000D6                ; // Fall through to label ?Subroutine5
   1802          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   22           RET
   1803          
   1804          /*********************************************************************
   1805           * Functions to register for ZDO Over-the-air messages
   1806           */
   1807          
   1808          /*********************************************************************
   1809           * @fn          ZDO_RegisterForZDOMsg
   1810           *
   1811           * @brief       Call this function to register of an incoming over
   1812           *              the air ZDO message - probably a response message
   1813           *              but requests can also be received.
   1814           *              Messages are delivered to the task with ZDO_CB_MSG
   1815           *              as the message ID.
   1816           *
   1817           * @param       taskID - Where you would like the message delivered
   1818           * @param       clusterID - What message?
   1819           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1820           *                          and device announce
   1821           *
   1822           * @return      ZSuccess - successful, ZMemError if not
   1823           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1824          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1825          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   1826            ZDO_MsgCB_t *pList;
   1827            ZDO_MsgCB_t *pLast;
   1828            ZDO_MsgCB_t *pNew;
   1829          
   1830            // Look for duplicate
   1831            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FE           MOV     R6,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
   \   000013   EE           MOV     A,R6
   \   000014   F8           MOV     R0,A
   \   000015   EF           MOV     A,R7
   \   000016   8028         SJMP    ??CrossCallReturnLabel_239
   1832            while ( pList )
   1833            {
   1834              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000018   8882         MOV     DPL,R0
   \   00001A   8983         MOV     DPH,R1
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   65..         XRL     A,?V2
   \   000021   7012         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000023   8882         MOV     DPL,R0
   \   000025   8983         MOV     DPH,R1
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   65..         XRL     A,?V0
   \   00002D   7004         JNZ     ??ZDO_RegisterForZDOMsg_2
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   65..         XRL     A,?V1
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000033   6053         JZ      ??CrossCallReturnLabel_257
   1835                return ( ZSuccess );
   1836              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000035   E8           MOV     A,R0
   \   000036   FE           MOV     R6,A
   \   000037   E9           MOV     A,R1
   \   000038   FF           MOV     R7,A
   1837              pList = (ZDO_MsgCB_t *)pList->next;
   \   000039   8882         MOV     DPL,R0
   \   00003B   8983         MOV     DPH,R1
   \   00003D   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   1838            }
   \                     ??CrossCallReturnLabel_239:
   \   000040   F9           MOV     R1,A
   \   000041   E8           MOV     A,R0
   \   000042   49           ORL     A,R1
   \   000043   70D3         JNZ     ??ZDO_RegisterForZDOMsg_0
   1839          
   1840            // Add to the list
   1841            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000045                ; Setup parameters for call to function osal_mem_alloc
   \   000045   7A05         MOV     R2,#0x5
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00004C   8A..         MOV     ?V4,R2
   \   00004E   8B..         MOV     ?V5,R3
   \   000050   A8..         MOV     R0,?V4
   \   000052   A9..         MOV     R1,?V5
   1842            if ( pNew )
   \   000054   E8           MOV     A,R0
   \   000055   49           ORL     A,R1
   \   000056   6034         JZ      ??ZDO_RegisterForZDOMsg_3
   1843            {
   1844              pNew->taskID = taskID;
   \   000058   8882         MOV     DPL,R0
   \   00005A   8983         MOV     DPH,R1
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   E5..         MOV     A,?V2
   \   000060   12....       LCALL   ?Subroutine35 & 0xFFFF
   1845              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_37:
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   E5..         MOV     A,?V0
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   E5..         MOV     A,?V1
   \   00006C   12....       LCALL   ?Subroutine35 & 0xFFFF
   1846              pNew->next = NULL;
   \                     ??CrossCallReturnLabel_38:
   \   00006F   E4           CLR     A
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   F0           MOVX    @DPTR,A
   1847              if ( zdoMsgCBs )
   \   000073   90....       MOV     DPTR,#zdoMsgCBs
   \   000076   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000079   4B           ORL     A,R3
   \   00007A   6006         JZ      ??ZDO_RegisterForZDOMsg_4
   1848              {
   1849                pLast->next = pNew;
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   8003         SJMP    ??ZDO_RegisterForZDOMsg_5
   1850              }
   1851              else
   1852                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   000082   90....       MOV     DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000085   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   1853              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_257:
   \   000088   7900         MOV     R1,#0x0
   \   00008A   8002         SJMP    ??ZDO_RegisterForZDOMsg_6
   1854            }
   1855            else
   1856              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   00008C   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   00008E   02....       LJMP    ??Subroutine108_0 & 0xFFFF
   1857          }
   1858          
   1859          /*********************************************************************
   1860           * @fn          ZDO_RemoveRegisteredCB
   1861           *
   1862           * @brief       Call this function if you don't want to receive the
   1863           *              incoming message.
   1864           *
   1865           * @param       taskID - Where the messages are being delivered.
   1866           * @param       clusterID - What message?
   1867           *
   1868           * @return      ZSuccess - successful, ZFailure if not found
   1869           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1870          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1871          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FC           MOV     R4,A
   \   000009   EB           MOV     A,R3
   \   00000A   FD           MOV     R5,A
   1872            ZDO_MsgCB_t *pList;
   1873            ZDO_MsgCB_t *pLast = NULL;
   \   00000B   7800         MOV     R0,#0x0
   \   00000D   7900         MOV     R1,#0x0
   1874          
   1875            pList = zdoMsgCBs;
   \   00000F   90....       MOV     DPTR,#zdoMsgCBs
   \   000012   8008         SJMP    ??ZDO_RemoveRegisteredCB_0
   1876            while ( pList )
   1877            {
   1878              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1879              {
   1880                if ( pLast )
   1881                {
   1882                  // remove this one from the linked list
   1883                  pLast->next = pList->next;
   1884                }
   1885                else if ( pList->next )
   1886                {
   1887                  // remove the first one from the linked list
   1888                  zdoMsgCBs = pList->next;
   1889                }
   1890                else
   1891                {
   1892                  // remove the only item from the list
   1893                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1894                }
   1895                osal_mem_free( pList );
   1896                return ( ZSuccess );
   1897              }
   1898              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000014   EA           MOV     A,R2
   \   000015   F8           MOV     R0,A
   \   000016   EB           MOV     A,R3
   \   000017   F9           MOV     R1,A
   1899              pList = pList->next;
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   00001C   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00001F   4B           ORL     A,R3
   \   000020   6049         JZ      ??ZDO_RemoveRegisteredCB_2
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6E           XRL     A,R6
   \   00002A   70E8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6C           XRL     A,R4
   \   000035   7003         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6D           XRL     A,R5
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   00003A   70D8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   00003C   E8           MOV     A,R0
   \   00003D   49           ORL     A,R1
   \   00003E   8A82         MOV     DPL,R2
   \   000040   8B83         MOV     DPH,R3
   \   000042   600D         JZ      ??ZDO_RemoveRegisteredCB_4
   \   000044   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000047   8882         MOV     DPL,R0
   \   000049   8983         MOV     DPH,R1
   \   00004B   EC           MOV     A,R4
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   ED           MOV     A,R5
   \   00004F   8012         SJMP    ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000051   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000054   49           ORL     A,R1
   \   000055   90....       MOV     DPTR,#zdoMsgCBs
   \   000058   6006         JZ      ??ZDO_RemoveRegisteredCB_6
   \   00005A   E8           MOV     A,R0
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   E9           MOV     A,R1
   \   00005E   8003         SJMP    ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000060   E4           CLR     A
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000063   F0           MOVX    @DPTR,A
   \   000064                ; Setup parameters for call to function osal_mem_free
   \   000064   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000067   7900         MOV     R1,#0x0
   \   000069   8002         SJMP    ??ZDO_RemoveRegisteredCB_7
   1900            }
   1901          
   1902            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   00006B   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   00006D   02....       LJMP    ?Subroutine6 & 0xFFFF
   1903          }
   1904          
   1905          /*********************************************************************
   1906           * @fn          ZDO_SendMsgCBs
   1907           *
   1908           * @brief       This function sends messages to registered tasks.
   1909           *              Local to ZDO and shouldn't be called outside of ZDO.
   1910           *
   1911           * @param       inMsg - incoming message
   1912           *
   1913           * @return      TRUE if sent to at least 1 task, FALSE if not
   1914           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1915          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1916          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1917            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V4,#0x0
   1918            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1919            while ( pList )
   1920            {
   1921              if ( (pList->clusterID == inMsg->clusterID)
   1922                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   1923                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \                     ??ZDO_SendMsgCBs_1:
   \   000012   85..82       MOV     DPL,?V0
   \   000015   85..83       MOV     DPH,?V1
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00001E   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000021   68           XRL     A,R0
   \   000022   7003         JNZ     ??ZDO_SendMsgCBs_2
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   69           XRL     A,R1
   \                     ??ZDO_SendMsgCBs_2:
   \   000027   602C         JZ      ??ZDO_SendMsgCBs_3
   \   000029   85..82       MOV     DPL,?V0
   \   00002C   85..83       MOV     DPH,?V1
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F4           CPL     A
   \   000034   7003         JNZ     ??ZDO_SendMsgCBs_4
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F4           CPL     A
   \                     ??ZDO_SendMsgCBs_4:
   \   000039   6003         JZ      $+5
   \   00003B   02....       LJMP    ??ZDO_SendMsgCBs_5 & 0xFFFF
   \   00003E   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   5480         ANL     A,#0x80
   \   000045   700E         JNZ     ??ZDO_SendMsgCBs_3
   \   000047   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00004A   6413         XRL     A,#0x13
   \   00004C   7002         JNZ     ??ZDO_SendMsgCBs_6
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \                     ??ZDO_SendMsgCBs_6:
   \   000050   6003         JZ      $+5
   \   000052   02....       LJMP    ??ZDO_SendMsgCBs_5 & 0xFFFF
   1924              {
   1925                zdoIncomingMsg_t *msgPtr;
   1926          
   1927                // Send the address to the task
   1928                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_3:
   \   000055                ; Setup parameters for call to function osal_msg_allocate
   \   000055   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000058   2417         ADD     A,#0x17
   \   00005A   FA           MOV     R2,A
   \   00005B   E4           CLR     A
   \   00005C   3400         ADDC    A,#0x0
   \   00005E   FB           MOV     R3,A
   \   00005F   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   000062   8A..         MOV     ?V2,R2
   \   000064   8B..         MOV     ?V3,R3
   1929                if ( msgPtr )
   \   000066   EA           MOV     A,R2
   \   000067   45..         ORL     A,?V3
   \   000069   606F         JZ      ??ZDO_SendMsgCBs_5
   1930                {
   1931                  // copy struct
   1932                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   8E..         MOV     ?V4,R6
   \   00006D   8F..         MOV     ?V5,R7
   \   00006F   75..00       MOV     ?V6,#0x0
   \   000072   78..         MOV     R0,#?V4
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000077   7C17         MOV     R4,#0x17
   \   000079   7D00         MOV     R5,#0x0
   \   00007B   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00007E   7403         MOV     A,#0x3
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   1933          
   1934                  if ( inMsg->asduLen )
   \   000083   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000086   6035         JZ      ??ZDO_SendMsgCBs_7
   1935                  {
   1936                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   000088   E5..         MOV     A,?V2
   \   00008A   2417         ADD     A,#0x17
   \   00008C   FA           MOV     R2,A
   \   00008D   E4           CLR     A
   \   00008E   35..         ADDC    A,?V3
   \   000090   FB           MOV     R3,A
   \   000091   E5..         MOV     A,?V2
   \   000093   2413         ADD     A,#0x13
   \   000095   F582         MOV     DPL,A
   \   000097   E4           CLR     A
   \   000098   35..         ADDC    A,?V3
   \   00009A   F583         MOV     DPH,A
   \   00009C   EA           MOV     A,R2
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   EB           MOV     A,R3
   \   0000A0   F0           MOVX    @DPTR,A
   1937                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   0000A1                ; Setup parameters for call to function osal_memcpy
   \   0000A1   12....       LCALL   ?Subroutine63 & 0xFFFF
   1938                  }
   \                     ??CrossCallReturnLabel_100:
   \   0000A4   F5..         MOV     ?V4,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F5..         MOV     ?V5,A
   \   0000AA   78..         MOV     R0,#?V4
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AF   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0000B2   FC           MOV     R4,A
   \   0000B3   7D00         MOV     R5,#0x0
   \   0000B5   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000B8   7403         MOV     A,#0x3
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
   1939          
   1940                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_7:
   \   0000BD   85..82       MOV     DPL,?V2
   \   0000C0   85..83       MOV     DPH,?V3
   \   0000C3   74D3         MOV     A,#-0x2d
   \   0000C5   F0           MOVX    @DPTR,A
   1941                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000C6                ; Setup parameters for call to function osal_msg_send
   \   0000C6   AA..         MOV     R2,?V2
   \   0000C8   AB..         MOV     R3,?V3
   \   0000CA   85..82       MOV     DPL,?V0
   \   0000CD   85..83       MOV     DPH,?V1
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F9           MOV     R1,A
   \   0000D4   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   1942                  ret = TRUE;
   \   0000D7   75..01       MOV     ?V4,#0x1
   1943                }
   1944              }
   1945              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_5:
   \   0000DA   85..82       MOV     DPL,?V0
   \   0000DD   85..83       MOV     DPH,?V1
   1946            }
   \                     ??ZDO_SendMsgCBs_0:
   \   0000E0   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   0000E3   E5..         MOV     A,?V0
   \   0000E5   45..         ORL     A,?V1
   \   0000E7   6003         JZ      $+5
   \   0000E9   02....       LJMP    ??ZDO_SendMsgCBs_1 & 0xFFFF
   1947            return ( ret );
   \   0000EC   A9..         MOV     R1,?V4
   \   0000EE   02....       LJMP    ?Subroutine4 & 0xFFFF
   1948          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   EE           MOV     A,R6
   \   000001   2410         ADD     A,#0x10
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
   1949          
   1950          /*********************************************************************
   1951           * Incoming message processor
   1952           */
   1953          
   1954          /*********************************************************************
   1955           * @fn          ZDP_IncomingData
   1956           *
   1957           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1958           *              from the APS sub-layer to the ZDO.
   1959           *
   1960           * @param       pData - Incoming Message
   1961           *
   1962           * @return      none
   1963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1964          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1965          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1966            uint8 x = 0;
   \   00000A   75..00       MOV     ?V0,#0x0
   1967            uint8 handled;
   1968            zdoIncomingMsg_t inMsg;
   1969          
   1970            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000D   740A         MOV     A,#0xa
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?Subroutine31 & 0xFFFF
   1971            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_31:
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   1972            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_258:
   \   000023   EA           MOV     A,R2
   \   000024   2415         ADD     A,#0x15
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   3B           ADDC    A,R3
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C0E0         PUSH    A
   \   00002F   740B         MOV     A,#0xb
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   12....       LCALL   ?Subroutine74 & 0xFFFF
   1973            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_115:
   \   000039   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00003C   740C         MOV     A,#0xc
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   1974            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_259:
   \   000044   EA           MOV     A,R2
   \   000045   2419         ADD     A,#0x19
   \   000047   F582         MOV     DPL,A
   \   000049   E4           CLR     A
   \   00004A   3B           ADDC    A,R3
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   C0E0         PUSH    A
   \   000050   740E         MOV     A,#0xe
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
   1975          
   1976            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000058   EA           MOV     A,R2
   \   000059   2420         ADD     A,#0x20
   \   00005B   F582         MOV     DPL,A
   \   00005D   E4           CLR     A
   \   00005E   3B           ADDC    A,R3
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   14           DEC     A
   \   000063   C0E0         PUSH    A
   \   000065   7410         MOV     A,#0x10
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
   1977            inMsg.asdu = pData->cmd.Data+1;
   \   00006D   EA           MOV     A,R2
   \   00006E   2422         ADD     A,#0x22
   \   000070   F8           MOV     R0,A
   \   000071   E4           CLR     A
   \   000072   3B           ADDC    A,R3
   \   000073   F9           MOV     R1,A
   \   000074   8882         MOV     DPL,R0
   \   000076   8983         MOV     DPH,R1
   \   000078   E0           MOVX    A,@DPTR
   \   000079   2401         ADD     A,#0x1
   \   00007B   FC           MOV     R4,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   3400         ADDC    A,#0x0
   \   000080   FD           MOV     R5,A
   \   000081   7413         MOV     A,#0x13
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   EC           MOV     A,R4
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   ED           MOV     A,R5
   \   00008A   12....       LCALL   ?Subroutine35 & 0xFFFF
   1978            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_39:
   \   00008D   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000090   E0           MOVX    A,@DPTR
   \   000091   C0E0         PUSH    A
   \   000093   740F         MOV     A,#0xf
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   D0E0         POP     A
   \   00009A   F0           MOVX    @DPTR,A
   1979            inMsg.macDestAddr = pData->macDestAddr;
   \   00009B   EA           MOV     A,R2
   \   00009C   2412         ADD     A,#0x12
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E4           CLR     A
   \   0000A1   3B           ADDC    A,R3
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   0000A7   7411         MOV     A,#0x11
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   1980            inMsg.macSrcAddr = pData->macSrcAddr;
   \                     ??CrossCallReturnLabel_260:
   \   0000AF   EA           MOV     A,R2
   \   0000B0   2424         ADD     A,#0x24
   \   0000B2   F582         MOV     DPL,A
   \   0000B4   E4           CLR     A
   \   0000B5   3B           ADDC    A,R3
   \   0000B6   F583         MOV     DPH,A
   \   0000B8   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000BB   7415         MOV     A,#0x15
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   1981          
   1982            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_261:
   \   0000C3                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000C3   AA..         MOV     R2,?XSP + 0
   \   0000C5   AB..         MOV     R3,?XSP + 1
   \   0000C7   12....       LCALL   ??ZDO_SendMsgCBs?relay; Banked call to: ZDO_SendMsgCBs
   \   0000CA   E9           MOV     A,R1
   \   0000CB   FA           MOV     R2,A
   \   0000CC   8002         SJMP    ??ZDP_IncomingData_0
   1983          
   1984          #if (defined MT_ZDO_CB_FUNC)
   1985          #if !defined MT_TASK
   1986            if (zgZdoDirectCB)
   1987          #endif
   1988            {
   1989              MT_ZdoDirectCB( pData, &inMsg );
   1990            }
   1991          #endif
   1992          
   1993            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1994            {
   1995              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1996              {
   1997                zdpMsgProcs[x].pFn( &inMsg );
   1998                return;
   1999              }
   2000              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000CE   05..         INC     ?V0
   \                     ??ZDP_IncomingData_0:
   \   0000D0   85....       MOV     ?V2,?V0
   \   0000D3   75..00       MOV     ?V3,#0x0
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   78..         MOV     R0,#?V2
   \   0000DA   12....       LCALL   ?S_SHL
   \   0000DD   74..         MOV     A,#zdpMsgProcs & 0xff
   \   0000DF   25..         ADD     A,?V2
   \   0000E1   F582         MOV     DPL,A
   \   0000E3   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   0000E5   35..         ADDC    A,?V3
   \   0000E7   F583         MOV     DPH,A
   \   0000E9   E4           CLR     A
   \   0000EA   93           MOVC    A,@A+DPTR
   \   0000EB   F8           MOV     R0,A
   \   0000EC   7401         MOV     A,#0x1
   \   0000EE   93           MOVC    A,@A+DPTR
   \   0000EF   F9           MOV     R1,A
   \   0000F0   74FF         MOV     A,#-0x1
   \   0000F2   68           XRL     A,R0
   \   0000F3   7003         JNZ     ??ZDP_IncomingData_2
   \   0000F5   74FF         MOV     A,#-0x1
   \   0000F7   69           XRL     A,R1
   \                     ??ZDP_IncomingData_2:
   \   0000F8   603F         JZ      ??ZDP_IncomingData_3
   \   0000FA   E4           CLR     A
   \   0000FB   93           MOVC    A,@A+DPTR
   \   0000FC   F8           MOV     R0,A
   \   0000FD   7401         MOV     A,#0x1
   \   0000FF   93           MOVC    A,@A+DPTR
   \   000100   F9           MOV     R1,A
   \   000101   740C         MOV     A,#0xc
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   E0           MOVX    A,@DPTR
   \   000107   68           XRL     A,R0
   \   000108   7003         JNZ     ??ZDP_IncomingData_4
   \   00010A   A3           INC     DPTR
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   69           XRL     A,R1
   \                     ??ZDP_IncomingData_4:
   \   00010D   70BF         JNZ     ??ZDP_IncomingData_1
   \   00010F                ; Setup parameters for indirect call
   \   00010F   AA..         MOV     R2,?XSP + 0
   \   000111   AB..         MOV     R3,?XSP + 1
   \   000113   75..00       MOV     ?V1,#0x0
   \   000116   7402         MOV     A,#0x2
   \   000118   78..         MOV     R0,#?V0
   \   00011A   12....       LCALL   ?S_SHL
   \   00011D   74..         MOV     A,#(zdpMsgProcs + 2) & 0xff
   \   00011F   25..         ADD     A,?V0
   \   000121   F582         MOV     DPL,A
   \   000123   74..         MOV     A,#((zdpMsgProcs + 2) >> 8) & 0xff
   \   000125   35..         ADDC    A,?V1
   \   000127   F583         MOV     DPH,A
   \   000129   E4           CLR     A
   \   00012A   93           MOVC    A,@A+DPTR
   \   00012B   C0E0         PUSH    A
   \   00012D   7401         MOV     A,#0x1
   \   00012F   93           MOVC    A,@A+DPTR
   \   000130   F583         MOV     DPH,A
   \   000132   D082         POP     DPL
   \   000134   12....       LCALL   ?CALL_IND
   \   000137   800A         SJMP    ??ZDP_IncomingData_5
   2001            }
   2002          
   2003            // Handle unhandled messages
   2004            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   000139   EA           MOV     A,R2
   \   00013A   7007         JNZ     ??ZDP_IncomingData_5
   2005              ZDApp_InMsgCB( &inMsg );
   \   00013C                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00013C   AA..         MOV     R2,?XSP + 0
   \   00013E   AB..         MOV     R3,?XSP + 1
   \   000140   12....       LCALL   ??ZDApp_InMsgCB?relay; Banked call to: ZDApp_InMsgCB
   2006          }
   \                     ??ZDP_IncomingData_5:
   \   000143   7417         MOV     A,#0x17
   \   000145   02....       LJMP    ??Subroutine106_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??fillAndSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NWKAddrOfInterestReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NwkAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IEEEAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_DeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EndDeviceTimeoutReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zdpProcessAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NodeDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_PowerDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EPRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_GenericRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_BindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveRegisteredCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SendMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   2007          
   2008          /*********************************************************************
   2009          *********************************************************************/
   2010          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     54   ZDO_SendMsgCBs
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      1     26   ZDP_BindUnbindReq
        0     18   -> fillAndSend
        0     16   -> sAddrExtCpy
        1     16   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     26   ZDP_EPRsp
        0     18   -> fillAndSend
        0     19   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     21   ZDP_EndDeviceTimeoutReq
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     21   ZDP_IEEEAddrReq
        0     21   -> fillAndSend
      1     35   ZDP_IncomingData
        0     35   -> ZDApp_InMsgCB
        0     35   -> ZDO_SendMsgCBs
      1     24   ZDP_MatchDescReq
        0     16   -> fillAndSend
      1     28   ZDP_MgmtBindRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     21   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     29   ZDP_MgmtLqiRsp
        0     24   -> fillAndSend
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     28   ZDP_MgmtNwkDiscRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     21   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     12   ZDP_MgmtPermitJoinReq
        0     12   -> fillAndSend
      1     26   ZDP_MgmtRtgRsp
        0     21   -> fillAndSend
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     25   ZDP_NwkAddrReq
        0     25   -> fillAndSend
        0     23   -> sAddrExtCmp
        0     23   -> sAddrExtCpy
      1     14   ZDP_PowerDescMsg
        0     12   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     17   ZDP_ServerDiscRsp
        0     13   -> fillAndSend
      1     18   ZDP_SimpleDescMsg
        0     18   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     25   ZDP_UserDescRsp
        0     21   -> fillAndSend
        0     22   -> osal_memcpy
      1     20   ZDP_UserDescSet
        0     17   -> fillAndSend
        0     18   -> osal_memcpy
        0     15   -> osal_memset
      1     60   fillAndSend
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
      1     15   zdpProcessAddrReq
        0     15   -> fillAndSend
        0     13   -> sAddrExtCmp
        0     13   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       1  ??Subroutine100_0
      10  ??Subroutine101_0
       4  ??Subroutine102_0
       3  ??Subroutine103_0
       6  ??Subroutine104_0
      13  ??Subroutine105_0
       3  ??Subroutine106_0
       5  ??Subroutine107_0
       5  ??Subroutine108_0
       8  ??Subroutine109_0
       7  ??Subroutine110_0
       6  ??Subroutine111_0
       4  ??Subroutine112_0
       4  ??Subroutine113_0
      14  ??Subroutine114_0
       5  ??Subroutine115_0
       8  ??Subroutine116_0
       5  ??Subroutine117_0
       3  ??Subroutine118_0
       8  ??Subroutine119_0
       8  ??Subroutine120_0
       1  ??Subroutine121_0
       5  ??Subroutine122_0
       1  ??Subroutine87_0
       3  ??Subroutine88_0
       4  ??Subroutine89_0
       8  ??Subroutine90_0
       5  ??Subroutine91_0
       8  ??Subroutine92_0
       7  ??Subroutine93_0
       5  ??Subroutine94_0
       4  ??Subroutine95_0
       7  ??Subroutine96_0
       5  ??Subroutine97_0
       4  ??Subroutine98_0
       4  ??Subroutine99_0
       6  ??ZDO_RegisterForZDOMsg?relay
       6  ??ZDO_RemoveRegisteredCB?relay
       6  ??ZDO_SendMsgCBs?relay
       6  ??ZDP_BindUnbindReq?relay
       6  ??ZDP_DeviceAnnce?relay
       6  ??ZDP_EPRsp?relay
       6  ??ZDP_EndDeviceBindReq?relay
       6  ??ZDP_EndDeviceTimeoutReq?relay
       6  ??ZDP_GenericRsp?relay
       6  ??ZDP_IEEEAddrReq?relay
       6  ??ZDP_IncomingData?relay
       6  ??ZDP_MatchDescReq?relay
       6  ??ZDP_MgmtBindRsp?relay
       6  ??ZDP_MgmtDirectJoinReq?relay
       6  ??ZDP_MgmtLeaveReq?relay
       6  ??ZDP_MgmtLqiRsp?relay
       6  ??ZDP_MgmtNwkDiscReq?relay
       6  ??ZDP_MgmtNwkDiscRsp?relay
       6  ??ZDP_MgmtNwkUpdateNotify?relay
       6  ??ZDP_MgmtNwkUpdateReq?relay
       6  ??ZDP_MgmtPermitJoinReq?relay
       6  ??ZDP_MgmtRtgRsp?relay
       6  ??ZDP_NWKAddrOfInterestReq?relay
       6  ??ZDP_NodeDescMsg?relay
       6  ??ZDP_NwkAddrReq?relay
       6  ??ZDP_PowerDescMsg?relay
       6  ??ZDP_SendData?relay
       6  ??ZDP_ServerDiscReq?relay
       6  ??ZDP_ServerDiscRsp?relay
       6  ??ZDP_SimpleDescMsg?relay
       6  ??ZDP_SimpleDescReq?relay
       6  ??ZDP_UserDescRsp?relay
       6  ??ZDP_UserDescSet?relay
       6  ??fillAndSend?relay
       6  ??zdpProcessAddrReq?relay
       3  ?Subroutine0
      10  ?Subroutine1
      36  ?Subroutine10
       1  ?Subroutine11
      18  ?Subroutine12
       1  ?Subroutine13
      13  ?Subroutine14
      36  ?Subroutine15
       3  ?Subroutine16
      16  ?Subroutine17
       7  ?Subroutine18
       7  ?Subroutine19
      10  ?Subroutine2
       7  ?Subroutine20
       4  ?Subroutine21
      12  ?Subroutine22
       5  ?Subroutine23
       4  ?Subroutine24
       7  ?Subroutine25
       1  ?Subroutine26
       1  ?Subroutine27
       2  ?Subroutine28
       7  ?Subroutine29
       8  ?Subroutine3
      15  ?Subroutine30
       7  ?Subroutine31
      13  ?Subroutine32
      13  ?Subroutine33
       6  ?Subroutine34
       6  ?Subroutine35
       8  ?Subroutine36
       7  ?Subroutine37
      10  ?Subroutine38
       4  ?Subroutine39
       5  ?Subroutine4
      13  ?Subroutine40
       9  ?Subroutine41
       2  ?Subroutine42
      15  ?Subroutine43
       3  ?Subroutine44
      13  ?Subroutine45
      13  ?Subroutine46
      10  ?Subroutine47
       4  ?Subroutine48
       8  ?Subroutine49
       5  ?Subroutine5
       5  ?Subroutine50
       1  ?Subroutine51
      10  ?Subroutine52
       7  ?Subroutine53
       6  ?Subroutine54
       6  ?Subroutine55
       6  ?Subroutine56
       4  ?Subroutine57
       5  ?Subroutine58
       5  ?Subroutine59
       5  ?Subroutine6
      15  ?Subroutine60
       4  ?Subroutine61
      12  ?Subroutine62
       5  ?Subroutine63
      14  ?Subroutine64
      11  ?Subroutine65
       9  ?Subroutine66
       6  ?Subroutine67
       9  ?Subroutine68
      16  ?Subroutine69
      10  ?Subroutine7
      13  ?Subroutine70
       4  ?Subroutine71
       1  ?Subroutine72
       3  ?Subroutine73
      10  ?Subroutine74
      13  ?Subroutine75
      10  ?Subroutine76
       5  ?Subroutine77
       9  ?Subroutine78
       4  ?Subroutine79
      17  ?Subroutine8
      10  ?Subroutine80
      10  ?Subroutine81
      15  ?Subroutine82
       6  ?Subroutine83
       6  ?Subroutine84
       8  ?Subroutine85
       3  ?Subroutine86
      31  ?Subroutine9
     145  ZDO_RegisterForZDOMsg
     112  ZDO_RemoveRegisteredCB
     241  ZDO_SendMsgCBs
       1  ZDP_AF_ENDPOINT
     213  ZDP_BindUnbindReq
      80  ZDP_Buf
      73  ZDP_DeviceAnnce
     153  ZDP_EPRsp
     233  ZDP_EndDeviceBindReq
      54  ZDP_EndDeviceTimeoutReq
      87  ZDP_GenericRsp
      56  ZDP_IEEEAddrReq
     328  ZDP_IncomingData
     214  ZDP_MatchDescReq
     260  ZDP_MgmtBindRsp
      22  ZDP_MgmtDirectJoinReq
      50  ZDP_MgmtLeaveReq
     358  ZDP_MgmtLqiRsp
      58  ZDP_MgmtNwkDiscReq
     301  ZDP_MgmtNwkDiscRsp
     214  ZDP_MgmtNwkUpdateNotify
     128  ZDP_MgmtNwkUpdateReq
      20  ZDP_MgmtPermitJoinReq
     291  ZDP_MgmtRtgRsp
      16  ZDP_NWKAddrOfInterestReq
     138  ZDP_NodeDescMsg
     120  ZDP_NwkAddrReq
      74  ZDP_PowerDescMsg
     109  ZDP_SendData
      81  ZDP_ServerDiscReq
      80  ZDP_ServerDiscRsp
     282  ZDP_SimpleDescMsg
      27  ZDP_SimpleDescReq
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     122  ZDP_UserDescRsp
     106  ZDP_UserDescSet
     170  fillAndSend
       2  zdoMsgCBs
      44  zdpMsgProcs
     292  zdpProcessAddrReq

 
 6 186 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    45 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
 6 443 bytes of CODE  memory
    86 bytes of XDATA memory

Errors: none
Warnings: none
