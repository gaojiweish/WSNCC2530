///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.10.1.2146 for 8051               14/Sep/2016  11:22:12
// Copyright 2004-2014 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Mesh v1.0.0\Components\mt\MT_ZDO.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Components\mt\MT_ZDO.c" -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC
//        -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC "C:\Texas
//        Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\"
//        -lA "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\" -I "C:\Texas
//        Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Mesh
//        v1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\MT_ZDO.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_ZDO

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??MT_ZdoActiveEpRequest?relay
        FUNCTION ??MT_ZdoActiveEpRequest?relay,0203H
        PUBLIC ??MT_ZdoBeaconIndCB?relay
        FUNCTION ??MT_ZdoBeaconIndCB?relay,0203H
        PUBLIC ??MT_ZdoBindRequest?relay
        FUNCTION ??MT_ZdoBindRequest?relay,0203H
        PUBLIC ??MT_ZdoCommandProcessing?relay
        FUNCTION ??MT_ZdoCommandProcessing?relay,0203H
        PUBLIC ??MT_ZdoComplexDescRequest?relay
        FUNCTION ??MT_ZdoComplexDescRequest?relay,0203H
        PUBLIC ??MT_ZdoEndDevAnnce?relay
        FUNCTION ??MT_ZdoEndDevAnnce?relay,0203H
        PUBLIC ??MT_ZdoEndDevBindRequest?relay
        FUNCTION ??MT_ZdoEndDevBindRequest?relay,0203H
        PUBLIC ??MT_ZdoEndDeviceTimeoutRequest?relay
        FUNCTION ??MT_ZdoEndDeviceTimeoutRequest?relay,0203H
        PUBLIC ??MT_ZdoIEEEAddrRequest?relay
        FUNCTION ??MT_ZdoIEEEAddrRequest?relay,0203H
        PUBLIC ??MT_ZdoInit?relay
        FUNCTION ??MT_ZdoInit?relay,0203H
        PUBLIC ??MT_ZdoJoinCnfCB?relay
        FUNCTION ??MT_ZdoJoinCnfCB?relay,0203H
        PUBLIC ??MT_ZdoJoinReq?relay
        FUNCTION ??MT_ZdoJoinReq?relay,0203H
        PUBLIC ??MT_ZdoMatchDescRequest?relay
        FUNCTION ??MT_ZdoMatchDescRequest?relay,0203H
        PUBLIC ??MT_ZdoNWKAddressRequest?relay
        FUNCTION ??MT_ZdoNWKAddressRequest?relay,0203H
        PUBLIC ??MT_ZdoNetworkDiscoveryReq?relay
        FUNCTION ??MT_ZdoNetworkDiscoveryReq?relay,0203H
        PUBLIC ??MT_ZdoNodeDescRequest?relay
        FUNCTION ??MT_ZdoNodeDescRequest?relay,0203H
        PUBLIC ??MT_ZdoNwkAddrOfInterestReq?relay
        FUNCTION ??MT_ZdoNwkAddrOfInterestReq?relay,0203H
        PUBLIC ??MT_ZdoNwkDiscoveryCnfCB?relay
        FUNCTION ??MT_ZdoNwkDiscoveryCnfCB?relay,0203H
        PUBLIC ??MT_ZdoPowerDescRequest?relay
        FUNCTION ??MT_ZdoPowerDescRequest?relay,0203H
        PUBLIC ??MT_ZdoRegisterForZDOMsg?relay
        FUNCTION ??MT_ZdoRegisterForZDOMsg?relay,0203H
        PUBLIC ??MT_ZdoRemoveRegisteredCB?relay
        FUNCTION ??MT_ZdoRemoveRegisteredCB?relay,0203H
        PUBLIC ??MT_ZdoSendData?relay
        FUNCTION ??MT_ZdoSendData?relay,0203H
        PUBLIC ??MT_ZdoSendMsgCB?relay
        FUNCTION ??MT_ZdoSendMsgCB?relay,0203H
        PUBLIC ??MT_ZdoServiceDiscRequest?relay
        FUNCTION ??MT_ZdoServiceDiscRequest?relay,0203H
        PUBLIC ??MT_ZdoSimpleDescRequest?relay
        FUNCTION ??MT_ZdoSimpleDescRequest?relay,0203H
        PUBLIC ??MT_ZdoStartupFromApp?relay
        FUNCTION ??MT_ZdoStartupFromApp?relay,0203H
        PUBLIC ??MT_ZdoUnbindRequest?relay
        FUNCTION ??MT_ZdoUnbindRequest?relay,0203H
        PUBLIC ??MT_ZdoUserDescRequest?relay
        FUNCTION ??MT_ZdoUserDescRequest?relay,0203H
        PUBLIC ??MT_ZdoUserDescSet?relay
        FUNCTION ??MT_ZdoUserDescSet?relay,0203H
        PUBLIC MT_ZdoActiveEpRequest
        FUNCTION MT_ZdoActiveEpRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoBeaconIndCB
        FUNCTION MT_ZdoBeaconIndCB,0a1603H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC MT_ZdoBindRequest
        FUNCTION MT_ZdoBindRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC MT_ZdoCommandProcessing
        FUNCTION MT_ZdoCommandProcessing,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_ZdoComplexDescRequest
        FUNCTION MT_ZdoComplexDescRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoEndDevAnnce
        FUNCTION MT_ZdoEndDevAnnce,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC MT_ZdoEndDevBindRequest
        FUNCTION MT_ZdoEndDevBindRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 94, STACK
        PUBLIC MT_ZdoEndDeviceTimeoutRequest
        FUNCTION MT_ZdoEndDeviceTimeoutRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC MT_ZdoIEEEAddrRequest
        FUNCTION MT_ZdoIEEEAddrRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoInit
        FUNCTION MT_ZdoInit,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MT_ZdoJoinCnfCB
        FUNCTION MT_ZdoJoinCnfCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC MT_ZdoJoinReq
        FUNCTION MT_ZdoJoinReq,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC MT_ZdoMatchDescRequest
        FUNCTION MT_ZdoMatchDescRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 96, STACK
        PUBLIC MT_ZdoNWKAddressRequest
        FUNCTION MT_ZdoNWKAddressRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoNetworkDiscoveryReq
        FUNCTION MT_ZdoNetworkDiscoveryReq,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC MT_ZdoNodeDescRequest
        FUNCTION MT_ZdoNodeDescRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoNwkAddrOfInterestReq
        FUNCTION MT_ZdoNwkAddrOfInterestReq,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC MT_ZdoNwkDiscoveryCnfCB
        FUNCTION MT_ZdoNwkDiscoveryCnfCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_ZdoPowerDescRequest
        FUNCTION MT_ZdoPowerDescRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoRegisterForZDOMsg
        FUNCTION MT_ZdoRegisterForZDOMsg,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoRemoveRegisteredCB
        FUNCTION MT_ZdoRemoveRegisteredCB,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoSendData
        FUNCTION MT_ZdoSendData,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC MT_ZdoSendMsgCB
        FUNCTION MT_ZdoSendMsgCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC MT_ZdoServiceDiscRequest
        FUNCTION MT_ZdoServiceDiscRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoSimpleDescRequest
        FUNCTION MT_ZdoSimpleDescRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoStartupFromApp
        FUNCTION MT_ZdoStartupFromApp,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoUnbindRequest
        FUNCTION MT_ZdoUnbindRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC MT_ZdoUserDescRequest
        FUNCTION MT_ZdoUserDescRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoUserDescSet
        FUNCTION MT_ZdoUserDescSet,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 42, STACK
        PUBLIC _zdoCallbackSub
        PUBLIC ignoreIndication
        PUBLIC pBeaconIndBuf
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
??MT_BuildAndSendZToolResponse?relay SYMBOL "?relay", MT_BuildAndSendZToolResponse
ZDApp_JoinReq       SYMBOL "ZDApp_JoinReq"
??ZDApp_JoinReq?relay SYMBOL "?relay", ZDApp_JoinReq
ZDApp_NetworkDiscoveryReq SYMBOL "ZDApp_NetworkDiscoveryReq"
??ZDApp_NetworkDiscoveryReq?relay SYMBOL "?relay", ZDApp_NetworkDiscoveryReq
ZDOInitDevice       SYMBOL "ZDOInitDevice"
??ZDOInitDevice?relay SYMBOL "?relay", ZDOInitDevice
ZDO_DeregisterForZdoCB SYMBOL "ZDO_DeregisterForZdoCB"
??ZDO_DeregisterForZdoCB?relay SYMBOL "?relay", ZDO_DeregisterForZdoCB
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
??ZDO_RegisterForZdoCB?relay SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_RemoveRegisteredCB SYMBOL "ZDO_RemoveRegisteredCB"
??ZDO_RemoveRegisteredCB?relay SYMBOL "?relay", ZDO_RemoveRegisteredCB
ZDP_BindUnbindReq   SYMBOL "ZDP_BindUnbindReq"
??ZDP_BindUnbindReq?relay SYMBOL "?relay", ZDP_BindUnbindReq
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
??ZDP_DeviceAnnce?relay SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
ZDP_EndDeviceTimeoutReq SYMBOL "ZDP_EndDeviceTimeoutReq"
??ZDP_EndDeviceTimeoutReq?relay SYMBOL "?relay", ZDP_EndDeviceTimeoutReq
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
??ZDP_IEEEAddrReq?relay SYMBOL "?relay", ZDP_IEEEAddrReq
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
??ZDP_NWKAddrOfInterestReq?relay SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
??ZDP_NwkAddrReq?relay SYMBOL "?relay", ZDP_NwkAddrReq
ZDP_SendData        SYMBOL "ZDP_SendData"
??ZDP_SendData?relay SYMBOL "?relay", ZDP_SendData
ZDP_ServerDiscReq   SYMBOL "ZDP_ServerDiscReq"
??ZDP_ServerDiscReq?relay SYMBOL "?relay", ZDP_ServerDiscReq
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
??ZDP_SimpleDescReq?relay SYMBOL "?relay", ZDP_SimpleDescReq
ZDP_UserDescSet     SYMBOL "ZDP_UserDescSet"
??ZDP_UserDescSet?relay SYMBOL "?relay", ZDP_UserDescSet
osal_build_uint32   SYMBOL "osal_build_uint32"
??osal_build_uint32?relay SYMBOL "?relay", osal_build_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
sAddrExtCpy         SYMBOL "sAddrExtCpy"
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
MT_ZdoActiveEpRequest SYMBOL "MT_ZdoActiveEpRequest"
??MT_ZdoActiveEpRequest?relay SYMBOL "?relay", MT_ZdoActiveEpRequest
MT_ZdoBeaconIndCB   SYMBOL "MT_ZdoBeaconIndCB"
??MT_ZdoBeaconIndCB?relay SYMBOL "?relay", MT_ZdoBeaconIndCB
MT_ZdoBindRequest   SYMBOL "MT_ZdoBindRequest"
??MT_ZdoBindRequest?relay SYMBOL "?relay", MT_ZdoBindRequest
MT_ZdoCommandProcessing SYMBOL "MT_ZdoCommandProcessing"
??MT_ZdoCommandProcessing?relay SYMBOL "?relay", MT_ZdoCommandProcessing
MT_ZdoComplexDescRequest SYMBOL "MT_ZdoComplexDescRequest"
??MT_ZdoComplexDescRequest?relay SYMBOL "?relay", MT_ZdoComplexDescRequest
MT_ZdoEndDevAnnce   SYMBOL "MT_ZdoEndDevAnnce"
??MT_ZdoEndDevAnnce?relay SYMBOL "?relay", MT_ZdoEndDevAnnce
MT_ZdoEndDevBindRequest SYMBOL "MT_ZdoEndDevBindRequest"
??MT_ZdoEndDevBindRequest?relay SYMBOL "?relay", MT_ZdoEndDevBindRequest
MT_ZdoEndDeviceTimeoutRequest SYMBOL "MT_ZdoEndDeviceTimeoutRequest"
??MT_ZdoEndDeviceTimeoutRequest?relay SYMBOL "?relay", MT_ZdoEndDeviceTimeoutRequest
MT_ZdoIEEEAddrRequest SYMBOL "MT_ZdoIEEEAddrRequest"
??MT_ZdoIEEEAddrRequest?relay SYMBOL "?relay", MT_ZdoIEEEAddrRequest
MT_ZdoInit          SYMBOL "MT_ZdoInit"
??MT_ZdoInit?relay  SYMBOL "?relay", MT_ZdoInit
MT_ZdoJoinCnfCB     SYMBOL "MT_ZdoJoinCnfCB"
??MT_ZdoJoinCnfCB?relay SYMBOL "?relay", MT_ZdoJoinCnfCB
MT_ZdoJoinReq       SYMBOL "MT_ZdoJoinReq"
??MT_ZdoJoinReq?relay SYMBOL "?relay", MT_ZdoJoinReq
MT_ZdoMatchDescRequest SYMBOL "MT_ZdoMatchDescRequest"
??MT_ZdoMatchDescRequest?relay SYMBOL "?relay", MT_ZdoMatchDescRequest
MT_ZdoNWKAddressRequest SYMBOL "MT_ZdoNWKAddressRequest"
??MT_ZdoNWKAddressRequest?relay SYMBOL "?relay", MT_ZdoNWKAddressRequest
MT_ZdoNetworkDiscoveryReq SYMBOL "MT_ZdoNetworkDiscoveryReq"
??MT_ZdoNetworkDiscoveryReq?relay SYMBOL "?relay", MT_ZdoNetworkDiscoveryReq
MT_ZdoNodeDescRequest SYMBOL "MT_ZdoNodeDescRequest"
??MT_ZdoNodeDescRequest?relay SYMBOL "?relay", MT_ZdoNodeDescRequest
MT_ZdoNwkAddrOfInterestReq SYMBOL "MT_ZdoNwkAddrOfInterestReq"
??MT_ZdoNwkAddrOfInterestReq?relay SYMBOL "?relay", MT_ZdoNwkAddrOfInterestReq
MT_ZdoNwkDiscoveryCnfCB SYMBOL "MT_ZdoNwkDiscoveryCnfCB"
??MT_ZdoNwkDiscoveryCnfCB?relay SYMBOL "?relay", MT_ZdoNwkDiscoveryCnfCB
MT_ZdoPowerDescRequest SYMBOL "MT_ZdoPowerDescRequest"
??MT_ZdoPowerDescRequest?relay SYMBOL "?relay", MT_ZdoPowerDescRequest
MT_ZdoRegisterForZDOMsg SYMBOL "MT_ZdoRegisterForZDOMsg"
??MT_ZdoRegisterForZDOMsg?relay SYMBOL "?relay", MT_ZdoRegisterForZDOMsg
MT_ZdoRemoveRegisteredCB SYMBOL "MT_ZdoRemoveRegisteredCB"
??MT_ZdoRemoveRegisteredCB?relay SYMBOL "?relay", MT_ZdoRemoveRegisteredCB
MT_ZdoSendData      SYMBOL "MT_ZdoSendData"
??MT_ZdoSendData?relay SYMBOL "?relay", MT_ZdoSendData
MT_ZdoSendMsgCB     SYMBOL "MT_ZdoSendMsgCB"
??MT_ZdoSendMsgCB?relay SYMBOL "?relay", MT_ZdoSendMsgCB
MT_ZdoServiceDiscRequest SYMBOL "MT_ZdoServiceDiscRequest"
??MT_ZdoServiceDiscRequest?relay SYMBOL "?relay", MT_ZdoServiceDiscRequest
MT_ZdoSimpleDescRequest SYMBOL "MT_ZdoSimpleDescRequest"
??MT_ZdoSimpleDescRequest?relay SYMBOL "?relay", MT_ZdoSimpleDescRequest
MT_ZdoStartupFromApp SYMBOL "MT_ZdoStartupFromApp"
??MT_ZdoStartupFromApp?relay SYMBOL "?relay", MT_ZdoStartupFromApp
MT_ZdoUnbindRequest SYMBOL "MT_ZdoUnbindRequest"
??MT_ZdoUnbindRequest?relay SYMBOL "?relay", MT_ZdoUnbindRequest
MT_ZdoUserDescRequest SYMBOL "MT_ZdoUserDescRequest"
??MT_ZdoUserDescRequest?relay SYMBOL "?relay", MT_ZdoUserDescRequest
MT_ZdoUserDescSet   SYMBOL "MT_ZdoUserDescSet"
??MT_ZdoUserDescSet?relay SYMBOL "?relay", MT_ZdoUserDescSet

        EXTERN ??MT_BuildAndSendZToolResponse?relay
        FUNCTION ??MT_BuildAndSendZToolResponse?relay,00H
        EXTERN ??ZDApp_JoinReq?relay
        FUNCTION ??ZDApp_JoinReq?relay,00H
        EXTERN ??ZDApp_NetworkDiscoveryReq?relay
        FUNCTION ??ZDApp_NetworkDiscoveryReq?relay,00H
        EXTERN ??ZDOInitDevice?relay
        FUNCTION ??ZDOInitDevice?relay,00H
        EXTERN ??ZDO_DeregisterForZdoCB?relay
        FUNCTION ??ZDO_DeregisterForZdoCB?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDO_RegisterForZdoCB?relay
        FUNCTION ??ZDO_RegisterForZdoCB?relay,00H
        EXTERN ??ZDO_RemoveRegisteredCB?relay
        FUNCTION ??ZDO_RemoveRegisteredCB?relay,00H
        EXTERN ??ZDP_BindUnbindReq?relay
        FUNCTION ??ZDP_BindUnbindReq?relay,00H
        EXTERN ??ZDP_DeviceAnnce?relay
        FUNCTION ??ZDP_DeviceAnnce?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??ZDP_EndDeviceTimeoutReq?relay
        FUNCTION ??ZDP_EndDeviceTimeoutReq?relay,00H
        EXTERN ??ZDP_IEEEAddrReq?relay
        FUNCTION ??ZDP_IEEEAddrReq?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??ZDP_NWKAddrOfInterestReq?relay
        FUNCTION ??ZDP_NWKAddrOfInterestReq?relay,00H
        EXTERN ??ZDP_NwkAddrReq?relay
        FUNCTION ??ZDP_NwkAddrReq?relay,00H
        EXTERN ??ZDP_SendData?relay
        FUNCTION ??ZDP_SendData?relay,00H
        EXTERN ??ZDP_ServerDiscReq?relay
        FUNCTION ??ZDP_ServerDiscReq?relay,00H
        EXTERN ??ZDP_SimpleDescReq?relay
        FUNCTION ??ZDP_SimpleDescReq?relay,00H
        EXTERN ??ZDP_UserDescSet?relay
        FUNCTION ??ZDP_UserDescSet?relay,00H
        EXTERN ??osal_build_uint32?relay
        FUNCTION ??osal_build_uint32?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 88, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_TaskID
        EXTERN ZDApp_JoinReq
        FUNCTION ZDApp_JoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NetworkDiscoveryReq
        FUNCTION ZDApp_NetworkDiscoveryReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDOInitDevice
        FUNCTION ZDOInitDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_DeregisterForZdoCB
        FUNCTION ZDO_DeregisterForZdoCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RemoveRegisteredCB
        FUNCTION ZDO_RemoveRegisteredCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceTimeoutReq
        FUNCTION ZDP_EndDeviceTimeoutReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SendData
        FUNCTION ZDP_SendData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_ServerDiscReq
        FUNCTION ZDP_ServerDiscReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_UserDescSet
        FUNCTION ZDP_UserDescSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Mesh v1.0.0\Components\mt\MT_ZDO.c
//    1 /**************************************************************************************************
//    2   Filename:       MT_ZDO.c
//    3   Revised:        $Date: 2014-05-16 18:14:48 -0700 (Fri, 16 May 2014) $
//    4   Revision:       $Revision: 38577 $
//    5 
//    6   Description:    MonitorTest functions for the ZDO layer.
//    7 
//    8 
//    9   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef MT_ZDO_FUNC
//   41 
//   42 /**************************************************************************************************
//   43  * INCLUDES
//   44  **************************************************************************************************/
//   45 #include "ZComDef.h"
//   46 #include "OSAL.h"
//   47 #include "OSAL_Nv.h"
//   48 #include "MT.h"
//   49 #include "MT_ZDO.h"
//   50 #include "APSMEDE.h"
//   51 #include "ZDConfig.h"
//   52 #include "ZDProfile.h"
//   53 #include "ZDObject.h"
//   54 #include "ZDApp.h"
//   55 #include "OnBoard.h"
//   56 #include "aps_groups.h"
//   57 
//   58 #if defined ( MT_ZDO_EXTENSIONS )
//   59   #include "rtg.h"
//   60 #endif
//   61 #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
//   62   #include "ZDSecMgr.h"
//   63 #endif
//   64 
//   65 #include "nwk_util.h"
//   66 
//   67 /**************************************************************************************************
//   68  * CONSTANTS
//   69  **************************************************************************************************/
//   70 #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
//   71 #define MT_ZDO_ADDR_RSP_LEN               0x0D
//   72 #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
//   73 #define MT_ZDO_BEACON_IND_LEN             21
//   74 #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
//   75 #define MT_ZDO_JOIN_CNF_LEN               5
//   76 
//   77 // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
//   78 // sizeof(zdoConcentratorInd_t) is not usable.
//   79 #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
//   80 
//   81 #define MTZDO_RESPONSE_BUFFER_LEN   100
//   82 
//   83 #define MTZDO_MAX_MATCH_CLUSTERS    16
//   84 #define MTZDO_MAX_ED_BIND_CLUSTERS  15
//   85 
//   86 // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
//   87 #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
//   88 
//   89 #define MT_ZDO_STATUS_LEN   1
//   90 
//   91 #if defined ( MT_ZDO_EXTENSIONS )
//   92 typedef struct
//   93 {
//   94   uint16            ami;
//   95   uint16            keyNvId;   // index to the Link Key table in NV
//   96   ZDSecMgr_Authentication_Option authenticateOption;
//   97 } ZDSecMgrEntry_t;
//   98 #endif  // MT_ZDO_EXTENSIONS
//   99 
//  100 /**************************************************************************************************
//  101  * GLOBAL VARIABLES
//  102  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  103 uint32 _zdoCallbackSub;
_zdoCallbackSub:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  104 uint8 *pBeaconIndBuf = NULL;
pBeaconIndBuf:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  105 
//  106 /**************************************************************************************************
//  107  * LOCAL VARIABLES
//  108  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  109 bool ignoreIndication = FALSE;
ignoreIndication:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  110 
//  111 /**************************************************************************************************
//  112  * LOCAL FUNCTIONS
//  113  **************************************************************************************************/
//  114 #if defined (MT_ZDO_FUNC)
//  115 void MT_ZdoNWKAddressRequest(uint8 *pBuf);
//  116 void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
//  117 void MT_ZdoNodeDescRequest(uint8 *pBuf);
//  118 void MT_ZdoPowerDescRequest(uint8 *pBuf);
//  119 void MT_ZdoSimpleDescRequest(uint8 *pBuf);
//  120 void MT_ZdoActiveEpRequest(uint8 *pBuf);
//  121 void MT_ZdoMatchDescRequest(uint8 *pBuf);
//  122 void MT_ZdoComplexDescRequest(uint8 *pBuf);
//  123 void MT_ZdoUserDescRequest(uint8 *pBuf);
//  124 void MT_ZdoEndDevAnnce(uint8 *pBuf);
//  125 void MT_ZdoUserDescSet(uint8 *pBuf);
//  126 void MT_ZdoServiceDiscRequest(uint8 *pBuf);
//  127 #if defined ( ZIGBEE_CHILD_AGING )
//  128 void MT_ZdoEndDeviceTimeoutRequest(uint8 *pBuf);
//  129 #endif // ZIGBEE_CHILD_AGING
//  130 void MT_ZdoEndDevBindRequest(uint8 *pBuf);
//  131 void MT_ZdoBindRequest(uint8 *pBuf);
//  132 void MT_ZdoUnbindRequest(uint8 *pBuf);
//  133 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
//  134 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  135 void MT_ZdoSetLinkKey(uint8 *pBuf);
//  136 void MT_ZdoRemoveLinkKey(uint8 *pBuf);
//  137 void MT_ZdoGetLinkKey(uint8 *pBuf);
//  138 #endif /* MT_SYS_KEY_MANAGEMENT */
//  139 void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
//  140 void MT_ZdoJoinReq(uint8 *pBuf);
//  141 /* Call back function */
//  142 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
//  143 void *MT_ZdoBeaconIndCB ( void *pStr );
//  144 void *MT_ZdoJoinCnfCB ( void *pStr );
//  145 #if defined (MT_ZDO_MGMT)
//  146 void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
//  147 void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
//  148 void MT_ZdoMgmtBindRequest(uint8 *pBuf);
//  149 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
//  150 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
//  151 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
//  152 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
//  153 #endif /* MT_ZDO_MGMT */
//  154 void MT_ZdoSendData( uint8 *pBuf );
//  155 void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
//  156 void MT_ZdoStartupFromApp(uint8 *pBuf);
//  157 void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
//  158 void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
//  159 #endif /* MT_ZDO_FUNC */
//  160 
//  161 #if defined (MT_ZDO_CB_FUNC)
//  162 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
//  163 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
//  164 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
//  165 void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
//  166 void* MT_ZdoSrcRtgCB( void *pStr );
//  167 static void *MT_ZdoConcentratorIndCB(void *pStr);
//  168 static void *MT_ZdoLeaveInd(void *vPtr);
//  169 void *MT_ZdoTcDeviceInd( void *params );
//  170 void *MT_ZdoPermitJoinInd( void *duration );
//  171 #endif /* MT_ZDO_CB_FUNC */
//  172 
//  173 #if defined ( MT_ZDO_EXTENSIONS )
//  174 static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf );
//  175 static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf );
//  176 void MT_ZdoSecAddLinkKey( uint8 *pBuf );
//  177 void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
//  178 void MT_ZdoSecDeviceRemove( uint8 *pBuf );
//  179 void MT_ZdoExtRouteDisc( uint8 *pBuf );
//  180 void MT_ZdoExtRouteCheck( uint8 *pBuf );
//  181 static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
//  182 static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
//  183 static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
//  184 static void MT_ZdoExtFindGroup( uint8 *pBuf );
//  185 static void MT_ZdoExtAddGroup( uint8 *pBuf );
//  186 static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
//  187 static void MT_ZdoExtRxIdle( uint8 *pBuf );
//  188 static void MT_ZdoExtNwkInfo( uint8 *pBuf );
//  189 static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf );
//  190 static void MT_ZdoExtSetParams( uint8 *pBuf );
//  191 extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
//  192 #endif // MT_ZDO_EXTENSIONS
//  193 
//  194 #if defined (MT_ZDO_FUNC)
//  195 /***************************************************************************************************
//  196  * @fn      MT_ZdoInit
//  197  *
//  198  * @brief   MT ZDO initialization
//  199  *
//  200  * @param   none
//  201  *
//  202  * @return  none
//  203  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  204 void MT_ZdoInit(void)
MT_ZdoInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_ZdoInit
        CODE
//  205 {
        ; Saved register size: 0
        ; Auto size: 0
//  206 #ifdef MT_ZDO_CB_FUNC
//  207   /* Register with ZDO for indication callbacks */
//  208   ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
//  209   ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
//  210   ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
//  211   ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &MT_ZdoPermitJoinInd);
//  212   ZDO_RegisterForZdoCB(ZDO_TC_DEVICE_CBID, &MT_ZdoTcDeviceInd);
//  213 #endif
//  214 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock0
//  215 
//  216 /***************************************************************************************************
//  217  * @fn      MT_ZdoCommandProcessing
//  218  *
//  219  * @brief
//  220  *
//  221  *   Process all the ZDO commands that are issued by test tool
//  222  *
//  223  * @param   pBuf - pointer to the msg buffer
//  224  *
//  225  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  226  *          |  1   |   1   |   1   |  0-255 |
//  227  *
//  228  * @return  status
//  229  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  230 uint8 MT_ZdoCommandProcessing(uint8* pBuf)
MT_ZdoCommandProcessing:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
        CODE
//  231 {
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNWKAddressRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoIEEEAddrRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNodeDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoPowerDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoSimpleDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoActiveEpRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoMatchDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoComplexDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUserDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoEndDevAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUserDescSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoServiceDiscRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoEndDeviceTimeoutRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoEndDevBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUnbindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNetworkDiscoveryReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoStartupFromApp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoSendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNwkAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoRegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoRemoveRegisteredCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  232   uint8 status = MT_RPC_SUCCESS;
        MOV     R6,#0x0
//  233 
//  234   switch (pBuf[MT_RPC_POS_CMD1])
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??MT_ZdoCommandProcessing_0
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_1
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_2
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_3
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_4
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_5
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_6
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_7
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_8
        ADD     A,#-0x2
        JZ      ??MT_ZdoCommandProcessing_9
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_10
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_11
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_12
        ADD     A,#-0x13
        JZ      ??MT_ZdoCommandProcessing_13
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_14
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_15
        ADD     A,#-0x4
        JZ      ??MT_ZdoCommandProcessing_16
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_17
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_18
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_19
        ADD     A,#-0x15
        JZ      ??MT_ZdoCommandProcessing_20
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_21
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_22
        SJMP    ??MT_ZdoCommandProcessing_23
//  235   {
//  236 #if defined ( ZDO_NWKADDR_REQUEST )
//  237     case MT_ZDO_NWK_ADDR_REQ:
//  238       MT_ZdoNWKAddressRequest(pBuf);
??MT_ZdoCommandProcessing_0:
        ; Setup parameters for call to function MT_ZdoNWKAddressRequest
        LCALL   ??MT_ZdoNWKAddressRequest?relay; Banked call to: MT_ZdoNWKAddressRequest
//  239       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  240 #endif
//  241 
//  242 #if defined ( ZDO_IEEEADDR_REQUEST )
//  243     case MT_ZDO_IEEE_ADDR_REQ:
//  244       MT_ZdoIEEEAddrRequest(pBuf);
??MT_ZdoCommandProcessing_1:
        ; Setup parameters for call to function MT_ZdoIEEEAddrRequest
        LCALL   ??MT_ZdoIEEEAddrRequest?relay; Banked call to: MT_ZdoIEEEAddrRequest
//  245       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  246 #endif
//  247 
//  248 #if defined ( ZDO_NODEDESC_REQUEST )
//  249     case MT_ZDO_NODE_DESC_REQ:
//  250       MT_ZdoNodeDescRequest(pBuf);
??MT_ZdoCommandProcessing_2:
        ; Setup parameters for call to function MT_ZdoNodeDescRequest
        LCALL   ??MT_ZdoNodeDescRequest?relay; Banked call to: MT_ZdoNodeDescRequest
//  251       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  252 #endif
//  253 
//  254 #if defined ( ZDO_POWERDESC_REQUEST )
//  255     case MT_ZDO_POWER_DESC_REQ:
//  256       MT_ZdoPowerDescRequest(pBuf);
??MT_ZdoCommandProcessing_3:
        ; Setup parameters for call to function MT_ZdoPowerDescRequest
        LCALL   ??MT_ZdoPowerDescRequest?relay; Banked call to: MT_ZdoPowerDescRequest
//  257       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  258 #endif
//  259 
//  260 #if defined ( ZDO_SIMPLEDESC_REQUEST )
//  261     case MT_ZDO_SIMPLE_DESC_REQ:
//  262       MT_ZdoSimpleDescRequest(pBuf);
??MT_ZdoCommandProcessing_4:
        ; Setup parameters for call to function MT_ZdoSimpleDescRequest
        LCALL   ??MT_ZdoSimpleDescRequest?relay; Banked call to: MT_ZdoSimpleDescRequest
//  263       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  264 #endif
//  265 
//  266 #if defined ( ZDO_ACTIVEEP_REQUEST )
//  267     case MT_ZDO_ACTIVE_EP_REQ:
//  268       MT_ZdoActiveEpRequest(pBuf);
??MT_ZdoCommandProcessing_5:
        ; Setup parameters for call to function MT_ZdoActiveEpRequest
        LCALL   ??MT_ZdoActiveEpRequest?relay; Banked call to: MT_ZdoActiveEpRequest
//  269       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  270 #endif
//  271 
//  272 #if defined ( ZDO_MATCH_REQUEST )
//  273     case MT_ZDO_MATCH_DESC_REQ:
//  274       MT_ZdoMatchDescRequest(pBuf);
??MT_ZdoCommandProcessing_6:
        ; Setup parameters for call to function MT_ZdoMatchDescRequest
        LCALL   ??MT_ZdoMatchDescRequest?relay; Banked call to: MT_ZdoMatchDescRequest
//  275       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  276 #endif
//  277 
//  278 #if defined ( ZDO_COMPLEXDESC_REQUEST )
//  279     case MT_ZDO_COMPLEX_DESC_REQ:
//  280       MT_ZdoComplexDescRequest(pBuf);
??MT_ZdoCommandProcessing_7:
        ; Setup parameters for call to function MT_ZdoComplexDescRequest
        LCALL   ??MT_ZdoComplexDescRequest?relay; Banked call to: MT_ZdoComplexDescRequest
//  281       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  282 #endif
//  283 
//  284 #if defined ( ZDO_USERDESC_REQUEST )
//  285     case MT_ZDO_USER_DESC_REQ:
//  286       MT_ZdoUserDescRequest(pBuf);
??MT_ZdoCommandProcessing_8:
        ; Setup parameters for call to function MT_ZdoUserDescRequest
        LCALL   ??MT_ZdoUserDescRequest?relay; Banked call to: MT_ZdoUserDescRequest
//  287       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  288 #endif
//  289 
//  290 #if defined ( ZDO_ENDDEVICE_ANNCE )
//  291     case MT_ZDO_END_DEV_ANNCE:
//  292       MT_ZdoEndDevAnnce(pBuf);
??MT_ZdoCommandProcessing_9:
        ; Setup parameters for call to function MT_ZdoEndDevAnnce
        LCALL   ??MT_ZdoEndDevAnnce?relay; Banked call to: MT_ZdoEndDevAnnce
//  293       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  294 #endif
//  295 
//  296 #if defined ( ZDO_USERDESCSET_REQUEST )
//  297     case MT_ZDO_USER_DESC_SET:
//  298       MT_ZdoUserDescSet(pBuf);
??MT_ZdoCommandProcessing_10:
        ; Setup parameters for call to function MT_ZdoUserDescSet
        LCALL   ??MT_ZdoUserDescSet?relay; Banked call to: MT_ZdoUserDescSet
//  299       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  300 #endif
//  301 
//  302 #if defined ( ZDO_SERVERDISC_REQUEST )
//  303     case MT_ZDO_SERVICE_DISC_REQ:
//  304       MT_ZdoServiceDiscRequest(pBuf);
??MT_ZdoCommandProcessing_11:
        ; Setup parameters for call to function MT_ZdoServiceDiscRequest
        LCALL   ??MT_ZdoServiceDiscRequest?relay; Banked call to: MT_ZdoServiceDiscRequest
//  305       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  306 #endif
//  307 
//  308 #if defined ( ZIGBEE_CHILD_AGING )
//  309 #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
//  310     case MT_ZDO_END_DEVICE_TIMEOUT_REQ:
//  311       MT_ZdoEndDeviceTimeoutRequest(pBuf);
??MT_ZdoCommandProcessing_12:
        ; Setup parameters for call to function MT_ZdoEndDeviceTimeoutRequest
        LCALL   ??MT_ZdoEndDeviceTimeoutRequest?relay; Banked call to: MT_ZdoEndDeviceTimeoutRequest
//  312       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  313 #endif
//  314 #endif // ZIGBEE_CHILD_AGING
//  315 
//  316 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
//  317     case MT_ZDO_END_DEV_BIND_REQ:
//  318       MT_ZdoEndDevBindRequest(pBuf);
??MT_ZdoCommandProcessing_13:
        ; Setup parameters for call to function MT_ZdoEndDevBindRequest
        LCALL   ??MT_ZdoEndDevBindRequest?relay; Banked call to: MT_ZdoEndDevBindRequest
//  319       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  320 #endif
//  321 
//  322 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  323     case MT_ZDO_BIND_REQ:
//  324       MT_ZdoBindRequest(pBuf);
??MT_ZdoCommandProcessing_14:
        ; Setup parameters for call to function MT_ZdoBindRequest
        LCALL   ??MT_ZdoBindRequest?relay; Banked call to: MT_ZdoBindRequest
//  325       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  326 #endif
//  327 
//  328 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  329     case MT_ZDO_UNBIND_REQ:
//  330       MT_ZdoUnbindRequest(pBuf);
??MT_ZdoCommandProcessing_15:
        ; Setup parameters for call to function MT_ZdoUnbindRequest
        LCALL   ??MT_ZdoUnbindRequest?relay; Banked call to: MT_ZdoUnbindRequest
//  331       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  332 #endif
//  333 
//  334 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  335     case MT_ZDO_SET_LINK_KEY:
//  336       MT_ZdoSetLinkKey(pBuf);
//  337       break;
//  338 
//  339     case MT_ZDO_REMOVE_LINK_KEY:
//  340       MT_ZdoRemoveLinkKey(pBuf);
//  341       break;
//  342 
//  343     case MT_ZDO_GET_LINK_KEY:
//  344       MT_ZdoGetLinkKey(pBuf);
//  345       break;
//  346 #endif // MT_SYS_KEY_MANAGEMENT
//  347 
//  348 #if defined ( ZDO_MANUAL_JOIN )
//  349     case MT_ZDO_NWK_DISCOVERY_REQ:
//  350       MT_ZdoNetworkDiscoveryReq(pBuf);
??MT_ZdoCommandProcessing_16:
        ; Setup parameters for call to function MT_ZdoNetworkDiscoveryReq
        LCALL   ??MT_ZdoNetworkDiscoveryReq?relay; Banked call to: MT_ZdoNetworkDiscoveryReq
//  351       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  352 
//  353     case MT_ZDO_JOIN_REQ:
//  354       MT_ZdoJoinReq(pBuf);
??MT_ZdoCommandProcessing_17:
        ; Setup parameters for call to function MT_ZdoJoinReq
        LCALL   ??MT_ZdoJoinReq?relay; Banked call to: MT_ZdoJoinReq
//  355       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  356 #endif
//  357 
//  358 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
//  359     case MT_ZDO_MGMT_NWKDISC_REQ:
//  360       MT_ZdoMgmtNwkDiscRequest(pBuf);
//  361       break;
//  362 #endif
//  363 
//  364 #if defined ( ZDO_MGMT_LQI_REQUEST )
//  365     case MT_ZDO_MGMT_LQI_REQ:
//  366       MT_ZdoMgmtLqiRequest(pBuf);
//  367       break;
//  368 #endif
//  369 
//  370 #if defined ( ZDO_MGMT_RTG_REQUEST )
//  371     case MT_ZDO_MGMT_RTG_REQ:
//  372       MT_ZdoMgmtRtgRequest(pBuf);
//  373       break;
//  374 #endif
//  375 
//  376 #if defined ( ZDO_MGMT_BIND_REQUEST )
//  377     case MT_ZDO_MGMT_BIND_REQ:
//  378       MT_ZdoMgmtBindRequest(pBuf);
//  379       break;
//  380 #endif
//  381 
//  382 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
//  383     case MT_ZDO_MGMT_LEAVE_REQ:
//  384       MT_ZdoMgmtLeaveRequest(pBuf);
//  385       break;
//  386 #endif
//  387 
//  388 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
//  389     case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
//  390       MT_ZdoMgmtDirectJoinRequest(pBuf);
//  391       break;
//  392 #endif
//  393 
//  394 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
//  395     case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
//  396       MT_ZdoMgmtPermitJoinRequest(pBuf);
//  397       break;
//  398 #endif
//  399 
//  400 #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
//  401     case MT_ZDO_MGMT_NWK_UPDATE_REQ:
//  402       MT_ZdoMgmtNwkUpdateRequest(pBuf);
//  403       break;
//  404 #endif
//  405 
//  406 #if defined ( ZDO_NETWORKSTART_REQUEST )
//  407     case MT_ZDO_STARTUP_FROM_APP:
//  408       MT_ZdoStartupFromApp(pBuf);
??MT_ZdoCommandProcessing_22:
        ; Setup parameters for call to function MT_ZdoStartupFromApp
        LCALL   ??MT_ZdoStartupFromApp?relay; Banked call to: MT_ZdoStartupFromApp
//  409       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  410 #endif
//  411 
//  412     case MT_ZDO_SEND_DATA:
//  413       MT_ZdoSendData( pBuf );
??MT_ZdoCommandProcessing_18:
        ; Setup parameters for call to function MT_ZdoSendData
        LCALL   ??MT_ZdoSendData?relay; Banked call to: MT_ZdoSendData
//  414       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  415 
//  416     case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
//  417       MT_ZdoNwkAddrOfInterestReq( pBuf );
??MT_ZdoCommandProcessing_19:
        ; Setup parameters for call to function MT_ZdoNwkAddrOfInterestReq
        LCALL   ??MT_ZdoNwkAddrOfInterestReq?relay; Banked call to: MT_ZdoNwkAddrOfInterestReq
//  418       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  419 
//  420     case MT_ZDO_MSG_CB_REGISTER:
//  421       MT_ZdoRegisterForZDOMsg(pBuf);
??MT_ZdoCommandProcessing_20:
        ; Setup parameters for call to function MT_ZdoRegisterForZDOMsg
        LCALL   ??MT_ZdoRegisterForZDOMsg?relay; Banked call to: MT_ZdoRegisterForZDOMsg
//  422       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  423 
//  424     case MT_ZDO_MSG_CB_REMOVE:
//  425       MT_ZdoRemoveRegisteredCB(pBuf);
??MT_ZdoCommandProcessing_21:
        ; Setup parameters for call to function MT_ZdoRemoveRegisteredCB
        LCALL   ??MT_ZdoRemoveRegisteredCB?relay; Banked call to: MT_ZdoRemoveRegisteredCB
//  426       break;
        SJMP    ??MT_ZdoCommandProcessing_24
//  427 
//  428 #if defined ( MT_ZDO_EXTENSIONS )
//  429     case MT_ZDO_EXT_UPDATE_NWK_KEY:
//  430       MT_ZdoSecUpdateNwkKey( pBuf );
//  431       break;
//  432 
//  433     case MT_ZDO_EXT_SWITCH_NWK_KEY:
//  434       MT_ZdoSecSwitchNwkKey( pBuf );
//  435       break;
//  436 
//  437     case MT_ZDO_SEC_ADD_LINK_KEY:
//  438       MT_ZdoSecAddLinkKey( pBuf );
//  439       break;
//  440 
//  441     case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
//  442       MT_ZdoSecEntryLookupExt( pBuf );
//  443       break;
//  444 
//  445     case MT_ZDO_SEC_DEVICE_REMOVE:
//  446        MT_ZdoSecDeviceRemove( pBuf );
//  447        break;
//  448 
//  449     case MT_ZDO_EXT_ROUTE_DISC:
//  450        MT_ZdoExtRouteDisc( pBuf );
//  451        break;
//  452 
//  453     case MT_ZDO_EXT_ROUTE_CHECK:
//  454        MT_ZdoExtRouteCheck( pBuf );
//  455        break;
//  456 
//  457     case MT_ZDO_EXT_REMOVE_GROUP:
//  458       MT_ZdoExtRemoveGroup( pBuf );
//  459       break;
//  460 
//  461     case MT_ZDO_EXT_REMOVE_ALL_GROUP:
//  462       MT_ZdoExtRemoveAllGroup( pBuf );
//  463       break;
//  464 
//  465     case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
//  466       MT_ZdoExtFindAllGroupsEndpoint( pBuf );
//  467       break;
//  468 
//  469     case MT_ZDO_EXT_FIND_GROUP:
//  470       MT_ZdoExtFindGroup( pBuf );
//  471       break;
//  472 
//  473     case MT_ZDO_EXT_ADD_GROUP:
//  474       MT_ZdoExtAddGroup( pBuf );
//  475       break;
//  476 
//  477     case MT_ZDO_EXT_COUNT_ALL_GROUPS:
//  478       MT_ZdoExtCountAllGroups( pBuf );
//  479       break;
//  480 
//  481     case MT_ZDO_EXT_RX_IDLE:
//  482       MT_ZdoExtRxIdle( pBuf );
//  483       break;
//  484       
//  485     case MT_ZDO_EXT_NWK_INFO:
//  486       MT_ZdoExtNwkInfo( pBuf );
//  487       break;
//  488       
//  489     case MT_ZDO_EXT_SEC_APS_REMOVE_REQ:
//  490       MT_ZdoExtSecApsRemoveReq( pBuf );
//  491       break;
//  492       
//  493     case MT_ZDO_FORCE_CONCENTRATOR_CHANGE:
//  494       ZDApp_ForceConcentratorChange();
//  495       break;
//  496       
//  497     case MT_ZDO_EXT_SET_PARAMS:
//  498       MT_ZdoExtSetParams( pBuf );
//  499       break;
//  500 #endif  // MT_ZDO_EXTENSIONS
//  501 
//  502     default:
//  503       status = MT_RPC_ERR_COMMAND_ID;
??MT_ZdoCommandProcessing_23:
        MOV     R6,#0x2
//  504       break;
//  505   }
//  506 
//  507   return status;
??MT_ZdoCommandProcessing_24:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine69_0 & 0xFFFF
          CFI EndBlock cfiBlock1
//  508 }
//  509 
//  510 /***************************************************************************************************
//  511  * @fn      MT_ZdoNwkAddrReq
//  512  *
//  513  * @brief   Handle a nwk address request.
//  514  *
//  515  * @param   pData  - MT message data
//  516  *
//  517  * @return  void
//  518  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  519 void MT_ZdoNWKAddressRequest(uint8 *pBuf)
MT_ZdoNWKAddressRequest:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
        CODE
//  520 {
        FUNCALL MT_ZdoNWKAddressRequest, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNWKAddressRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  521   uint8 cmdId;
//  522   uint8 retValue;
//  523   uint8 reqType;
//  524   uint8 startIndex;
//  525   uint8 *pExtAddr;
//  526 
//  527   /* parse header */
//  528   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine30 & 0xFFFF
//  529   pBuf += MT_RPC_FRAME_HDR_SZ;
//  530 
//  531   /* parse parameters */
//  532   pExtAddr = pBuf;
??CrossCallReturnLabel_44:
        MOV     R6,A
        CLR     A
        ADDC    A,R3
        MOV     R7,A
//  533   pBuf += Z_EXTADDR_LEN;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
//  534 
//  535   /* Request type */
//  536   reqType = *pBuf++;
        LCALL   ?Subroutine29 & 0xFFFF
//  537 
//  538   /* Start index */
//  539   startIndex = *pBuf;
//  540 
//  541   retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
??CrossCallReturnLabel_42:
        LCALL   ??ZDP_NwkAddrReq?relay; Banked call to: ZDP_NwkAddrReq
          CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
//  542 
//  543   /* Build and send back the response */
//  544   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  545   
//  546 #if defined ( MT_ZDO_EXTENSIONS )
//  547   {
//  548     // Force a response message if the ext address matches a child of this device
//  549     associated_devices_t *pAssoc;
//  550     uint8 buf[21];
//  551     uint8 *pBuf = buf;
//  552     
//  553     if ( (ZSTACK_ROUTER_BUILD)
//  554       && (((pAssoc = AssocGetWithExt( pExtAddr )) != NULL)
//  555              && (pAssoc->nodeRelation == CHILD_RFD)) )
//  556     {
//  557       uint16 nwkAddr = NLME_GetShortAddr();
//  558       
//  559       *pBuf++ = LO_UINT16(nwkAddr);
//  560       *pBuf++ = HI_UINT16(nwkAddr);
//  561       *pBuf++ = 0;
//  562       *pBuf++ = LO_UINT16(NWK_addr_rsp);
//  563       *pBuf++ = HI_UINT16(NWK_addr_rsp);
//  564       *pBuf++ = 0;
//  565       *pBuf++ = 0;
//  566       *pBuf++ = LO_UINT16(nwkAddr);
//  567       *pBuf++ = HI_UINT16(nwkAddr);
//  568     
//  569       *pBuf++ = ZSuccess;
//  570 
//  571       pBuf = osal_cpyExtAddr( pBuf, pExtAddr );
//  572 
//  573       *pBuf++ = LO_UINT16( pAssoc->shortAddr );
//  574       *pBuf++ = HI_UINT16( pAssoc->shortAddr );
//  575       *pBuf = 0;
//  576 
//  577       MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), 
//  578                                   MT_ZDO_MSG_CB_INCOMING, 21, buf );
//  579     }
//  580   }
//  581 #endif  
//  582 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_73:
        SJMP    ??Subroutine63_0
          CFI EndBlock cfiBlock3
//  583 
//  584 /***************************************************************************************************
//  585  * @fn      MT_ZdoIEEEAddrRequest
//  586  *
//  587  * @brief   Handle a IEEE address request.
//  588  *
//  589  * @param   pData  - MT message data
//  590  *
//  591  * @return  void
//  592  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  593 void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
MT_ZdoIEEEAddrRequest:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function MT_ZdoIEEEAddrRequest
        CODE
//  594 {
        FUNCALL MT_ZdoIEEEAddrRequest, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoIEEEAddrRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  595   uint8 cmdId;
//  596   uint8 retValue;
//  597   uint16 shortAddr;
//  598   uint8 reqType;
//  599   uint8 startIndex;
//  600 
//  601   /* parse header */
//  602   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine30 & 0xFFFF
//  603   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_45:
        MOV     R2,A
        JNC     ??MT_ZdoIEEEAddrRequest_0
        INC     R3
//  604 
//  605   /* Dev address */
//  606   shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
??MT_ZdoIEEEAddrRequest_0:
        LCALL   ?Subroutine20 & 0xFFFF
//  607   pBuf += 2;
??CrossCallReturnLabel_28:
        JNC     ??MT_ZdoIEEEAddrRequest_1
        INC     R3
//  608 
//  609   /* request type */
//  610   reqType = *pBuf++;
??MT_ZdoIEEEAddrRequest_1:
        LCALL   ?Subroutine29 & 0xFFFF
//  611 
//  612   /* start index */
//  613   startIndex = *pBuf;
//  614 
//  615   retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
??CrossCallReturnLabel_43:
        LCALL   ??ZDP_IEEEAddrReq?relay; Banked call to: ZDP_IEEEAddrReq
        SJMP    ?Subroutine6
          CFI EndBlock cfiBlock4
//  616 
//  617   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  618 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function MT_ZdoIEEEAddrRequest
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     A,R2
        ADD     A,#0x3
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function MT_ZdoIEEEAddrRequest
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        ; Setup parameters for call to function ZDP_NwkAddrReq
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV     R5,#0x0
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine54 & 0xFFFF
          CFI EndBlock cfiBlock12
??CrossCallReturnLabel_125:
        REQUIRE ??Subroutine63_0
        ; // Fall through to label ??Subroutine63_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine63_0:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
          CFI EndBlock cfiBlock13
        REQUIRE ??Subroutine64_0
        ; // Fall through to label ??Subroutine64_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine64_0:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x1
        LJMP    ??Subroutine68_0 & 0xFFFF
          CFI EndBlock cfiBlock14
//  619 
//  620 /***************************************************************************************************
//  621  * @fn      MT_ZdoNodeDescRequest
//  622  *
//  623  * @brief   Handle a Node Descriptor request.
//  624  *
//  625  * @param   pData  - MT message data
//  626  *
//  627  * @return  void
//  628  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  629 void MT_ZdoNodeDescRequest (uint8 *pBuf)
MT_ZdoNodeDescRequest:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
        CODE
//  630 {
        FUNCALL MT_ZdoNodeDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNodeDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  631   uint8 cmdId;
//  632   uint8 retValue;
//  633   zAddrType_t destAddr;
//  634   uint16 shortAddr;
//  635 
//  636   /* parse header */
//  637   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine65_0 & 0xFFFF
//  638   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_114:
        JNC     ??MT_ZdoNodeDescRequest_0
        INC     R3
//  639 
//  640   /* Destination address */
//  641   destAddr.addrMode = Addr16Bit;
??MT_ZdoNodeDescRequest_0:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  642   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_0:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
//  643   pBuf += 2;
??CrossCallReturnLabel_57:
        JNC     ??MT_ZdoNodeDescRequest_1
        INC     R3
//  644 
//  645   /* Network address of interest */
//  646   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  647   pBuf += 2;
//  648 
//  649   retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
??MT_ZdoNodeDescRequest_1:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x2
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV     A,R1
        LJMP    ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock15
//  650 
//  651   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  652 }
//  653 
//  654 /***************************************************************************************************
//  655  * @fn      MT_ZdoPowerDescRequest
//  656  *
//  657  * @brief   Handle a Power Descriptor request.
//  658  *
//  659  * @param   pData  - MT message data
//  660  *
//  661  * @return  void
//  662  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  663 void MT_ZdoPowerDescRequest(uint8 *pBuf)
MT_ZdoPowerDescRequest:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function MT_ZdoPowerDescRequest
        CODE
//  664 {
        FUNCALL MT_ZdoPowerDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoPowerDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  665   uint8 cmdId;
//  666   uint8 retValue;
//  667   zAddrType_t destAddr;
//  668   uint16 shortAddr;
//  669 
//  670   /* parse header */
//  671   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine65_0 & 0xFFFF
//  672   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_115:
        JNC     ??MT_ZdoPowerDescRequest_0
        INC     R3
//  673 
//  674   /* Dev address */
//  675   destAddr.addrMode = Addr16Bit;
??MT_ZdoPowerDescRequest_0:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  676   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_1:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
//  677   pBuf += 2;
??CrossCallReturnLabel_58:
        JNC     ??MT_ZdoPowerDescRequest_1
        INC     R3
//  678 
//  679   /* Network address of interest */
//  680   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  681   pBuf += 2;
//  682 
//  683   retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
??MT_ZdoPowerDescRequest_1:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x3
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock16
//  684 
//  685   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  686 }
//  687 
//  688 /***************************************************************************************************
//  689  * @fn      MT_ZdoSimpleDescRequest
//  690  *
//  691  * @brief   Handle a Simple Descriptor request.
//  692  *
//  693  * @param   pBuf  - MT message data
//  694  *
//  695  * @return  void
//  696  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  697 void MT_ZdoSimpleDescRequest(uint8 *pBuf)
MT_ZdoSimpleDescRequest:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function MT_ZdoSimpleDescRequest
        CODE
//  698 {
        FUNCALL MT_ZdoSimpleDescRequest, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSimpleDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  699   uint8 cmdId;
//  700   uint8 retValue;
//  701   uint8 epInt;
//  702   zAddrType_t destAddr;
//  703   uint16 shortAddr;
//  704 
//  705   /* parse header */
//  706   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine65_0 & 0xFFFF
//  707   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_116:
        JNC     ??MT_ZdoSimpleDescRequest_0
        INC     R3
//  708 
//  709   /* Dev address */
//  710   destAddr.addrMode = Addr16Bit;
??MT_ZdoSimpleDescRequest_0:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  711   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_2:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
//  712   pBuf += 2;
??CrossCallReturnLabel_59:
        JNC     ??MT_ZdoSimpleDescRequest_1
        INC     R3
//  713 
//  714   /* Network address of interest */
//  715   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  716   pBuf += 2;
//  717 
//  718   /* endpoint/interface */
//  719   epInt = *pBuf++;
//  720 
//  721   retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
??MT_ZdoSimpleDescRequest_1:
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??ZDP_SimpleDescReq?relay; Banked call to: ZDP_SimpleDescReq
        LJMP    ??Subroutine67_0 & 0xFFFF
          CFI EndBlock cfiBlock17
//  722 
//  723   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  724 }
//  725 
//  726 /***************************************************************************************************
//  727  * @fn      MT_ZdoActiveEpRequest
//  728  *
//  729  * @brief   Handle a Active EP request.
//  730  *
//  731  * @param   pBuf  - MT message data
//  732  *
//  733  * @return  void
//  734  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  735 void MT_ZdoActiveEpRequest(uint8 *pBuf)
MT_ZdoActiveEpRequest:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function MT_ZdoActiveEpRequest
        CODE
//  736 {
        FUNCALL MT_ZdoActiveEpRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoActiveEpRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  737   uint8 cmdId;
//  738   uint8 retValue;
//  739   zAddrType_t destAddr;
//  740   uint16 shortAddr;
//  741 
//  742   /* parse header */
//  743   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine65_0 & 0xFFFF
//  744   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_117:
        JNC     ??MT_ZdoActiveEpRequest_0
        INC     R3
//  745 
//  746   /* Dev address */
//  747   destAddr.addrMode = Addr16Bit;
??MT_ZdoActiveEpRequest_0:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  748   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_3:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
//  749   pBuf += 2;
??CrossCallReturnLabel_60:
        JNC     ??MT_ZdoActiveEpRequest_1
        INC     R3
//  750 
//  751   /* Network address of interest */
//  752   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  753   pBuf += 2;
//  754 
//  755   retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
??MT_ZdoActiveEpRequest_1:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x5
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock18
//  756 
//  757   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  758 }
//  759 
//  760 /***************************************************************************************************
//  761  * @fn      MT_ZdoMatchDescRequest
//  762  *
//  763  * @brief   Handle a Match Descriptor request.
//  764  *
//  765  * @param   pBuf  - MT message data
//  766  *
//  767  * @return  void
//  768  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  769 void MT_ZdoMatchDescRequest(uint8 *pBuf)
MT_ZdoMatchDescRequest:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
        CODE
//  770 {
        FUNCALL MT_ZdoMatchDescRequest, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 96, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 88, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 88, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 74
        MOV     A,#-0x4a
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 88)
//  771   uint8 cmdId;
//  772   uint8 retValue = 0;
        LCALL   ?Subroutine9 & 0xFFFF
//  773   uint8 i, numInClusters, numOutClusters;
//  774   uint16 profileId;
//  775   zAddrType_t destAddr;
//  776   uint16 shortAddr;
//  777   uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
//  778 
//  779   /* parse header */
//  780   cmdId = pBuf[MT_RPC_POS_CMD1];
//  781   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_112:
        JNC     ??MT_ZdoMatchDescRequest_0
        INC     R3
//  782 
//  783   /* Dev address */
//  784   destAddr.addrMode = Addr16Bit;
??MT_ZdoMatchDescRequest_0:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  785   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_4:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
//  786   pBuf += 2;
??CrossCallReturnLabel_61:
        JNC     ??MT_ZdoMatchDescRequest_1
        INC     R3
//  787 
//  788   /* Network address of interest */
//  789   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoMatchDescRequest_1:
        LCALL   ?Subroutine26 & 0xFFFF
//  790   pBuf += 2;
??CrossCallReturnLabel_36:
        ADD     A,#0x2
        MOV     R2,A
        JNC     ??MT_ZdoMatchDescRequest_2
        INC     R3
//  791 
//  792   /* Profile ID */
//  793   profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoMatchDescRequest_2:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine16 & 0xFFFF
//  794   pBuf += 2;
??CrossCallReturnLabel_20:
        JNC     ??MT_ZdoMatchDescRequest_3
        INC     R3
//  795 
//  796   /* NumInClusters */
//  797   numInClusters = *pBuf++;
??MT_ZdoMatchDescRequest_3:
        LCALL   ?Subroutine34 & 0xFFFF
//  798   if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
??CrossCallReturnLabel_51:
        CLR     C
        SUBB    A,#0x11
        JNC     ??MT_ZdoMatchDescRequest_4
//  799   {
//  800     /* IN clusters */
//  801     for ( i = 0; i < numInClusters; i++ )
        MOV     R7,#0x0
??MT_ZdoMatchDescRequest_5:
        MOV     A,R7
        CLR     C
        SUBB    A,?V2
        JNC     ??MT_ZdoMatchDescRequest_6
//  802     {
//  803       inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
        LCALL   ?Subroutine13 & 0xFFFF
//  804       pBuf += 2;
//  805     }
??CrossCallReturnLabel_14:
        MOV     A,#0x2a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_67:
        JNC     ??MT_ZdoMatchDescRequest_7
        INC     R3
??MT_ZdoMatchDescRequest_7:
        INC     R7
        SJMP    ??MT_ZdoMatchDescRequest_5
//  806   }
//  807   else
//  808   {
//  809     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x80
        MOVX    @DPTR,A
//  810   }
//  811 
//  812   /* NumOutClusters */
//  813   numOutClusters = *pBuf++;
??MT_ZdoMatchDescRequest_6:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V3,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  814   if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
        CLR     C
        SUBB    A,#0x11
        JNC     ??MT_ZdoMatchDescRequest_8
//  815   {
//  816     /* OUT Clusters */
//  817     for ( i = 0; i < numOutClusters; i++ )
        MOV     R7,#0x0
??MT_ZdoMatchDescRequest_9:
        MOV     A,R7
        CLR     C
        SUBB    A,?V3
        JNC     ??MT_ZdoMatchDescRequest_10
//  818     {
//  819       outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
        LCALL   ?Subroutine12 & 0xFFFF
//  820       pBuf += 2;
//  821     }
??CrossCallReturnLabel_12:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_68:
        JNC     ??MT_ZdoMatchDescRequest_11
        INC     R3
??MT_ZdoMatchDescRequest_11:
        INC     R7
        SJMP    ??MT_ZdoMatchDescRequest_9
//  822   }
//  823   else
//  824   {
//  825     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_8:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x80
        SJMP    ??MT_ZdoMatchDescRequest_12
//  826   }
//  827 
//  828   if ( retValue == 0 )
??MT_ZdoMatchDescRequest_10:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??MT_ZdoMatchDescRequest_13
//  829   {
//  830     retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
//  831                                        inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V4,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 91)
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 92)
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 96)
        MOV     R1,?V2
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??ZDP_MatchDescReq?relay; Banked call to: ZDP_MatchDescReq
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 88)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
??MT_ZdoMatchDescRequest_12:
        MOVX    @DPTR,A
//  832   }
//  833 
//  834   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoMatchDescRequest_13:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
//  835 }
        MOV     A,#0x4a
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock19
//  836 
//  837 /***************************************************************************************************
//  838  * @fn      MT_ZdoComplexDescRequest
//  839  *
//  840  * @brief   Handle a Complex Descriptor request.
//  841  *
//  842  * @param   pBuf  - MT message data
//  843  *
//  844  * @return  void
//  845  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  846 void MT_ZdoComplexDescRequest(uint8 *pBuf)
MT_ZdoComplexDescRequest:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function MT_ZdoComplexDescRequest
        CODE
//  847 {
        FUNCALL MT_ZdoComplexDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoComplexDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  848   uint8 cmdId;
//  849   uint8 retValue;
//  850   zAddrType_t destAddr;
//  851   uint16 shortAddr;
//  852 
//  853   /* parse header */
//  854   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine65_0 & 0xFFFF
//  855   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_118:
        JNC     ??MT_ZdoComplexDescRequest_0
        INC     R3
//  856 
//  857   /* Dev address */
//  858   destAddr.addrMode = Addr16Bit;
??MT_ZdoComplexDescRequest_0:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  859   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_5:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
//  860   pBuf += 2;
??CrossCallReturnLabel_62:
        JNC     ??MT_ZdoComplexDescRequest_1
        INC     R3
//  861 
//  862   /* Network address of interest */
//  863   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  864   pBuf += 2;
//  865 
//  866   retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
??MT_ZdoComplexDescRequest_1:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x10
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock20
//  867 
//  868   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  869 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function MT_ZdoPowerDescRequest
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function MT_ZdoActiveEpRequest
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function MT_ZdoMatchDescRequest
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function MT_ZdoComplexDescRequest
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function MT_ZdoUserDescRequest
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function MT_ZdoUserDescSet
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_105:
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function MT_ZdoPowerDescRequest
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function MT_ZdoActiveEpRequest
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function MT_ZdoMatchDescRequest
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function MT_ZdoComplexDescRequest
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function MT_ZdoUserDescRequest
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function MT_ZdoUserDescSet
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker42 Using cfiCommon1
          CFI (cfiPicker42) NoFunction
          CFI (cfiPicker42) Picker
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,#0x1
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiPicker42
//  870 
//  871 /***************************************************************************************************
//  872  * @fn      MT_ZdoUserDescRequest
//  873  *
//  874  * @brief   Handle a User Descriptor request.
//  875  *
//  876  * @param   pBuf  - MT message data
//  877  *
//  878  * @return  void
//  879  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  880 void MT_ZdoUserDescRequest(uint8 *pBuf)
MT_ZdoUserDescRequest:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function MT_ZdoUserDescRequest
        CODE
//  881 {
        FUNCALL MT_ZdoUserDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  882   uint8 cmdId;
//  883   uint8 retValue;
//  884   zAddrType_t destAddr;
//  885   uint16 shortAddr;
//  886 
//  887   /* parse header */
//  888   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine65_0 & 0xFFFF
//  889   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_119:
        JNC     ??MT_ZdoUserDescRequest_0
        INC     R3
//  890 
//  891   /* Dev address */
//  892   destAddr.addrMode = Addr16Bit;
??MT_ZdoUserDescRequest_0:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  893   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
??CrossCallReturnLabel_6:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
//  894   pBuf += 2;
??CrossCallReturnLabel_63:
        JNC     ??MT_ZdoUserDescRequest_1
        INC     R3
//  895 
//  896   /* Network address of interest */
//  897   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
//  898   pBuf += 2;
//  899 
//  900   retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
??MT_ZdoUserDescRequest_1:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x11
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock43
//  901 
//  902   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  903 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_112
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46
        REQUIRE ??Subroutine65_0
        ; // Fall through to label ??Subroutine65_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine65_0:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
          CFI Conditional ??CrossCallReturnLabel_114
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function MT_ZdoPowerDescRequest
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function MT_ZdoActiveEpRequest
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function MT_ZdoComplexDescRequest
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function MT_ZdoUserDescRequest
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function MT_ZdoServiceDiscRequest
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function MT_ZdoMatchDescRequest
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,R2
        ADD     A,#0x3
        MOV     R2,A
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58
//  904 
//  905 /***************************************************************************************************
//  906  * @fn      MT_ZdoEndDevAnnce
//  907  *
//  908  * @brief   Handle a End Device Announce Descriptor request.
//  909  *
//  910  * @param   pBuf  - MT message data
//  911  *
//  912  * @return  void
//  913  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  914 void MT_ZdoEndDevAnnce(uint8 *pBuf)
MT_ZdoEndDevAnnce:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI Function MT_ZdoEndDevAnnce
        CODE
//  915 {
        FUNCALL MT_ZdoEndDevAnnce, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevAnnce, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  916   uint8 cmdId;
//  917   uint8 retValue;
//  918   uint16 shortAddr;
//  919   uint8 *pIEEEAddr;
//  920 
//  921   /* parse header */
//  922   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  923   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R4
        ADD     A,#0x3
        MOV     R4,A
        JNC     ??MT_ZdoEndDevAnnce_0
        INC     R5
//  924 
//  925   /* network address */
//  926   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoEndDevAnnce_0:
        LCALL   ?Subroutine21 & 0xFFFF
//  927   pBuf += 2;
??CrossCallReturnLabel_30:
        JNC     ??MT_ZdoEndDevAnnce_1
        INC     R5
//  928 
//  929   /* extended address */
//  930   pIEEEAddr = pBuf;
//  931   pBuf += Z_EXTADDR_LEN;
//  932 
//  933   retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
??MT_ZdoEndDevAnnce_1:
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV     ?V0,R0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDP_DeviceAnnce?relay; Banked call to: ZDP_DeviceAnnce
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock59
//  934 
//  935   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  936 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine23 & 0xFFFF
          CFI EndBlock cfiBlock60
??CrossCallReturnLabel_33:
        REQUIRE ??Subroutine66_0
        ; // Fall through to label ??Subroutine66_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine66_0:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??ZDP_NWKAddrOfInterestReq?relay; Banked call to: ZDP_NWKAddrOfInterestReq
          CFI EndBlock cfiBlock61
        REQUIRE ??Subroutine67_0
        ; // Fall through to label ??Subroutine67_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine67_0:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_123:
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
        MOV     A,#0xa
          CFI EndBlock cfiBlock62
        REQUIRE ??Subroutine68_0
        ; // Fall through to label ??Subroutine68_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine68_0:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock63
        REQUIRE ??Subroutine69_0
        ; // Fall through to label ??Subroutine69_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine69_0:
          CFI Block cfiBlock64 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock64

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond65 Using cfiCommon0
          CFI Function MT_ZdoSimpleDescRequest
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function MT_ZdoPowerDescRequest
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function MT_ZdoActiveEpRequest
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function MT_ZdoComplexDescRequest
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function MT_ZdoUserDescRequest
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker70 Using cfiCommon1
          CFI (cfiPicker70) NoFunction
          CFI (cfiPicker70) Picker
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV     A,#0x2
        RET
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
          CFI Block cfiCond71 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
          CFI Conditional ??CrossCallReturnLabel_90
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_32
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-4
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function MT_ZdoPowerDescRequest
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_33
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-4
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function MT_ZdoActiveEpRequest
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_33
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-4
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function MT_ZdoComplexDescRequest
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_33
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-4
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function MT_ZdoUserDescRequest
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_33
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-4
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        XCH     A,R2
        MOV     R3,A
        MOV     A,R4
        ADD     A,R2
        CLR     A
        ADDC    A,R3
        MOV     R5,A
        RET
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77
//  937 
//  938 /***************************************************************************************************
//  939  * @fn      MT_ZdoUserDescSet
//  940  *
//  941  * @brief   Handle a User Descriptor Set.
//  942  *
//  943  * @param   pBuf  - MT message data
//  944  *
//  945  * @return  void
//  946  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  947 void MT_ZdoUserDescSet(uint8 *pBuf)
MT_ZdoUserDescSet:
          CFI Block cfiBlock78 Using cfiCommon0
          CFI Function MT_ZdoUserDescSet
        CODE
//  948 {
        FUNCALL MT_ZdoUserDescSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescSet, ZDP_UserDescSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescSet, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 27
        MOV     A,#-0x1b
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  949   uint8 cmdId;
//  950   uint8 retValue;
//  951   zAddrType_t destAddr;
//  952   uint16 shortAddr;
//  953   UserDescriptorFormat_t userDesc;
//  954 
//  955   /* parse header */
//  956   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
//  957   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     R2,A
        JNC     ??MT_ZdoUserDescSet_0
        INC     R3
//  958 
//  959   /* Dev address */
//  960   destAddr.addrMode = Addr16Bit;
??MT_ZdoUserDescSet_0:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  961   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_7:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
//  962   pBuf += 2;
??CrossCallReturnLabel_64:
        JNC     ??MT_ZdoUserDescSet_1
        INC     R3
//  963 
//  964   /* Network address of interest */
//  965   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoUserDescSet_1:
        LCALL   ?Subroutine20 & 0xFFFF
//  966   pBuf += 2;
??CrossCallReturnLabel_29:
        JNC     ??MT_ZdoUserDescSet_2
        INC     R3
//  967 
//  968   /* User descriptor */
//  969   userDesc.len = *pBuf++;
??MT_ZdoUserDescSet_2:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  970   osal_memcpy( userDesc.desc, pBuf, userDesc.len );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  971   pBuf += 16;
//  972 
//  973   retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
        ; Setup parameters for call to function ZDP_UserDescSet
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??ZDP_UserDescSet?relay; Banked call to: ZDP_UserDescSet
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        LCALL   ?Subroutine60 & 0xFFFF
//  974 
//  975   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??CrossCallReturnLabel_127:
        MOV     R2,?V3
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
//  976 }
        MOV     A,#0x1b
          CFI EndBlock cfiBlock78
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock79 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 39)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Valid
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock79

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function MT_ZdoIEEEAddrRequest
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function MT_ZdoUserDescSet
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker82 Using cfiCommon1
          CFI (cfiPicker82) NoFunction
          CFI (cfiPicker82) Picker
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_89:
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        RET
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiPicker82
//  977 
//  978 /***************************************************************************************************
//  979  * @fn      MT_ZdoServiceDiscRequest
//  980  *
//  981  * @brief   Handle a Server Discovery request.
//  982  *
//  983  * @param   pBuf  - MT message data
//  984  *
//  985  * @return  void
//  986  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  987 void MT_ZdoServiceDiscRequest(uint8 *pBuf)
MT_ZdoServiceDiscRequest:
          CFI Block cfiBlock83 Using cfiCommon0
          CFI Function MT_ZdoServiceDiscRequest
        CODE
//  988 {
        FUNCALL MT_ZdoServiceDiscRequest, ZDP_ServerDiscReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoServiceDiscRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  989   uint8 cmdId;
//  990   uint8 retValue;
//  991   uint16 serviceMask;
//  992 
//  993   /* parse header */
//  994   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine65_0 & 0xFFFF
//  995   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_120:
        JNC     ??MT_ZdoServiceDiscRequest_0
        INC     R3
//  996 
//  997   /* Service Mask */
//  998   serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
//  999   pBuf += 2;
// 1000 
// 1001   retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
??MT_ZdoServiceDiscRequest_0:
        ; Setup parameters for call to function ZDP_ServerDiscReq
        MOV     R1,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        MOV     R2,A
        LCALL   ??ZDP_ServerDiscReq?relay; Banked call to: ZDP_ServerDiscReq
        LJMP    ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock83
// 1002 
// 1003   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1004 }
// 1005 
// 1006 #if defined ( ZIGBEE_CHILD_AGING )
// 1007 /***************************************************************************************************
// 1008  * @fn      MT_ZdoEndDeviceTimeoutRequest
// 1009  *
// 1010  * @brief   Handle an End Device Timeout request.
// 1011  *
// 1012  * @param   pBuf  - MT message data
// 1013  *
// 1014  * @return  void
// 1015  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1016 void MT_ZdoEndDeviceTimeoutRequest(uint8 *pBuf)
MT_ZdoEndDeviceTimeoutRequest:
          CFI Block cfiBlock84 Using cfiCommon0
          CFI Function MT_ZdoEndDeviceTimeoutRequest
        CODE
// 1017 {
        FUNCALL MT_ZdoEndDeviceTimeoutRequest, ZDP_EndDeviceTimeoutReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDeviceTimeoutRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
// 1018   uint8 cmdId;
// 1019   uint8 retValue;
// 1020   uint16 parentAddr;
// 1021   uint16 reqTimeout;
// 1022 
// 1023   /* parse header */
// 1024   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
// 1025   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R4
        ADD     A,#0x3
        MOV     R4,A
        JNC     ??MT_ZdoEndDeviceTimeoutRequest_0
        INC     R5
// 1026 
// 1027   /* Parent address */
// 1028   parentAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoEndDeviceTimeoutRequest_0:
        LCALL   ?Subroutine21 & 0xFFFF
// 1029   pBuf += 2;
??CrossCallReturnLabel_31:
        JNC     ??MT_ZdoEndDeviceTimeoutRequest_1
        INC     R5
// 1030 
// 1031   /* Requested Timeout */
// 1032   reqTimeout = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1033   pBuf += 2;
// 1034 
// 1035   retValue = (uint8)ZDP_EndDeviceTimeoutReq( parentAddr, reqTimeout, 0 );
??MT_ZdoEndDeviceTimeoutRequest_1:
        ; Setup parameters for call to function ZDP_EndDeviceTimeoutReq
        MOV     R1,#0x0
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R4,?V0
        LCALL   ??ZDP_EndDeviceTimeoutReq?relay; Banked call to: ZDP_EndDeviceTimeoutReq
        LCALL   ?Subroutine40 & 0xFFFF
// 1036 
// 1037   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??CrossCallReturnLabel_124:
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 1038 }
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock84

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond85 Using cfiCommon0
          CFI Function MT_ZdoPowerDescRequest
          CFI Conditional ??CrossCallReturnLabel_123
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function MT_ZdoActiveEpRequest
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function MT_ZdoComplexDescRequest
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function MT_ZdoUserDescRequest
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function MT_ZdoNodeDescRequest
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function MT_ZdoEndDeviceTimeoutRequest
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker92 Using cfiCommon1
          CFI (cfiPicker92) NoFunction
          CFI (cfiPicker92) Picker
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_126:
        MOV     R1,#0x65
        RET
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine54:
          CFI Block cfiCond93 Using cfiCommon0
          CFI Function MT_ZdoEndDevAnnce
          CFI Conditional ??CrossCallReturnLabel_125
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function MT_ZdoServiceDiscRequest
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function MT_ZdoPowerDescRequest
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-4
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function MT_ZdoActiveEpRequest
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-4
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function MT_ZdoComplexDescRequest
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-4
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function MT_ZdoUserDescRequest
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-4
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function MT_ZdoNodeDescRequest
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-4
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-4
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function MT_ZdoEndDeviceTimeoutRequest
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_124
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-4
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker102 Using cfiCommon1
          CFI (cfiPicker102) NoFunction
          CFI (cfiPicker102) Picker
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_128:
        MOV     A,R6
        MOV     R2,A
        RET
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiPicker102

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine60:
          CFI Block cfiCond103 Using cfiCommon0
          CFI Function MT_ZdoUserDescSet
          CFI Conditional ??CrossCallReturnLabel_127
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function MT_ZdoEndDevAnnce
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_125
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-4
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function MT_ZdoServiceDiscRequest
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_125
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-4
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function MT_ZdoPowerDescRequest
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-6
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function MT_ZdoActiveEpRequest
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-6
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function MT_ZdoComplexDescRequest
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-6
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function MT_ZdoUserDescRequest
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-6
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function MT_ZdoNodeDescRequest
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-6
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-6
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function MT_ZdoEndDeviceTimeoutRequest
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_124
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-6
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function MT_ZdoNWKAddressRequest
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_73
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-4
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function MT_ZdoIEEEAddrRequest
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_73
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-4
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function MT_ZdoBindRequest
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_74
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-4
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function MT_ZdoUnbindRequest
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_74
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-4
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker117 Using cfiCommon1
          CFI (cfiPicker117) NoFunction
          CFI (cfiPicker117) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        RET
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond118 Using cfiCommon0
          CFI Function MT_ZdoEndDevAnnce
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function MT_ZdoEndDeviceTimeoutRequest
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_98:
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        MOV     A,R4
        ADD     A,#0x2
        MOV     R4,A
        RET
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120
// 1039 #endif // ZIGBEE_CHILD_AGING
// 1040 
// 1041 /***************************************************************************************************
// 1042  * @fn      MT_ZdoEndDevBindRequest
// 1043  *
// 1044  * @brief   Handle a End Device Bind request.
// 1045  *
// 1046  * @param   pBuf  - MT message data
// 1047  *
// 1048  * @return  void
// 1049  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1050 void MT_ZdoEndDevBindRequest(uint8 *pBuf)
MT_ZdoEndDevBindRequest:
          CFI Block cfiBlock121 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
        CODE
// 1051 {
        FUNCALL MT_ZdoEndDevBindRequest, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 94, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 94, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 85, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 85, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 70
        MOV     A,#-0x46
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 85)
// 1052   uint8 cmdId;
// 1053   uint8 retValue = 0;
        LCALL   ?Subroutine9 & 0xFFFF
// 1054   uint8 i, epInt, numInClusters, numOutClusters;
// 1055   zAddrType_t destAddr;
// 1056   uint16 shortAddr;
// 1057   uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
// 1058 
// 1059   /* parse header */
// 1060   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1061   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_113:
        JNC     ??MT_ZdoEndDevBindRequest_0
        INC     R3
// 1062 
// 1063   /* Dev address */
// 1064   destAddr.addrMode = Addr16Bit;
??MT_ZdoEndDevBindRequest_0:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
// 1065   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_8:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
// 1066   pBuf += 2;
??CrossCallReturnLabel_65:
        JNC     ??MT_ZdoEndDevBindRequest_1
        INC     R3
// 1067 
// 1068   /* Local coordinator of the binding */
// 1069   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoEndDevBindRequest_1:
        LCALL   ?Subroutine26 & 0xFFFF
// 1070   pBuf += 2;
// 1071 
// 1072   /* For now, skip past the extended address */
// 1073   pBuf += Z_EXTADDR_LEN;
??CrossCallReturnLabel_37:
        ADD     A,#0xa
        MOV     R2,A
        JNC     ??MT_ZdoEndDevBindRequest_2
        INC     R3
// 1074 
// 1075   /* Endpoint */
// 1076   epInt = *pBuf++;
??MT_ZdoEndDevBindRequest_2:
        LCALL   ?Subroutine34 & 0xFFFF
// 1077 
// 1078   /* Profile ID */
// 1079   profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_52:
        LCALL   ?Subroutine16 & 0xFFFF
// 1080   pBuf += 2;
??CrossCallReturnLabel_21:
        JNC     ??MT_ZdoEndDevBindRequest_3
        INC     R3
// 1081 
// 1082   /* NumInClusters */
// 1083   numInClusters = *pBuf++;
??MT_ZdoEndDevBindRequest_3:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V3,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
// 1084   if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
        CLR     C
        SUBB    A,#0x10
        JNC     ??MT_ZdoEndDevBindRequest_4
// 1085   {
// 1086     for ( i = 0; i < numInClusters; i++ )
        MOV     R7,#0x0
??MT_ZdoEndDevBindRequest_5:
        MOV     A,R7
        CLR     C
        SUBB    A,?V3
        JNC     ??MT_ZdoEndDevBindRequest_6
// 1087     {
// 1088       inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
        LCALL   ?Subroutine13 & 0xFFFF
// 1089       pBuf += 2;
// 1090     }
??CrossCallReturnLabel_15:
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_69:
        JNC     ??MT_ZdoEndDevBindRequest_7
        INC     R3
??MT_ZdoEndDevBindRequest_7:
        INC     R7
        SJMP    ??MT_ZdoEndDevBindRequest_5
// 1091   }
// 1092   else
// 1093   {
// 1094     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x80
        MOVX    @DPTR,A
// 1095   }
// 1096 
// 1097   /* NumOutClusters */
// 1098   numOutClusters = *pBuf++;
??MT_ZdoEndDevBindRequest_6:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V6,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 1099   if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
        CLR     C
        SUBB    A,#0x10
        JNC     ??MT_ZdoEndDevBindRequest_8
// 1100   {
// 1101     for ( i = 0; i < numOutClusters; i++ )
        MOV     R7,#0x0
??MT_ZdoEndDevBindRequest_9:
        MOV     A,R7
        CLR     C
        SUBB    A,?V6
        JNC     ??MT_ZdoEndDevBindRequest_10
// 1102     {
// 1103       outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
        LCALL   ?Subroutine12 & 0xFFFF
// 1104       pBuf += 2;
// 1105     }
??CrossCallReturnLabel_13:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_70:
        JNC     ??MT_ZdoEndDevBindRequest_11
        INC     R3
??MT_ZdoEndDevBindRequest_11:
        INC     R7
        SJMP    ??MT_ZdoEndDevBindRequest_9
// 1106   }
// 1107   else
// 1108   {
// 1109     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_8:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x80
        SJMP    ??MT_ZdoEndDevBindRequest_12
// 1110   }
// 1111 
// 1112   if ( retValue == 0 )
??MT_ZdoEndDevBindRequest_10:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??MT_ZdoEndDevBindRequest_13
// 1113   {
// 1114     retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
// 1115                                           numInClusters, inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V4,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 86)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 88)
        MOV     A,?V6
        MOV     ?V4,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 91)
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 92)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV     R1,?V2
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??ZDP_EndDeviceBindReq?relay; Banked call to: ZDP_EndDeviceBindReq
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 85)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
??MT_ZdoEndDevBindRequest_12:
        MOVX    @DPTR,A
// 1116   }
// 1117 
// 1118   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoEndDevBindRequest_13:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 1119 }
        MOV     A,#0x46
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock121
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock122 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock122

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond123 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function MT_ZdoMatchDescRequest
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,?V4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V5
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        RET
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiPicker130 Using cfiCommon1
          CFI (cfiPicker130) NoFunction
          CFI (cfiPicker130) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        RET
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiPicker130

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond131 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiPicker133 Using cfiCommon1
          CFI (cfiPicker133) NoFunction
          CFI (cfiPicker133) Picker
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_96:
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     A,R2
        RET
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiPicker133

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond134 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiPicker136 Using cfiCommon1
          CFI (cfiPicker136) NoFunction
          CFI (cfiPicker136) Picker
        MOVX    A,@DPTR
        MOV     ?V0,A
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_133:
        MOV     A,?V0
        ADD     A,R0
        CLR     A
        ADDC    A,R1
        MOV     ?V1,A
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        RET
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiPicker136

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond137 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiPicker139 Using cfiCommon1
          CFI (cfiPicker139) NoFunction
          CFI (cfiPicker139) Picker
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_83:
        RET
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiPicker139

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond140 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_15
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-4
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function MT_ZdoMatchDescRequest
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_12
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-4
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_13
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-4
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiPicker144 Using cfiCommon1
          CFI (cfiPicker144) NoFunction
          CFI (cfiPicker144) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V4,A
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_134:
        MOV     A,?V4
        ADD     A,R0
        CLR     A
        ADDC    A,R1
        MOV     ?V5,A
        MOV     A,R7
        ADD     A,0xE0 /* A   */
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        RET
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiPicker144

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine62:
          CFI Block cfiCond145 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_21
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-4
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function MT_ZdoMatchDescRequest
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_134, ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_14
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-6
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_134, ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_15
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-6
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function MT_ZdoMatchDescRequest
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_134, ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_12
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-6
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_134, ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_13
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-6
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function MT_ZdoIEEEAddrRequest
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_28
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-8
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function MT_ZdoUserDescSet
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_29
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-8
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_88
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-6
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function MT_ZdoMatchDescRequest
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_36
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-8
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_37
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-8
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_24
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-8
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_25
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-8
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker158 Using cfiCommon1
          CFI (cfiPicker158) NoFunction
          CFI (cfiPicker158) Picker
        INC     DPTR
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiPicker158
        REQUIRE ??Subroutine70_0
        ; // Fall through to label ??Subroutine70_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine70_0:
          CFI Block cfiCond159 Using cfiCommon0
          CFI Function MT_ZdoEndDevAnnce
          CFI Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function MT_ZdoEndDeviceTimeoutRequest
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_31
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-8
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function MT_ZdoBindRequest
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_10
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-8
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function MT_ZdoUnbindRequest
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_11
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-8
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function MT_ZdoJoinReq
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_131
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-4
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function MT_ZdoSendData
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_38
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-6
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function MT_ZdoJoinReq
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_39
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-6
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function MT_ZdoMatchDescRequest
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_20
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-4
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_21
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-4
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function MT_ZdoMatchDescRequest
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_134, ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_14
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-6
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_134, ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_15
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-6
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function MT_ZdoMatchDescRequest
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_134, ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_12
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-6
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_134, ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_13
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-6
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function MT_ZdoIEEEAddrRequest
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_28
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-8
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function MT_ZdoUserDescSet
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_29
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-8
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_88
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-6
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function MT_ZdoMatchDescRequest
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_36
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-8
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_37
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-8
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_24
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-8
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_25
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-8
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker179 Using cfiCommon1
          CFI (cfiPicker179) NoFunction
          CFI (cfiPicker179) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        RET
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiPicker179

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond180 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiPicker182 Using cfiCommon1
          CFI (cfiPicker182) NoFunction
          CFI (cfiPicker182) Picker
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_82:
        MOV     A,#0xa
        RET
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiPicker182
// 1120 
// 1121 /***************************************************************************************************
// 1122  * @fn      MT_ZdoBindRequest
// 1123  *
// 1124  * @brief   Handle a Bind request.
// 1125  *
// 1126  * @param   pBuf  - MT message data
// 1127  *
// 1128  * @return  void
// 1129  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1130 void MT_ZdoBindRequest(uint8 *pBuf)
MT_ZdoBindRequest:
          CFI Block cfiBlock183 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
        CODE
// 1131 {
        FUNCALL MT_ZdoBindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1132   uint8 cmdId;
// 1133   uint8 retValue;
// 1134   zAddrType_t destAddr, devAddr;
// 1135   uint8 *pSrcAddr, *ptr;
// 1136   uint8 srcEPInt, dstEPInt;
// 1137   uint16 clusterID;
// 1138 
// 1139   /* parse header */
// 1140   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine73_0 & 0xFFFF
// 1141   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_139:
        JNC     ??MT_ZdoBindRequest_0
        INC     R7
// 1142 
// 1143   /* Dev address */
// 1144   destAddr.addrMode = Addr16Bit;
??MT_ZdoBindRequest_0:
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine31 & 0xFFFF
// 1145   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_47:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
// 1146   pBuf += 2;
// 1147 
// 1148   /* SrcAddress */
// 1149   pSrcAddr = pBuf;
// 1150   pBuf += Z_EXTADDR_LEN;
// 1151 
// 1152   /* SrcEPInt */
// 1153   srcEPInt = *pBuf++;
// 1154 
// 1155   /* ClusterID */
// 1156   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
// 1157   pBuf += 2;
??CrossCallReturnLabel_10:
        JNC     ??MT_ZdoBindRequest_1
        INC     R7
// 1158 
// 1159   /* Destination Address mode */
// 1160   devAddr.addrMode = *pBuf++;
??MT_ZdoBindRequest_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine39 & 0xFFFF
// 1161 
// 1162   /* Destination Address */
// 1163   if ( devAddr.addrMode == Addr64Bit )
??CrossCallReturnLabel_71:
        JNZ     ??MT_ZdoBindRequest_2
// 1164   {
// 1165     ptr = pBuf;
// 1166     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
        SJMP    ??CrossCallReturnLabel_99
// 1167   }
// 1168   else
// 1169   {
// 1170     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoBindRequest_2:
        LCALL   ?Subroutine32 & 0xFFFF
// 1171   }
??CrossCallReturnLabel_49:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine55 & 0xFFFF
// 1172   /* The short address occupies LSB two bytes */
// 1173   pBuf += Z_EXTADDR_LEN;
// 1174 
// 1175   /* DstEPInt */
// 1176   dstEPInt = *pBuf;
// 1177 
// 1178   retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??CrossCallReturnLabel_99:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV     ?V6,#0x0
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V6,A
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V6,R0
        MOV     ?V7,R1
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     R1,?V1
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#0x21
          CFI EndBlock cfiBlock183
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
// 1179 
// 1180   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1181 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock184 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 43)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0x0
        LCALL   ??ZDP_BindUnbindReq?relay; Banked call to: ZDP_BindUnbindReq
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
        MOV     A,#0x13
          CFI EndBlock cfiBlock184
        REQUIRE ??Subroutine71_0
        ; // Fall through to label ??Subroutine71_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine71_0:
          CFI Block cfiBlock185 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock185

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond186 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function MT_ZdoIEEEAddrRequest
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function MT_ZdoBindRequest
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-2
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function MT_ZdoUnbindRequest
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker190 Using cfiCommon1
          CFI (cfiPicker190) NoFunction
          CFI (cfiPicker190) Picker
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_129:
        MOV     R2,?V0
        RET
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiPicker190
// 1182 
// 1183 /***************************************************************************************************
// 1184  * @fn      MT_ZdoUnbindRequest
// 1185  *
// 1186  * @brief   Handle a Unbind request.
// 1187  *
// 1188  * @param   pBuf  - MT message data
// 1189  *
// 1190  * @return  void
// 1191  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1192 void MT_ZdoUnbindRequest(uint8 *pBuf)
MT_ZdoUnbindRequest:
          CFI Block cfiBlock191 Using cfiCommon0
          CFI Function MT_ZdoUnbindRequest
        CODE
// 1193 {
        FUNCALL MT_ZdoUnbindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1194   uint8 cmdId;
// 1195   uint8 retValue;
// 1196   zAddrType_t destAddr, devAddr;
// 1197   uint8 *pSrcAddr, *ptr;
// 1198   uint8 srcEPInt, dstEPInt;
// 1199   uint16 clusterID;
// 1200 
// 1201   /* parse header */
// 1202   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine73_0 & 0xFFFF
// 1203   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_140:
        JNC     ??MT_ZdoUnbindRequest_0
        INC     R7
// 1204 
// 1205   /* dev address */
// 1206   destAddr.addrMode = Addr16Bit;
??MT_ZdoUnbindRequest_0:
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine31 & 0xFFFF
// 1207   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_48:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
// 1208   pBuf += 2;
// 1209 
// 1210   /* SrcAddress */
// 1211   pSrcAddr = pBuf;
// 1212   pBuf += Z_EXTADDR_LEN;
// 1213 
// 1214   /* SrcEPInt */
// 1215   srcEPInt = *pBuf++;
// 1216 
// 1217   /* ClusterID */
// 1218   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
// 1219   pBuf += 2;
??CrossCallReturnLabel_11:
        JNC     ??MT_ZdoUnbindRequest_1
        INC     R7
// 1220 
// 1221   /* Destination Address mode */
// 1222   devAddr.addrMode = *pBuf++;
??MT_ZdoUnbindRequest_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine39 & 0xFFFF
// 1223 
// 1224   /* Destination Address */
// 1225   if ( devAddr.addrMode == Addr64Bit )
??CrossCallReturnLabel_72:
        JNZ     ??MT_ZdoUnbindRequest_2
// 1226   {
// 1227     ptr = pBuf;
// 1228     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
        SJMP    ??CrossCallReturnLabel_100
// 1229   }
// 1230   else
// 1231   {
// 1232     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoUnbindRequest_2:
        LCALL   ?Subroutine32 & 0xFFFF
// 1233   }
??CrossCallReturnLabel_50:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine55 & 0xFFFF
// 1234   /* The short address occupies LSB two bytes */
// 1235   pBuf += Z_EXTADDR_LEN;
// 1236 
// 1237   /* dstEPInt */
// 1238   dstEPInt = *pBuf;
// 1239 
// 1240   retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??CrossCallReturnLabel_100:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV     ?V6,#0x0
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V6,A
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V6,R0
        MOV     ?V7,R1
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     R1,?V1
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,#0x22
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock191
// 1241 
// 1242   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1243 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond192 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_71
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function MT_ZdoUnbindRequest
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker194 Using cfiCommon1
          CFI (cfiPicker194) NoFunction
          CFI (cfiPicker194) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        MOV     A,#0x3
        XRL     A,R0
        RET
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiPicker194

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond195 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function MT_ZdoUnbindRequest
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_94:
        MOV     A,#0x1
        RET
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function MT_ZdoUnbindRequest
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-2
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker200 Using cfiCommon1
          CFI (cfiPicker200) NoFunction
          CFI (cfiPicker200) Picker
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV     A,#0xa
        RET
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiPicker200

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine51:
          CFI Block cfiCond201 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function MT_ZdoUnbindRequest
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_50
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-4
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function MT_ZdoBindRequest
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_47
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-4
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function MT_ZdoUnbindRequest
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_48
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-4
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function MT_ZdoSendData
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker206 Using cfiCommon1
          CFI (cfiPicker206) NoFunction
          CFI (cfiPicker206) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R0,A
        RET
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiPicker206

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond207 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function MT_ZdoUnbindRequest
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker209 Using cfiCommon1
          CFI (cfiPicker209) NoFunction
          CFI (cfiPicker209) Picker
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_104:
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V2,A
        CLR     A
        ADDC    A,R7
        MOV     ?V3,A
        MOV     A,?V2
        ADD     A,#0x8
        MOV     R6,A
        CLR     A
        ADDC    A,?V3
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V1,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_97:
        MOV     ?V4,A
        CLR     A
        ADDC    A,R1
        MOV     ?V5,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        RET
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiPicker209

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine55:
          CFI Block cfiCond210 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
          CFI Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function MT_ZdoPowerDescRequest
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_58
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-4
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_59
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-4
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function MT_ZdoActiveEpRequest
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_60
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-4
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function MT_ZdoMatchDescRequest
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_61
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-4
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function MT_ZdoComplexDescRequest
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_62
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-4
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function MT_ZdoUserDescRequest
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_63
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-4
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function MT_ZdoUserDescSet
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_64
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-4
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_65
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-4
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_66
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-4
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function MT_ZdoBindRequest
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function MT_ZdoUnbindRequest
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function MT_ZdoBindRequest
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_10
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-4
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function MT_ZdoUnbindRequest
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_11
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-4
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function MT_ZdoSendData
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-2
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function MT_ZdoSendData
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond225) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond225) CFA_SP SP+-2
          CFI (cfiCond225) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker227 Using cfiCommon1
          CFI (cfiPicker227) NoFunction
          CFI (cfiPicker227) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiPicker227

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine53:
          CFI Block cfiCond228 Using cfiCommon0
          CFI Function MT_ZdoEndDevAnnce
          CFI Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function MT_ZdoEndDeviceTimeoutRequest
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_31
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-4
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function MT_ZdoBindRequest
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_10
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-4
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function MT_ZdoUnbindRequest
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_11
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-4
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker232 Using cfiCommon1
          CFI (cfiPicker232) NoFunction
          CFI (cfiPicker232) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_132:
        RET
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiPicker232

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine58:
          CFI Block cfiCond233 Using cfiCommon0
          CFI Function MT_ZdoEndDevAnnce
          CFI Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function MT_ZdoEndDeviceTimeoutRequest
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_31
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-6
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function MT_ZdoBindRequest
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_10
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-6
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function MT_ZdoUnbindRequest
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_11
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-6
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function MT_ZdoJoinReq
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-2
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker238 Using cfiCommon1
          CFI (cfiPicker238) NoFunction
          CFI (cfiPicker238) Picker
        INC     DPTR
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiPicker238
        REQUIRE ??Subroutine72_0
        ; // Fall through to label ??Subroutine72_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine72_0:
          CFI Block cfiCond239 Using cfiCommon0
          CFI Function MT_ZdoSendData
          CFI Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function MT_ZdoJoinReq
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_39
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-4
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function MT_ZdoEndDevAnnce
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_30
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-6
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function MT_ZdoEndDeviceTimeoutRequest
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_31
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-6
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function MT_ZdoBindRequest
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_10
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond243) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-6
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function MT_ZdoUnbindRequest
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_11
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-6
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function MT_ZdoJoinReq
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker246 Using cfiCommon1
          CFI (cfiPicker246) NoFunction
          CFI (cfiPicker246) Picker
        LCALL   ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_136:
        MOV     A,R2
        ADD     A,R0
        RET
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiPicker246
// 1244 
// 1245 #if defined (MT_SYS_KEY_MANAGEMENT)
// 1246 /***************************************************************************************************
// 1247  * @fn      MT_ZdoSetLinkKey
// 1248  *
// 1249  * @brief   Set an application or trust center link key.
// 1250  *
// 1251  * @param   pBuf  - MT message data
// 1252  *
// 1253  * @return  void
// 1254  ***************************************************************************************************/
// 1255 void MT_ZdoSetLinkKey(uint8 *pBuf)
// 1256 {
// 1257   uint8 cmdId;
// 1258   uint8 retValue;
// 1259   uint8 *pExtAddr;
// 1260   uint8 *pKey;
// 1261   uint16 shortAddr;
// 1262 
// 1263   /* parse header */
// 1264   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1265   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1266 
// 1267   /* ShortAddr */
// 1268   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1269   pBuf += 2;
// 1270 
// 1271   /* Extended Addr */
// 1272   pExtAddr = pBuf;
// 1273   pBuf += Z_EXTADDR_LEN;
// 1274 
// 1275   /* Key data */
// 1276   pKey = pBuf;
// 1277 
// 1278   retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
// 1279 
// 1280   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1281 }
// 1282 
// 1283 /***************************************************************************************************
// 1284  * @fn      MT_ZdoRemoveLinkKey
// 1285  *
// 1286  * @brief   Remove an application or trust center link key.
// 1287  *
// 1288  * @param   pBuf  - MT message data
// 1289  *
// 1290  * @return  void
// 1291  ***************************************************************************************************/
// 1292 void MT_ZdoRemoveLinkKey(uint8 *pBuf)
// 1293 {
// 1294   uint8 cmdId;
// 1295   uint8 retValue;
// 1296   uint8 *pExtAddr;
// 1297 
// 1298   /* parse header */
// 1299   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1300   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1301 
// 1302   /* ShortAddr */
// 1303   pExtAddr = pBuf;
// 1304 
// 1305   retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
// 1306 
// 1307   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1308 }
// 1309 
// 1310 /***************************************************************************************************
// 1311  * @fn      MT_ZdoGetLinkKey
// 1312  *
// 1313  * @brief   Get the application link key.
// 1314  *
// 1315  * @param   pBuf  - MT message data
// 1316  *
// 1317  * @return  void
// 1318  ***************************************************************************************************/
// 1319 void MT_ZdoGetLinkKey(uint8 *pBuf)
// 1320 {
// 1321   uint8 cmdId;
// 1322   uint8 retValue;
// 1323   uint8 *pExtAddr;
// 1324   uint8 *retBuf = NULL;
// 1325   uint8 len;
// 1326   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 1327   uint16 apsLinkKeyNvId;
// 1328 
// 1329   // parse header
// 1330   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1331   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1332 
// 1333   // Extended Address
// 1334   pExtAddr = pBuf;
// 1335 
// 1336   // Fetch the key NV ID
// 1337   retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
// 1338 
// 1339   if (retValue == ZSuccess)
// 1340   {
// 1341     if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
// 1342     {
// 1343       // retrieve key from NV
// 1344       if (osal_nv_read( apsLinkKeyNvId, 0,
// 1345                        sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
// 1346       {
// 1347         retValue = ZNwkUnknownDevice;
// 1348       }
// 1349     }
// 1350     else
// 1351     {
// 1352       retValue = ZNwkUnknownDevice;
// 1353     }
// 1354   }
// 1355 
// 1356   // Construct the response message
// 1357   len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
// 1358   if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
// 1359   {
// 1360     if (retValue == ZSuccess)
// 1361     {
// 1362       // Extended Address
// 1363       osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
// 1364 
// 1365       // Key data
// 1366       osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
// 1367     }
// 1368     else
// 1369     {
// 1370       // Failed case - set the rest fields to all FF
// 1371       osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
// 1372     }
// 1373 
// 1374     retBuf[0] = retValue;  // Status
// 1375 
// 1376     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
// 1377 
// 1378     // clear retBuf because it contains key data and free allocated memory
// 1379     osal_memset(retBuf, 0x00, len);
// 1380 
// 1381     osal_mem_free(retBuf);
// 1382   }
// 1383 
// 1384   // clear copy of key in RAM
// 1385   if (pApsLinkKey != NULL)
// 1386   {
// 1387     osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
// 1388 
// 1389     osal_mem_free(pApsLinkKey);
// 1390   }
// 1391 
// 1392   return;
// 1393 }
// 1394 #endif // MT_SYS_KEY_MANAGEMENT
// 1395 
// 1396 #if defined (MT_ZDO_MGMT)
// 1397 /***************************************************************************************************
// 1398  * @fn      MT_ZdoMgmtNwkDiscRequest
// 1399  *
// 1400  * @brief   Handle a Mgmt Nwk Discovery request.
// 1401  *
// 1402  * @param   pBuf  - MT message data
// 1403  *
// 1404  * @return  void
// 1405  ***************************************************************************************************/
// 1406 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
// 1407 {
// 1408   uint8 cmdId;
// 1409   uint8 retValue;
// 1410   zAddrType_t destAddr;
// 1411   uint32 scanChannels;
// 1412   uint8 scanDuration, startIndex;
// 1413 
// 1414   /* parse header */
// 1415   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1416   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1417 
// 1418   /* Dev address */
// 1419   destAddr.addrMode = Addr16Bit;
// 1420   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1421   pBuf += 2;
// 1422 
// 1423   /* Scan Channels */
// 1424   scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
// 1425   pBuf += 4;
// 1426 
// 1427   /* Scan Duration */
// 1428   scanDuration = *pBuf++;
// 1429 
// 1430   /* Start Index */
// 1431   startIndex = *pBuf;
// 1432 
// 1433   retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
// 1434 
// 1435   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1436 }
// 1437 
// 1438 /***************************************************************************************************
// 1439  * @fn      MT_ZdoMgmtLqiRequest
// 1440  *
// 1441  * @brief   Handle a Mgmt Lqi request.
// 1442  *
// 1443  * @param   pBuf  - MT message data
// 1444  *
// 1445  * @return  void
// 1446  ***************************************************************************************************/
// 1447 void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
// 1448 {
// 1449   uint8 cmdId;
// 1450   uint8 retValue;
// 1451   zAddrType_t destAddr;
// 1452   uint8 startIndex;
// 1453 
// 1454   /* parse header */
// 1455   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1456   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1457 
// 1458   /* Dev address */
// 1459   destAddr.addrMode = Addr16Bit;
// 1460   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1461   pBuf += 2;
// 1462 
// 1463   /* Start Index */
// 1464   startIndex = *pBuf;
// 1465 
// 1466   retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
// 1467 
// 1468   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1469 }
// 1470 
// 1471 /***************************************************************************************************
// 1472  * @fn      MT_ZdoMgmtRtgRequest
// 1473  *
// 1474  * @brief   Handle a Mgmt Rtg request.
// 1475  *
// 1476  * @param   pBuf  - MT message data
// 1477  *
// 1478  * @return  void
// 1479  ***************************************************************************************************/
// 1480 void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
// 1481 {
// 1482   uint8 cmdId;
// 1483   uint8 retValue;
// 1484   zAddrType_t destAddr;
// 1485   uint8 startIndex;
// 1486 
// 1487   /* parse header */
// 1488   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1489   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1490 
// 1491   /* Dev Address */
// 1492   destAddr.addrMode = Addr16Bit;
// 1493   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
// 1494   pBuf += 2;
// 1495 
// 1496   /* Start Index */
// 1497   startIndex = *pBuf;
// 1498 
// 1499   retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
// 1500 
// 1501   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1502 }
// 1503 
// 1504 /***************************************************************************************************
// 1505  * @fn      MT_ZdoMgmtBindRequest
// 1506  *
// 1507  * @brief   Handle a Mgmt Bind request.
// 1508  *
// 1509  * @param   pBuf  - MT message data
// 1510  *
// 1511  * @return  void
// 1512  ***************************************************************************************************/
// 1513 void MT_ZdoMgmtBindRequest(uint8 *pBuf)
// 1514 {
// 1515   uint8 cmdId;
// 1516   uint8 retValue;
// 1517   zAddrType_t destAddr;
// 1518   uint8 startIndex;
// 1519 
// 1520   /* parse header */
// 1521   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1522   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1523 
// 1524   /* Dev Address */
// 1525   destAddr.addrMode = Addr16Bit;
// 1526   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1527   pBuf += 2;
// 1528 
// 1529   /* Start Index */
// 1530   startIndex = *pBuf;
// 1531 
// 1532   retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
// 1533 
// 1534   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1535 }
// 1536 
// 1537 /***************************************************************************************************
// 1538  * @fn      MT_ZdoMgmtLeaveRequest
// 1539  *
// 1540  * @brief   Handle a Mgmt Leave request.
// 1541  *
// 1542  * @param   pBuf  - MT message data
// 1543  *
// 1544  * @return  void
// 1545  ***************************************************************************************************/
// 1546 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
// 1547 {
// 1548   uint8 cmdId;
// 1549   uint8 retValue;
// 1550   zAddrType_t destAddr;
// 1551   uint8 *pIEEEAddr;
// 1552   uint8 removeChildren;
// 1553   uint8 rejoin;
// 1554 
// 1555   /* parse header */
// 1556   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1557   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1558 
// 1559   /* Destination Address */
// 1560   destAddr.addrMode = Addr16Bit;
// 1561   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1562   pBuf += 2;
// 1563 
// 1564   /* IEEE address */
// 1565   pIEEEAddr = pBuf;
// 1566   pBuf += Z_EXTADDR_LEN;
// 1567 
// 1568   /* Rejoin if bit0 is set */
// 1569   rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
// 1570 
// 1571   /* Remove Children if bit1 is set */
// 1572   removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
// 1573 
// 1574   retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
// 1575 
// 1576   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1577 }
// 1578 
// 1579 /***************************************************************************************************
// 1580  * @fn      MT_ZdoMgmtDirectJoinRequest
// 1581  *
// 1582  * @brief   Handle a Mgmt Direct Join request.
// 1583  *
// 1584  * @param   pBuf  - MT message data
// 1585  *
// 1586  * @return  void
// 1587  ***************************************************************************************************/
// 1588 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
// 1589 {
// 1590   uint8 cmdId;
// 1591   uint8 retValue;
// 1592   zAddrType_t destAddr;
// 1593   uint8 *deviceAddr;
// 1594   uint8 capInfo;
// 1595 
// 1596   /* parse header */
// 1597   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1598   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1599 
// 1600   /* Destination Address */
// 1601   destAddr.addrMode = Addr16Bit;
// 1602   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1603   pBuf += 2;
// 1604 
// 1605   /* Device Address */
// 1606   deviceAddr = pBuf;
// 1607   pBuf += Z_EXTADDR_LEN;
// 1608 
// 1609   /* Capability information */
// 1610   capInfo = *pBuf;
// 1611 
// 1612   retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
// 1613 
// 1614   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1615 }
// 1616 
// 1617 /***************************************************************************************************
// 1618  * @fn      MT_ZdoMgmtPermitJoinRequest
// 1619  *
// 1620  * @brief   Handle a Mgmt Permit Join request.
// 1621  *
// 1622  * @param   pBuf  - MT message data
// 1623  *
// 1624  * @return  void
// 1625  ***************************************************************************************************/
// 1626 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
// 1627 {
// 1628   uint8 cmdId;
// 1629   uint8 dataLn;
// 1630   uint8 retValue;
// 1631   uint8 duration;
// 1632   uint8 tcSignificance;
// 1633   zAddrType_t destAddr;
// 1634 
// 1635   /* parse header */
// 1636   dataLn = pBuf[MT_RPC_POS_LEN];
// 1637   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1638   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1639 
// 1640   if ( 4 == dataLn )
// 1641   {
// 1642     /* addrMode was hardwired up to Z-Stack 2.6.0 */
// 1643     destAddr.addrMode = afAddr16Bit; 
// 1644   }
// 1645   else
// 1646   {
// 1647     /* addrMode is a parameter after Z-Stack 2.6.0 */
// 1648     destAddr.addrMode = *pBuf++;
// 1649   }
// 1650   
// 1651   /* Destination Address */
// 1652   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1653   pBuf += 2;
// 1654 
// 1655   /* Duration */
// 1656   duration = *pBuf++;
// 1657 
// 1658   /* Trust center significance */
// 1659   tcSignificance = *pBuf;
// 1660 
// 1661   ignoreIndication = TRUE;
// 1662   retValue = (uint8)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
// 1663   ignoreIndication = FALSE;
// 1664   
// 1665   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1666 }
// 1667 
// 1668 /***************************************************************************************************
// 1669  * @fn      MT_ZdoMgmtNwkUpdateRequest
// 1670  *
// 1671  * @brief   Handle a Mgmt Nwk Update request.
// 1672  *
// 1673  * @param   pBuf  - MT message data
// 1674  *
// 1675  * @return  void
// 1676  ***************************************************************************************************/
// 1677 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
// 1678 {
// 1679   uint8 cmdId;
// 1680   uint8 retValue;
// 1681   zAddrType_t destAddr;
// 1682   uint32 channelMask;
// 1683   uint8 scanDuration, scanCount;
// 1684   uint16 nwkManagerAddr;
// 1685 
// 1686     /* parse header */
// 1687   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1688   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1689 
// 1690   /* Destination address */
// 1691   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1692   pBuf += 2;
// 1693 
// 1694   /* Destination address mode */
// 1695   destAddr.addrMode = *pBuf++;
// 1696 
// 1697   channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
// 1698   pBuf += 4;
// 1699 
// 1700   /* Scan duration */
// 1701   scanDuration = *pBuf++;
// 1702 
// 1703   /* Scan count */
// 1704   scanCount = *pBuf++;
// 1705 
// 1706   /* NWK manager address */
// 1707   nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1708 
// 1709   /* Send the Management Network Update request */
// 1710   retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1711                                           scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1712 
// 1713   /*
// 1714     Since we don't recevied our own broadcast messages, we should
// 1715     send a unicast copy of the message to ourself.
// 1716   */
// 1717   if ( destAddr.addrMode == AddrBroadcast )
// 1718   {
// 1719     destAddr.addrMode = Addr16Bit;
// 1720     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
// 1721     retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1722                                              scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1723   }
// 1724 
// 1725   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1726 }
// 1727 #endif /* MT_ZDO_MGMT */
// 1728 
// 1729 /***************************************************************************************************
// 1730  * @fn      MT_ZdoSendData
// 1731  *
// 1732  * @brief   Handle a ZDO Send Data request.
// 1733  *
// 1734  * @param   pBuf  - MT message data
// 1735  *
// 1736  * @return  void
// 1737  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1738 void MT_ZdoSendData( uint8 *pBuf )
MT_ZdoSendData:
          CFI Block cfiBlock247 Using cfiCommon0
          CFI Function MT_ZdoSendData
        CODE
// 1739 {
        FUNCALL MT_ZdoSendData, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendData, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendData, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V1,R3
// 1740   uint8 cmdId;
// 1741   uint8 retValue;
// 1742   zAddrType_t destAddr;
// 1743   uint8 transSeq;
// 1744   uint8 len;
// 1745   uint16 cmd;
// 1746 
// 1747     /* parse header */
// 1748   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
// 1749   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     ?V0,A
        JNC     ??MT_ZdoSendData_0
        INC     ?V1
// 1750 
// 1751   /* Destination address */
// 1752   destAddr.addrMode = Addr16Bit;
??MT_ZdoSendData_0:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1753   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_92:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine55 & 0xFFFF
// 1754   pBuf += 2;
??CrossCallReturnLabel_101:
        MOV     A,?V0
        ADD     A,#0x2
        MOV     ?V0,A
        JNC     ??MT_ZdoSendData_1
        INC     ?V1
// 1755 
// 1756   /* Destination address mode */
// 1757   transSeq = *pBuf++;
??MT_ZdoSendData_1:
        MOV     DPL,A
        MOV     DPH,?V1
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOV     ?V0,DPL
        MOV     ?V1,DPH
// 1758 
// 1759   /* cmd */
// 1760   cmd = BUILD_UINT16( pBuf[0], pBuf[1] );
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        LCALL   ?Subroutine27 & 0xFFFF
// 1761   pBuf += 2;
??CrossCallReturnLabel_38:
        MOV     A,?V0
        ADD     A,#0x2
        JNC     ??MT_ZdoSendData_2
        INC     ?V1
// 1762   len = *pBuf++;
??MT_ZdoSendData_2:
        MOV     DPL,A
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R7,A
        INC     DPTR
        MOV     ?V0,DPL
        MOV     ?V1,DPH
// 1763 
// 1764   /* Send the Generic ZDO message request */
// 1765   retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
        ; Setup parameters for call to function ZDP_SendData
        MOV     ?V4,R0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R7
        MOV     R1,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 1766   /*
// 1767     Since we don't recevied our own broadcast messages, we should
// 1768     send a unicast copy of the message to ourself.
// 1769   */
// 1770   if ( destAddr.addrMode == AddrBroadcast )
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xf
        JNZ     ??MT_ZdoSendData_3
// 1771   {
// 1772     destAddr.addrMode = Addr16Bit;
        LCALL   ?Subroutine42 & 0xFFFF
// 1773     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
??CrossCallReturnLabel_75:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine55 & 0xFFFF
// 1774     retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
??CrossCallReturnLabel_102:
        ; Setup parameters for call to function ZDP_SendData
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R7
        MOV     R1,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 1775   }
// 1776 
// 1777   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoSendData_3:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP102_8
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 1778 }
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock247
// 1779 
// 1780 /***************************************************************************************************
// 1781  * @fn      MT_ZdoNwkAddrOfInterestReq
// 1782  *
// 1783  * @brief   Handle a ZDO Network Address of Interest request.
// 1784  *
// 1785  * @param   pBuf  - MT message data
// 1786  *
// 1787  * @return  void
// 1788  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1789 void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
MT_ZdoNwkAddrOfInterestReq:
          CFI Block cfiBlock248 Using cfiCommon0
          CFI Function MT_ZdoNwkAddrOfInterestReq
        CODE
// 1790 {
        FUNCALL MT_ZdoNwkAddrOfInterestReq, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkAddrOfInterestReq, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkAddrOfInterestReq, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 1791   uint8 cmdId;
// 1792   uint8 retValue;
// 1793   zAddrType_t destAddr;
// 1794   uint16 nwkAddr;
// 1795   uint8 cmd;
// 1796 
// 1797     /* parse header */
// 1798   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine30 & 0xFFFF
// 1799   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_46:
        MOV     R2,A
        JNC     ??MT_ZdoNwkAddrOfInterestReq_0
        INC     R3
// 1800 
// 1801   /* Destination address */
// 1802   destAddr.addrMode = Addr16Bit;
??MT_ZdoNwkAddrOfInterestReq_0:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
// 1803   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_9:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine37 & 0xFFFF
// 1804   pBuf += 2;
??CrossCallReturnLabel_66:
        JNC     ??MT_ZdoNwkAddrOfInterestReq_1
        INC     R3
// 1805 
// 1806   /* Network Address of Interest */
// 1807   nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoNwkAddrOfInterestReq_1:
        LCALL   ?Subroutine49 & 0xFFFF
// 1808   pBuf += 2;
// 1809 
// 1810   cmd = *pBuf++;
??CrossCallReturnLabel_88:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
// 1811 
// 1812   /* Send the Generic ZDO message request */
// 1813   retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V2,R0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,?V1
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??ZDP_NWKAddrOfInterestReq?relay; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1814 
// 1815 
// 1816   /*
// 1817     Since we don't recevied our own broadcast messages, we should
// 1818     send a unicast copy of the message to ourself.
// 1819   */
// 1820   if ( destAddr.addrMode == AddrBroadcast )
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xf
        JNZ     ??MT_ZdoNwkAddrOfInterestReq_2
// 1821   {
// 1822     destAddr.addrMode = Addr16Bit;
        LCALL   ?Subroutine42 & 0xFFFF
// 1823     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
??CrossCallReturnLabel_76:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine55 & 0xFFFF
// 1824     retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
??CrossCallReturnLabel_103:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,?V1
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??ZDP_NWKAddrOfInterestReq?relay; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1825   }
// 1826 
// 1827   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoNwkAddrOfInterestReq_2:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     R2,?V0
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 1828 }
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock248
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock249 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock249

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
          CFI Block cfiCond250 Using cfiCommon0
          CFI Function MT_ZdoIEEEAddrRequest
          CFI Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function MT_ZdoUserDescSet
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_29
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-4
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-2
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker253 Using cfiCommon1
          CFI (cfiPicker253) NoFunction
          CFI (cfiPicker253) Picker
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_110:
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
        RET
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiPicker253

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond254 Using cfiCommon0
          CFI Function MT_ZdoSendData
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-2
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker256 Using cfiCommon1
          CFI (cfiPicker256) NoFunction
          CFI (cfiPicker256) Picker
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPTR,#_NIB + 20
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiPicker256
// 1829 
// 1830 /***************************************************************************************************
// 1831  * @fn      MT_ZdoStartupFromApp
// 1832  *
// 1833  * @brief   Handle a Startup from App request.
// 1834  *
// 1835  * @param   pBuf  - MT message data
// 1836  *
// 1837  * @return  void
// 1838  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1839 void MT_ZdoStartupFromApp(uint8 *pBuf)
MT_ZdoStartupFromApp:
          CFI Block cfiBlock257 Using cfiCommon0
          CFI Function MT_ZdoStartupFromApp
        CODE
// 1840 {
        FUNCALL MT_ZdoStartupFromApp, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoStartupFromApp, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1841   uint8 cmd0, cmd1, retValue;
// 1842 
// 1843   /* parse header */
// 1844   cmd0 = pBuf[MT_RPC_POS_CMD0];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1845   cmd1 = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
// 1846   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1847 
// 1848   retValue = ZDOInitDevice(100);
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??ZDOInitDevice?relay; Banked call to: ZDOInitDevice
        LCALL   ?Subroutine43 & 0xFFFF
// 1849 
// 1850   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
??CrossCallReturnLabel_77:
        JNZ     ??MT_ZdoStartupFromApp_0
// 1851   {
// 1852     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 1853   }
// 1854 }
??MT_ZdoStartupFromApp_0:
        LJMP    ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock257
// 1855 
// 1856 
// 1857 /***************************************************************************************************
// 1858  * @fn      MT_ZdoNetworkDiscoveryReq
// 1859  *
// 1860  * @brief   Handle a ZDO Network Discovery request.
// 1861  *
// 1862  * @param   pBuf  - MT message data
// 1863  *
// 1864  * @return  void
// 1865  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1866 void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
MT_ZdoNetworkDiscoveryReq:
          CFI Block cfiBlock258 Using cfiCommon0
          CFI Function MT_ZdoNetworkDiscoveryReq
        CODE
// 1867 {
        FUNCALL MT_ZdoNetworkDiscoveryReq, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNetworkDiscoveryReq, ZDApp_NetworkDiscoveryReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNetworkDiscoveryReq, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNetworkDiscoveryReq, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNetworkDiscoveryReq, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        LCALL   ?Subroutine22 & 0xFFFF
// 1868   uint8  retValue = ZFailure;
// 1869   uint8  cmdId;
// 1870   uint32 scanChannels;
// 1871 
// 1872   /* parse header */
// 1873   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1874   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_137:
        JNC     ??MT_ZdoNetworkDiscoveryReq_0
        INC     R7
// 1875 
// 1876   /* Packet format */
// 1877   /* scan channels (4) | scan duration (1) */
// 1878 
// 1879   /* Scan channels */
// 1880   scanChannels = osal_build_uint32(pBuf, 4);
??MT_ZdoNetworkDiscoveryReq_0:
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x4
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_build_uint32?relay; Banked call to: osal_build_uint32
// 1881   pBuf += 4;
// 1882 
// 1883   retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
        ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDApp_NetworkDiscoveryReq?relay; Banked call to: ZDApp_NetworkDiscoveryReq
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1884 
// 1885   // Register ZDO callback for MT to handle the network discovery confirm
// 1886   // and beacon notification confirm
// 1887   ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV     R2,#??MT_ZdoNwkDiscoveryCnfCB?relay & 0xff
        MOV     R3,#(??MT_ZdoNwkDiscoveryCnfCB?relay >> 8) & 0xff
        MOV     R1,#0x2
        LCALL   ??ZDO_RegisterForZdoCB?relay; Banked call to: ZDO_RegisterForZdoCB
// 1888   ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV     R2,#??MT_ZdoBeaconIndCB?relay & 0xff
        MOV     R3,#(??MT_ZdoBeaconIndCB?relay >> 8) & 0xff
        MOV     R1,#0x3
        LCALL   ??ZDO_RegisterForZdoCB?relay; Banked call to: ZDO_RegisterForZdoCB
// 1889 
// 1890   /* Build and send back the response */
// 1891   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     R2,?V0
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 1892 }
        MOV     A,#0x1
        LJMP    ??Subroutine71_0 & 0xFFFF
          CFI EndBlock cfiBlock258

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond259 Using cfiCommon0
          CFI Function MT_ZdoNetworkDiscoveryReq
          CFI Conditional ??CrossCallReturnLabel_137
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond260 Using cfiCommon0
          CFI (cfiCond260) Function MT_ZdoJoinReq
          CFI (cfiCond260) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond260) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond260) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond260) CFA_SP SP+-2
          CFI (cfiCond260) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker261 Using cfiCommon1
          CFI (cfiPicker261) NoFunction
          CFI (cfiPicker261) Picker
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
          CFI EndBlock cfiCond259
          CFI EndBlock cfiCond260
          CFI EndBlock cfiPicker261
        REQUIRE ??Subroutine73_0
        ; // Fall through to label ??Subroutine73_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine73_0:
          CFI Block cfiCond262 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_139
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond263 Using cfiCommon0
          CFI (cfiCond263) Function MT_ZdoUnbindRequest
          CFI (cfiCond263) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond263) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond263) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond263) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond263) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond263) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond263) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond263) CFA_SP SP+-2
          CFI (cfiCond263) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond264 Using cfiCommon0
          CFI (cfiCond264) Function MT_ZdoNetworkDiscoveryReq
          CFI (cfiCond264) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond264) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond264) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond264) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond264) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond264) CFA_SP SP+-2
          CFI (cfiCond264) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function MT_ZdoJoinReq
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-2
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker266 Using cfiCommon1
          CFI (cfiPicker266) NoFunction
          CFI (cfiPicker266) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     A,R6
        ADD     A,#0x3
        MOV     R6,A
        RET
          CFI EndBlock cfiCond262
          CFI EndBlock cfiCond263
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiPicker266
// 1893 
// 1894 
// 1895 /***************************************************************************************************
// 1896  * @fn      MT_ZdoJoinReq
// 1897  *
// 1898  * @brief   Handle a ZDO Join request.
// 1899  *
// 1900  * @param   pBuf  - MT message data
// 1901  *
// 1902  * @return  void
// 1903  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1904 void MT_ZdoJoinReq(uint8 *pBuf)
MT_ZdoJoinReq:
          CFI Block cfiBlock267 Using cfiCommon0
          CFI Function MT_ZdoJoinReq
        CODE
// 1905 {
        FUNCALL MT_ZdoJoinReq, ZDApp_JoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoJoinReq, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoJoinReq, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        LCALL   ?Subroutine22 & 0xFFFF
// 1906   uint8  retValue = ZFailure;
// 1907   uint8  cmdId;
// 1908   uint16 panId;
// 1909   uint16 chosenParent;
// 1910 
// 1911   /* parse header */
// 1912   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1913   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_138:
        JNC     ??MT_ZdoJoinReq_0
        INC     R7
// 1914 
// 1915   /* Packet format */
// 1916   /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
// 1917    * parentDepth (1) | stackProfile  (1)
// 1918    */
// 1919 
// 1920   panId        = BUILD_UINT16(pBuf[1], pBuf[2]);
// 1921   chosenParent = BUILD_UINT16(pBuf[11], pBuf[12]);
// 1922 
// 1923   retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
??MT_ZdoJoinReq_0:
        ; Setup parameters for call to function ZDApp_JoinReq
        ADD     A,#0xe
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        ADD     A,#0xd
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R6
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R6
        ADD     A,#0x3
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_131:
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDApp_JoinReq?relay; Banked call to: ZDApp_JoinReq
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1924 
// 1925   /* Register for MT to receive Join Confirm */
// 1926   ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV     R2,#??MT_ZdoJoinCnfCB?relay & 0xff
        MOV     R3,#(??MT_ZdoJoinCnfCB?relay >> 8) & 0xff
        MOV     R1,#0x4
        LCALL   ??ZDO_RegisterForZdoCB?relay; Banked call to: ZDO_RegisterForZdoCB
// 1927 
// 1928   /* Build and send back the response */
// 1929   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     R2,?V0
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 1930 
// 1931 }
        MOV     A,#0x1
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock267

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond268 Using cfiCommon0
          CFI Function MT_ZdoJoinReq
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond269 Using cfiCommon0
          CFI (cfiCond269) Function MT_ZdoJoinReq
          CFI (cfiCond269) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond269) CFA_SP SP+-2
          CFI (cfiCond269) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker270 Using cfiCommon1
          CFI (cfiPicker270) NoFunction
          CFI (cfiPicker270) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     R0,#?V1
        RET
          CFI EndBlock cfiCond268
          CFI EndBlock cfiCond269
          CFI EndBlock cfiPicker270

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond271 Using cfiCommon0
          CFI Function MT_ZdoSendData
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond272 Using cfiCommon0
          CFI (cfiCond272) Function MT_ZdoJoinReq
          CFI (cfiCond272) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond272) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond272) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond272) CFA_SP SP+-2
          CFI (cfiCond272) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker273 Using cfiCommon1
          CFI (cfiPicker273) NoFunction
          CFI (cfiPicker273) Picker
        LCALL   ??Subroutine72_0 & 0xFFFF
??CrossCallReturnLabel_130:
        MOV     ?V2,A
        CLR     A
        ADDC    A,R1
        MOV     ?V3,A
        RET
          CFI EndBlock cfiCond271
          CFI EndBlock cfiCond272
          CFI EndBlock cfiPicker273
// 1932 
// 1933 
// 1934 /***************************************************************************************************
// 1935  * @fn          MT_ZdoNwkDiscoveryCnfCB
// 1936  *
// 1937  * @brief       Send an indication to inform host device the completion of
// 1938  *              network discovery scan
// 1939  *
// 1940  * @param       pStr - pointer to a parameter and a structure of parameters
// 1941  *
// 1942  * @return      void
// 1943  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1944 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
MT_ZdoNwkDiscoveryCnfCB:
          CFI Block cfiBlock274 Using cfiCommon0
          CFI Function MT_ZdoNwkDiscoveryCnfCB
        CODE
// 1945 {
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, MT_ZdoBeaconIndCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1946   /* pStr: status (uint8) */
// 1947   /* Packet Format */
// 1948   /* Status (1) */
// 1949 
// 1950   // Scan completed. De-register the callback with ZDO
// 1951   ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV     R1,#0x2
        LCALL   ??ZDO_DeregisterForZdoCB?relay; Banked call to: ZDO_DeregisterForZdoCB
// 1952   ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV     R1,#0x3
        LCALL   ??ZDO_DeregisterForZdoCB?relay; Banked call to: ZDO_DeregisterForZdoCB
// 1953 
// 1954   // Send the buffered beacon indication
// 1955   MT_ZdoBeaconIndCB ( NULL );
        ; Setup parameters for call to function MT_ZdoBeaconIndCB
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??MT_ZdoBeaconIndCB?relay; Banked call to: MT_ZdoBeaconIndCB
// 1956 
// 1957   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1958                                          MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R3,#0x1
        MOV     R2,#-0x39
        MOV     R1,#0x45
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 1959   return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??Subroutine69_0 & 0xFFFF
          CFI EndBlock cfiBlock274
// 1960 }
// 1961 
// 1962 /***************************************************************************************************
// 1963  * @fn          MT_ZdoBeaconIndCB
// 1964  *
// 1965  * @brief       Send an indication to host device of a beacon notification
// 1966  *
// 1967  * @param       pStr -  pointer to a parameter and a structure of parameters
// 1968  *
// 1969  * @return      void
// 1970  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1971 void *MT_ZdoBeaconIndCB ( void *pStr )
MT_ZdoBeaconIndCB:
          CFI Block cfiBlock275 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
        CODE
// 1972 {
        FUNCALL MT_ZdoBeaconIndCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1973   zdoBeaconInd_t *pBeacon = pStr;
// 1974   uint8 *pTmp;
// 1975 
// 1976   /* Packet Format */
// 1977   /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
// 1978 
// 1979   if( pStr != NULL)
        MOV     A,R6
        ORL     A,R7
        MOV     DPTR,#pBeaconIndBuf
        JNZ     $+5
        LJMP    ??MT_ZdoBeaconIndCB_0 & 0xFFFF
// 1980   {
// 1981     if( pBeaconIndBuf == NULL )
        LCALL   ??Subroutine75_0 & 0xFFFF
??CrossCallReturnLabel_145:
        JNZ     ??MT_ZdoBeaconIndCB_1
// 1982     {
// 1983       // If pBeaconIndBuf has not been allocated yet
// 1984       // allocate memory now with MAX_UART_TX_BUFF
// 1985       if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x7b
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
        MOV     DPTR,#pBeaconIndBuf
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_147:
        JNZ     $+5
        LJMP    ??MT_ZdoBeaconIndCB_2 & 0xFFFF
// 1986       {
// 1987         // Memory failure
// 1988         return NULL;
// 1989       }
// 1990       pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
        LCALL   ??Subroutine74_0 & 0xFFFF
// 1991     }
??CrossCallReturnLabel_141:
        CLR     A
        MOVX    @DPTR,A
// 1992 
// 1993     // Fill in the buffer with the beacon indication
// 1994     pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
??MT_ZdoBeaconIndCB_1:
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     R0,A
        MOV     R1,B
        MOV     DPTR,#pBeaconIndBuf
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 1995     *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine25 & 0xFFFF
// 1996     *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
??CrossCallReturnLabel_34:
        LCALL   ??Subroutine76_0 & 0xFFFF
// 1997     *pTmp++ = LO_UINT16(pBeacon->panID);
??CrossCallReturnLabel_151:
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine48 & 0xFFFF
// 1998     *pTmp++ = HI_UINT16(pBeacon->panID);
??CrossCallReturnLabel_159:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        LCALL   ?Subroutine25 & 0xFFFF
// 1999     *pTmp++ = pBeacon->logicalChannel;
??CrossCallReturnLabel_35:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine19 & 0xFFFF
// 2000     *pTmp++ = pBeacon->permitJoining;
??CrossCallReturnLabel_26:
        LCALL   ?Subroutine19 & 0xFFFF
// 2001     *pTmp++ = pBeacon->routerCapacity;
??CrossCallReturnLabel_27:
        INC     DPTR
        LCALL   ?Subroutine15 & 0xFFFF
// 2002     *pTmp++ = pBeacon->deviceCapacity;
??CrossCallReturnLabel_18:
        LCALL   ?Subroutine15 & 0xFFFF
// 2003     *pTmp++ = pBeacon->protocolVersion;
??CrossCallReturnLabel_19:
        INC     DPTR
        LCALL   ?Subroutine14 & 0xFFFF
// 2004     *pTmp++ = pBeacon->stackProfile;
??CrossCallReturnLabel_16:
        LCALL   ?Subroutine14 & 0xFFFF
// 2005     *pTmp++ = pBeacon->LQI;
??CrossCallReturnLabel_17:
        INC     DPTR
        LCALL   ??Subroutine76_0 & 0xFFFF
// 2006     *pTmp++ = pBeacon->depth;
??CrossCallReturnLabel_152:
        ADD     A,#0xb
        LCALL   ?Subroutine11 & 0xFFFF
// 2007     *pTmp++ = pBeacon->updateID;
??CrossCallReturnLabel_149:
        ADD     A,#0xc
        LCALL   ?Subroutine11 & 0xFFFF
// 2008     osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
??CrossCallReturnLabel_150:
        ADD     A,#0xd
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x8
        MOV     R5,#0x0
        LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 2009 
// 2010     pBeaconIndBuf[0] += 1; // Increment the devCnt
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_143:
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 2011 
// 2012     // Check if the buffer can fit in another beacon
// 2013     if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     R1,B
        ADD     A,#0x16
        JNC     ??MT_ZdoBeaconIndCB_3
        INC     R1
??MT_ZdoBeaconIndCB_3:
        CLR     C
        SUBB    A,#0x7c
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??MT_ZdoBeaconIndCB_2
// 2014     {
// 2015       // Packet full, send the packet over MT
// 2016       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2017                                    MT_ZDO_BEACON_NOTIFY_IND,
// 2018                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 2019       pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
        LCALL   ?Subroutine33 & 0xFFFF
// 2020     }
// 2021   }
??CrossCallReturnLabel_144:
        CLR     A
        SJMP    ??MT_ZdoBeaconIndCB_4
// 2022   else
// 2023   {
// 2024     if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
??MT_ZdoBeaconIndCB_0:
        LCALL   ??Subroutine75_0 & 0xFFFF
??CrossCallReturnLabel_146:
        JZ      ??MT_ZdoBeaconIndCB_2
        LCALL   ??Subroutine74_0 & 0xFFFF
??CrossCallReturnLabel_142:
        MOVX    A,@DPTR
        JZ      ??MT_ZdoBeaconIndCB_5
// 2025     {
// 2026       // End of beacon indication, send the packet over MT
// 2027       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2028                                    MT_ZDO_BEACON_NOTIFY_IND,
// 2029                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LCALL   ?Subroutine17 & 0xFFFF
// 2030     }
??CrossCallReturnLabel_23:
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 2031     // Free the allocated memory
// 2032     if(pBeaconIndBuf != NULL)
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_148:
        JZ      ??MT_ZdoBeaconIndCB_2
// 2033     {
// 2034       osal_mem_free(pBeaconIndBuf);
??MT_ZdoBeaconIndCB_5:
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#pBeaconIndBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
// 2035       pBeaconIndBuf = NULL;
        MOV     DPTR,#pBeaconIndBuf
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??MT_ZdoBeaconIndCB_4:
        MOVX    @DPTR,A
// 2036     }
// 2037   }
// 2038 
// 2039   return NULL;
??MT_ZdoBeaconIndCB_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock275
// 2040 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond276 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_143
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond277 Using cfiCommon0
          CFI (cfiCond277) Function MT_ZdoBeaconIndCB
          CFI (cfiCond277) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond277) CFA_SP SP+-2
          CFI (cfiCond277) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker278 Using cfiCommon1
          CFI (cfiPicker278) NoFunction
          CFI (cfiPicker278) Picker
        MOV     DPTR,#pBeaconIndBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
          CFI EndBlock cfiCond276
          CFI EndBlock cfiCond277
          CFI EndBlock cfiPicker278
        REQUIRE ??Subroutine74_0
        ; // Fall through to label ??Subroutine74_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine74_0:
          CFI Block cfiCond279 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_141
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function MT_ZdoBeaconIndCB
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-2
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function MT_ZdoBeaconIndCB
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-2
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function MT_ZdoBeaconIndCB
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-2
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker283 Using cfiCommon1
          CFI (cfiPicker283) NoFunction
          CFI (cfiPicker283) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiPicker283

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond284 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function MT_ZdoBeaconIndCB
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-2
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker286 Using cfiCommon1
          CFI (cfiPicker286) NoFunction
          CFI (cfiPicker286) Picker
        MOV     DPTR,#pBeaconIndBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     B,#0x15
        MUL     AB
        RET
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiPicker286

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond287 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function MT_ZdoBeaconIndCB
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-2
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker289 Using cfiCommon1
          CFI (cfiPicker289) NoFunction
          CFI (cfiPicker289) Picker
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_86:
        RET
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiPicker289

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond290 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function MT_ZdoBeaconIndCB
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_35
          CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond291) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond291) CFA_SP SP+-4
          CFI (cfiCond291) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function MT_ZdoBeaconIndCB
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_26
          CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond292) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond292) CFA_SP SP+-4
          CFI (cfiCond292) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond293 Using cfiCommon0
          CFI (cfiCond293) Function MT_ZdoBeaconIndCB
          CFI (cfiCond293) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_27
          CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond293) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond293) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond293) CFA_SP SP+-4
          CFI (cfiCond293) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker294 Using cfiCommon1
          CFI (cfiPicker294) NoFunction
          CFI (cfiPicker294) Picker
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_108:
        RET
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiCond293
          CFI EndBlock cfiPicker294

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine57:
          CFI Block cfiCond295 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond296 Using cfiCommon0
          CFI (cfiCond296) Function MT_ZdoBeaconIndCB
          CFI (cfiCond296) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_35
          CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond296) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond296) CFA_SP SP+-6
          CFI (cfiCond296) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond297 Using cfiCommon0
          CFI (cfiCond297) Function MT_ZdoBeaconIndCB
          CFI (cfiCond297) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_26
          CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond297) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond297) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond297) CFA_SP SP+-6
          CFI (cfiCond297) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function MT_ZdoBeaconIndCB
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_27
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+-6
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond299 Using cfiCommon0
          CFI (cfiCond299) Function MT_ZdoBeaconIndCB
          CFI (cfiCond299) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_18
          CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond299) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond299) CFA_SP SP+-6
          CFI (cfiCond299) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond300 Using cfiCommon0
          CFI (cfiCond300) Function MT_ZdoBeaconIndCB
          CFI (cfiCond300) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_19
          CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond300) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond300) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond300) CFA_SP SP+-6
          CFI (cfiCond300) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function MT_ZdoBeaconIndCB
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_16
          CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond301) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond301) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond301) CFA_SP SP+-6
          CFI (cfiCond301) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond302 Using cfiCommon0
          CFI (cfiCond302) Function MT_ZdoBeaconIndCB
          CFI (cfiCond302) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_17
          CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond302) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond302) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond302) CFA_SP SP+-6
          CFI (cfiCond302) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker303 Using cfiCommon1
          CFI (cfiPicker303) NoFunction
          CFI (cfiPicker303) Picker
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_162:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        RET
          CFI EndBlock cfiCond295
          CFI EndBlock cfiCond296
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiCond299
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiCond302
          CFI EndBlock cfiPicker303

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond304 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_147
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond305 Using cfiCommon0
          CFI (cfiCond305) Function MT_ZdoBeaconIndCB
          CFI (cfiCond305) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond305) CFA_SP SP+-2
          CFI (cfiCond305) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker306 Using cfiCommon1
          CFI (cfiPicker306) NoFunction
          CFI (cfiPicker306) Picker
        MOV     DPTR,#pBeaconIndBuf
          CFI EndBlock cfiCond304
          CFI EndBlock cfiCond305
          CFI EndBlock cfiPicker306
        REQUIRE ??Subroutine75_0
        ; // Fall through to label ??Subroutine75_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine75_0:
          CFI Block cfiCond307 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_145
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function MT_ZdoBeaconIndCB
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond308) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond308) CFA_SP SP+-2
          CFI (cfiCond308) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function MT_ZdoBeaconIndCB
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_147
          CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond309) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond309) CFA_SP SP+-2
          CFI (cfiCond309) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function MT_ZdoBeaconIndCB
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+-2
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker311 Using cfiCommon1
          CFI (cfiPicker311) NoFunction
          CFI (cfiPicker311) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiPicker311

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond312 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond313 Using cfiCommon0
          CFI (cfiCond313) Function MT_ZdoBeaconIndCB
          CFI (cfiCond313) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond313) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond313) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond313) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond313) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond313) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond313) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond313) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond313) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond313) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond313) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond313) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond313) CFA_SP SP+-2
          CFI (cfiCond313) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker314 Using cfiCommon1
          CFI (cfiPicker314) NoFunction
          CFI (cfiPicker314) Picker
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_87:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond312
          CFI EndBlock cfiCond313
          CFI EndBlock cfiPicker314

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond315 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond316 Using cfiCommon0
          CFI (cfiCond316) Function MT_ZdoBeaconIndCB
          CFI (cfiCond316) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond316) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond316) CFA_SP SP+-2
          CFI (cfiCond316) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker317 Using cfiCommon1
          CFI (cfiPicker317) NoFunction
          CFI (cfiPicker317) Picker
        MOV     DPTR,#pBeaconIndBuf
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     B,#0x15
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MUL     AB
        INC     A
        MOV     R3,A
        MOV     R2,#-0x3b
        MOV     R1,#0x45
        RET
          CFI EndBlock cfiCond315
          CFI EndBlock cfiCond316
          CFI EndBlock cfiPicker317

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond318 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond319 Using cfiCommon0
          CFI (cfiCond319) Function MT_ZdoBeaconIndCB
          CFI (cfiCond319) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond319) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond319) CFA_SP SP+-2
          CFI (cfiCond319) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker320 Using cfiCommon1
          CFI (cfiPicker320) NoFunction
          CFI (cfiPicker320) Picker
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_84:
        RET
          CFI EndBlock cfiCond318
          CFI EndBlock cfiCond319
          CFI EndBlock cfiPicker320

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond321 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond322 Using cfiCommon0
          CFI (cfiCond322) Function MT_ZdoBeaconIndCB
          CFI (cfiCond322) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_19
          CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond322) CFA_SP SP+-4
          CFI (cfiCond322) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond323 Using cfiCommon0
          CFI (cfiCond323) Function MT_ZdoBeaconIndCB
          CFI (cfiCond323) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_16
          CFI (cfiCond323) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond323) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond323) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond323) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond323) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond323) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond323) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond323) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond323) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond323) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond323) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond323) CFA_SP SP+-4
          CFI (cfiCond323) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond324 Using cfiCommon0
          CFI (cfiCond324) Function MT_ZdoBeaconIndCB
          CFI (cfiCond324) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_17
          CFI (cfiCond324) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond324) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond324) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond324) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond324) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond324) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond324) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond324) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond324) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond324) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond324) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond324) CFA_SP SP+-4
          CFI (cfiCond324) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker325 Using cfiCommon1
          CFI (cfiPicker325) NoFunction
          CFI (cfiPicker325) Picker
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_109:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond321
          CFI EndBlock cfiCond322
          CFI EndBlock cfiCond323
          CFI EndBlock cfiCond324
          CFI EndBlock cfiPicker325

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond326 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond327 Using cfiCommon0
          CFI (cfiCond327) Function MT_ZdoBeaconIndCB
          CFI (cfiCond327) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond327) CFA_SP SP+-2
          CFI (cfiCond327) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker328 Using cfiCommon1
          CFI (cfiPicker328) NoFunction
          CFI (cfiPicker328) Picker
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_85:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond326
          CFI EndBlock cfiCond327
          CFI EndBlock cfiPicker328

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond329 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_149
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond330 Using cfiCommon0
          CFI (cfiCond330) Function MT_ZdoBeaconIndCB
          CFI (cfiCond330) Conditional ??CrossCallReturnLabel_150
          CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond330) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond330) CFA_SP SP+-2
          CFI (cfiCond330) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker331 Using cfiCommon1
          CFI (cfiPicker331) NoFunction
          CFI (cfiPicker331) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
          CFI EndBlock cfiCond329
          CFI EndBlock cfiCond330
          CFI EndBlock cfiPicker331
        REQUIRE ??Subroutine76_0
        ; // Fall through to label ??Subroutine76_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine76_0:
          CFI Block cfiCond332 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_151
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond333 Using cfiCommon0
          CFI (cfiCond333) Function MT_ZdoBeaconIndCB
          CFI (cfiCond333) Conditional ??CrossCallReturnLabel_152
          CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond333) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond333) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond333) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond333) CFA_SP SP+-2
          CFI (cfiCond333) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond334 Using cfiCommon0
          CFI (cfiCond334) Function MT_ZdoBeaconIndCB
          CFI (cfiCond334) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond334) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond334) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond334) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond334) CFA_SP SP+-2
          CFI (cfiCond334) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond335 Using cfiCommon0
          CFI (cfiCond335) Function MT_ZdoBeaconIndCB
          CFI (cfiCond335) Conditional ??CrossCallReturnLabel_150
          CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond335) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond335) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond335) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond335) CFA_SP SP+-2
          CFI (cfiCond335) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker336 Using cfiCommon1
          CFI (cfiPicker336) NoFunction
          CFI (cfiPicker336) Picker
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_160:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        RET
          CFI EndBlock cfiCond332
          CFI EndBlock cfiCond333
          CFI EndBlock cfiCond334
          CFI EndBlock cfiCond335
          CFI EndBlock cfiPicker336

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond337 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_159
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond338 Using cfiCommon0
          CFI (cfiCond338) Function MT_ZdoBeaconIndCB
          CFI (cfiCond338) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_149
          CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond338) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond338) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond338) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond338) CFA_SP SP+-4
          CFI (cfiCond338) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond339 Using cfiCommon0
          CFI (cfiCond339) Function MT_ZdoBeaconIndCB
          CFI (cfiCond339) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_150
          CFI (cfiCond339) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond339) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond339) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond339) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond339) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond339) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond339) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond339) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond339) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond339) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond339) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond339) CFA_SP SP+-4
          CFI (cfiCond339) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond340 Using cfiCommon0
          CFI (cfiCond340) Function MT_ZdoBeaconIndCB
          CFI (cfiCond340) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_151
          CFI (cfiCond340) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond340) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond340) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond340) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond340) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond340) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond340) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond340) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond340) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond340) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond340) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond340) CFA_SP SP+-4
          CFI (cfiCond340) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond341 Using cfiCommon0
          CFI (cfiCond341) Function MT_ZdoBeaconIndCB
          CFI (cfiCond341) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_152
          CFI (cfiCond341) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond341) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond341) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond341) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond341) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond341) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond341) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond341) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond341) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond341) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond341) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond341) CFA_SP SP+-4
          CFI (cfiCond341) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond342 Using cfiCommon0
          CFI (cfiCond342) Function MT_ZdoSendMsgCB
          CFI (cfiCond342) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_153
          CFI (cfiCond342) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond342) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond342) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond342) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond342) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond342) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond342) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond342) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond342) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond342) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond342) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond342) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond342) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond342) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond342) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond342) CFA_SP SP+-4
          CFI (cfiCond342) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond343 Using cfiCommon0
          CFI (cfiCond343) Function MT_ZdoSendMsgCB
          CFI (cfiCond343) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_154
          CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond343) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond343) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond343) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond343) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond343) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond343) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond343) CFA_SP SP+-4
          CFI (cfiCond343) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond344 Using cfiCommon0
          CFI (cfiCond344) Function MT_ZdoSendMsgCB
          CFI (cfiCond344) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_155
          CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond344) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond344) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond344) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond344) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond344) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond344) CFA_SP SP+-4
          CFI (cfiCond344) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond345 Using cfiCommon0
          CFI (cfiCond345) Function MT_ZdoSendMsgCB
          CFI (cfiCond345) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_156
          CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond345) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond345) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond345) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond345) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond345) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond345) CFA_SP SP+-4
          CFI (cfiCond345) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond346 Using cfiCommon0
          CFI (cfiCond346) Function MT_ZdoSendMsgCB
          CFI (cfiCond346) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_157
          CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond346) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond346) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond346) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond346) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond346) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond346) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond346) CFA_SP SP+-4
          CFI (cfiCond346) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond347 Using cfiCommon0
          CFI (cfiCond347) Function MT_ZdoSendMsgCB
          CFI (cfiCond347) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_158
          CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond347) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond347) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond347) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond347) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond347) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond347) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond347) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond347) CFA_SP SP+-4
          CFI (cfiCond347) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker348 Using cfiCommon1
          CFI (cfiPicker348) NoFunction
          CFI (cfiPicker348) Picker
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_163:
        RET
          CFI EndBlock cfiCond337
          CFI EndBlock cfiCond338
          CFI EndBlock cfiCond339
          CFI EndBlock cfiCond340
          CFI EndBlock cfiCond341
          CFI EndBlock cfiCond342
          CFI EndBlock cfiCond343
          CFI EndBlock cfiCond344
          CFI EndBlock cfiCond345
          CFI EndBlock cfiCond346
          CFI EndBlock cfiCond347
          CFI EndBlock cfiPicker348

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine61:
          CFI Block cfiCond349 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-8
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond350 Using cfiCommon0
          CFI (cfiCond350) Function MT_ZdoBeaconIndCB
          CFI (cfiCond350) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_35
          CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond350) CFA_SP SP+-8
          CFI (cfiCond350) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond351 Using cfiCommon0
          CFI (cfiCond351) Function MT_ZdoBeaconIndCB
          CFI (cfiCond351) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_26
          CFI (cfiCond351) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond351) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond351) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond351) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond351) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond351) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond351) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond351) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond351) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond351) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond351) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond351) CFA_SP SP+-8
          CFI (cfiCond351) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond352 Using cfiCommon0
          CFI (cfiCond352) Function MT_ZdoBeaconIndCB
          CFI (cfiCond352) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_27
          CFI (cfiCond352) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond352) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond352) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond352) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond352) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond352) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond352) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond352) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond352) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond352) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond352) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond352) CFA_SP SP+-8
          CFI (cfiCond352) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond353 Using cfiCommon0
          CFI (cfiCond353) Function MT_ZdoBeaconIndCB
          CFI (cfiCond353) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_18
          CFI (cfiCond353) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond353) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond353) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond353) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond353) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond353) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond353) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond353) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond353) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond353) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond353) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond353) CFA_SP SP+-8
          CFI (cfiCond353) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond354 Using cfiCommon0
          CFI (cfiCond354) Function MT_ZdoBeaconIndCB
          CFI (cfiCond354) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_19
          CFI (cfiCond354) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond354) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond354) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond354) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond354) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond354) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond354) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond354) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond354) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond354) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond354) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond354) CFA_SP SP+-8
          CFI (cfiCond354) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond355 Using cfiCommon0
          CFI (cfiCond355) Function MT_ZdoBeaconIndCB
          CFI (cfiCond355) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_16
          CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond355) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond355) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond355) CFA_SP SP+-8
          CFI (cfiCond355) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond356 Using cfiCommon0
          CFI (cfiCond356) Function MT_ZdoBeaconIndCB
          CFI (cfiCond356) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_17
          CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond356) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond356) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond356) CFA_SP SP+-8
          CFI (cfiCond356) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond357 Using cfiCommon0
          CFI (cfiCond357) Function MT_ZdoBeaconIndCB
          CFI (cfiCond357) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_159
          CFI (cfiCond357) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond357) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond357) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond357) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond357) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond357) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond357) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond357) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond357) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond357) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond357) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond357) CFA_SP SP+-4
          CFI (cfiCond357) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond358 Using cfiCommon0
          CFI (cfiCond358) Function MT_ZdoBeaconIndCB
          CFI (cfiCond358) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_149
          CFI (cfiCond358) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond358) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond358) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond358) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond358) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond358) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond358) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond358) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond358) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond358) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond358) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond358) CFA_SP SP+-6
          CFI (cfiCond358) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond359 Using cfiCommon0
          CFI (cfiCond359) Function MT_ZdoBeaconIndCB
          CFI (cfiCond359) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_150
          CFI (cfiCond359) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond359) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond359) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond359) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond359) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond359) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond359) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond359) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond359) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond359) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond359) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond359) CFA_SP SP+-6
          CFI (cfiCond359) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond360 Using cfiCommon0
          CFI (cfiCond360) Function MT_ZdoBeaconIndCB
          CFI (cfiCond360) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_151
          CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond360) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond360) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond360) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond360) CFA_SP SP+-6
          CFI (cfiCond360) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond361 Using cfiCommon0
          CFI (cfiCond361) Function MT_ZdoBeaconIndCB
          CFI (cfiCond361) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_152
          CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond361) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond361) CFA_SP SP+-6
          CFI (cfiCond361) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond362 Using cfiCommon0
          CFI (cfiCond362) Function MT_ZdoSendMsgCB
          CFI (cfiCond362) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_153
          CFI (cfiCond362) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond362) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond362) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond362) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond362) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond362) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond362) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond362) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond362) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond362) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond362) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond362) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond362) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond362) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond362) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond362) CFA_SP SP+-6
          CFI (cfiCond362) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond363 Using cfiCommon0
          CFI (cfiCond363) Function MT_ZdoSendMsgCB
          CFI (cfiCond363) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_154
          CFI (cfiCond363) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond363) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond363) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond363) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond363) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond363) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond363) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond363) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond363) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond363) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond363) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond363) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond363) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond363) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond363) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond363) CFA_SP SP+-6
          CFI (cfiCond363) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond364 Using cfiCommon0
          CFI (cfiCond364) Function MT_ZdoSendMsgCB
          CFI (cfiCond364) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_155
          CFI (cfiCond364) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond364) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond364) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond364) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond364) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond364) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond364) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond364) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond364) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond364) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond364) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond364) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond364) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond364) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond364) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond364) CFA_SP SP+-6
          CFI (cfiCond364) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond365 Using cfiCommon0
          CFI (cfiCond365) Function MT_ZdoSendMsgCB
          CFI (cfiCond365) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_156
          CFI (cfiCond365) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond365) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond365) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond365) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond365) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond365) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond365) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond365) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond365) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond365) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond365) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond365) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond365) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond365) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond365) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond365) CFA_SP SP+-6
          CFI (cfiCond365) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond366 Using cfiCommon0
          CFI (cfiCond366) Function MT_ZdoSendMsgCB
          CFI (cfiCond366) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_157
          CFI (cfiCond366) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond366) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond366) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond366) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond366) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond366) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond366) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond366) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond366) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond366) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond366) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond366) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond366) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond366) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond366) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond366) CFA_SP SP+-6
          CFI (cfiCond366) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond367 Using cfiCommon0
          CFI (cfiCond367) Function MT_ZdoSendMsgCB
          CFI (cfiCond367) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_158
          CFI (cfiCond367) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond367) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond367) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond367) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond367) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond367) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond367) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond367) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond367) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond367) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond367) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond367) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond367) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond367) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond367) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond367) CFA_SP SP+-6
          CFI (cfiCond367) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker368 Using cfiCommon1
          CFI (cfiPicker368) NoFunction
          CFI (cfiPicker368) Picker
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
        RET
          CFI EndBlock cfiCond349
          CFI EndBlock cfiCond350
          CFI EndBlock cfiCond351
          CFI EndBlock cfiCond352
          CFI EndBlock cfiCond353
          CFI EndBlock cfiCond354
          CFI EndBlock cfiCond355
          CFI EndBlock cfiCond356
          CFI EndBlock cfiCond357
          CFI EndBlock cfiCond358
          CFI EndBlock cfiCond359
          CFI EndBlock cfiCond360
          CFI EndBlock cfiCond361
          CFI EndBlock cfiCond362
          CFI EndBlock cfiCond363
          CFI EndBlock cfiCond364
          CFI EndBlock cfiCond365
          CFI EndBlock cfiCond366
          CFI EndBlock cfiCond367
          CFI EndBlock cfiPicker368
// 2041 
// 2042 
// 2043 
// 2044 /***************************************************************************************************
// 2045  * @fn          MT_ZdoJoinCnfCB
// 2046  *
// 2047  * @brief       Handle the ZDO Join Confirm from ZDO
// 2048  *
// 2049  * @param       pStr - pointer to a parameter and a structure of parameters
// 2050  *
// 2051  * @return      void
// 2052  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2053 void *MT_ZdoJoinCnfCB ( void *pStr )
MT_ZdoJoinCnfCB:
          CFI Block cfiBlock369 Using cfiCommon0
          CFI Function MT_ZdoJoinCnfCB
        CODE
// 2054 {
        FUNCALL MT_ZdoJoinCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoJoinCnfCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2055   /* pStr: zdoJoinCnf_t* */
// 2056   /* Packet Format */
// 2057   /* Status (1) | device addr (2) | parent addr (2) */
// 2058 
// 2059   uint8 buf[MT_ZDO_JOIN_CNF_LEN];
// 2060   zdoJoinCnf_t *joinCnf = pStr;
// 2061 
// 2062   /* Join Complete. De-register the callback with ZDO */
// 2063   ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV     R1,#0x4
        LCALL   ??ZDO_DeregisterForZdoCB?relay; Banked call to: ZDO_DeregisterForZdoCB
// 2064 
// 2065   buf[0] = joinCnf->status;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine35 & 0xFFFF
// 2066   buf[1] = LO_UINT16( joinCnf->deviceAddr );
??CrossCallReturnLabel_54:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2067   buf[2] = HI_UINT16( joinCnf->deviceAddr );
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2068   buf[3] = LO_UINT16( joinCnf->parentAddr );
        MOV     A,R6
        ADD     A,#0x3
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2069   buf[4] = HI_UINT16( joinCnf->parentAddr );
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2070 
// 2071   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2072                                MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x5
        MOV     R2,#-0x3a
        MOV     R1,#0x45
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 2073 
// 2074   return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,#0x5
        LJMP    ??Subroutine68_0 & 0xFFFF
          CFI EndBlock cfiBlock369
// 2075 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond370 Using cfiCommon0
          CFI Function MT_ZdoSendData
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond371 Using cfiCommon0
          CFI (cfiCond371) Function MT_ZdoJoinCnfCB
          CFI (cfiCond371) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond371) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond371) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond371) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond371) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond371) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond371) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond371) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond371) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond371) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond371) CFA_SP SP+-2
          CFI (cfiCond371) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker372 Using cfiCommon1
          CFI (cfiPicker372) NoFunction
          CFI (cfiPicker372) Picker
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond370
          CFI EndBlock cfiCond371
          CFI EndBlock cfiPicker372
// 2076 
// 2077 /*************************************************************************************************
// 2078  * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
// 2079  *
// 2080  * @brief   MT proxy for ZDO_RegisterForZDOMsg.
// 2081  *
// 2082  * @param   pBuf  - MT message data
// 2083  *
// 2084  * @return  void
// 2085  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2086 void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
MT_ZdoRegisterForZDOMsg:
          CFI Block cfiBlock373 Using cfiCommon0
          CFI Function MT_ZdoRegisterForZDOMsg
        CODE
// 2087 {
        FUNCALL MT_ZdoRegisterForZDOMsg, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoRegisterForZDOMsg, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 2088   uint8 cmd0, cmd1, tmp;
// 2089   uint16 cId;
// 2090 
// 2091   /* parse header */
// 2092   cmd0 = pBuf[MT_RPC_POS_CMD0];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 2093   cmd1 = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine65_0 & 0xFFFF
// 2094   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_121:
        JNC     ??MT_ZdoRegisterForZDOMsg_0
        INC     R3
// 2095 
// 2096   cId = BUILD_UINT16(pBuf[0], pBuf[1]);
// 2097   tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
??MT_ZdoRegisterForZDOMsg_0:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
        LCALL   ?Subroutine43 & 0xFFFF
// 2098 
// 2099   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
??CrossCallReturnLabel_78:
        JNZ     ??MT_ZdoRegisterForZDOMsg_1
// 2100   {
// 2101     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 2102   }
// 2103 }
??MT_ZdoRegisterForZDOMsg_1:
        LJMP    ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock373

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond374 Using cfiCommon0
          CFI Function MT_ZdoStartupFromApp
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond375 Using cfiCommon0
          CFI (cfiCond375) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond375) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond375) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond375) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond375) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond375) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond375) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond375) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond375) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond375) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond375) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond375) CFA_SP SP+-2
          CFI (cfiCond375) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond376 Using cfiCommon0
          CFI (cfiCond376) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond376) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond376) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond376) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond376) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond376) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond376) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond376) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond376) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond376) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond376) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond376) CFA_SP SP+-2
          CFI (cfiCond376) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker377 Using cfiCommon1
          CFI (cfiPicker377) NoFunction
          CFI (cfiPicker377) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#-0x20
        ANL     A,R7
        XRL     A,#0x20
        RET
          CFI EndBlock cfiCond374
          CFI EndBlock cfiCond375
          CFI EndBlock cfiCond376
          CFI EndBlock cfiPicker377
// 2104 
// 2105 /*************************************************************************************************
// 2106  * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
// 2107  *
// 2108  * @brief   MT proxy for ZDO_RemoveRegisteredCB.
// 2109  *
// 2110  * @param   pBuf  - MT message data
// 2111  *
// 2112  * @return  void
// 2113  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2114 void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
MT_ZdoRemoveRegisteredCB:
          CFI Block cfiBlock378 Using cfiCommon0
          CFI Function MT_ZdoRemoveRegisteredCB
        CODE
// 2115 {
        FUNCALL MT_ZdoRemoveRegisteredCB, ZDO_RemoveRegisteredCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoRemoveRegisteredCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 2116   uint8 cmd0, cmd1, tmp;
// 2117   uint16 cId;
// 2118 
// 2119   /* parse header */
// 2120   cmd0 = pBuf[MT_RPC_POS_CMD0];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 2121   cmd1 = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine65_0 & 0xFFFF
// 2122   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_122:
        JNC     ??MT_ZdoRemoveRegisteredCB_0
        INC     R3
// 2123 
// 2124   cId = BUILD_UINT16(pBuf[0], pBuf[1]);
// 2125   tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
??MT_ZdoRemoveRegisteredCB_0:
        ; Setup parameters for call to function ZDO_RemoveRegisteredCB
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ??ZDO_RemoveRegisteredCB?relay; Banked call to: ZDO_RemoveRegisteredCB
        LCALL   ?Subroutine43 & 0xFFFF
// 2126 
// 2127   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
??CrossCallReturnLabel_79:
        JNZ     ??MT_ZdoRemoveRegisteredCB_1
// 2128   {
// 2129     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 2130   }
// 2131 }
??MT_ZdoRemoveRegisteredCB_1:
        LJMP    ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock378

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond379 Using cfiCommon0
          CFI Function MT_ZdoRegisterForZDOMsg
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond380 Using cfiCommon0
          CFI (cfiCond380) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond380) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond380) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond380) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond380) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond380) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond380) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond380) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond380) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond380) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond380) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond380) CFA_SP SP+-2
          CFI (cfiCond380) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker381 Using cfiCommon1
          CFI (cfiPicker381) NoFunction
          CFI (cfiPicker381) Picker
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        MOV     DPTR,#MT_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond379
          CFI EndBlock cfiCond380
          CFI EndBlock cfiPicker381

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine52:
          CFI Block cfiCond382 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond383 Using cfiCommon0
          CFI (cfiCond383) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond383) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_37
          CFI (cfiCond383) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond383) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond383) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond383) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond383) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond383) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond383) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond383) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond383) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond383) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond383) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond383) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond383) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond383) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond383) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond383) CFA_SP SP+-4
          CFI (cfiCond383) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond384 Using cfiCommon0
          CFI (cfiCond384) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond384) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_24
          CFI (cfiCond384) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond384) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond384) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond384) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond384) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond384) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond384) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond384) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond384) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond384) CFA_SP SP+-4
          CFI (cfiCond384) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond385 Using cfiCommon0
          CFI (cfiCond385) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond385) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_25
          CFI (cfiCond385) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond385) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond385) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond385) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond385) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond385) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond385) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond385) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond385) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond385) CFA_SP SP+-4
          CFI (cfiCond385) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker386 Using cfiCommon1
          CFI (cfiPicker386) NoFunction
          CFI (cfiPicker386) Picker
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_111:
        RET
          CFI EndBlock cfiCond382
          CFI EndBlock cfiCond383
          CFI EndBlock cfiCond384
          CFI EndBlock cfiCond385
          CFI EndBlock cfiPicker386

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine59:
          CFI Block cfiCond387 Using cfiCommon0
          CFI Function MT_ZdoIEEEAddrRequest
          CFI Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond388 Using cfiCommon0
          CFI (cfiCond388) Function MT_ZdoUserDescSet
          CFI (cfiCond388) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_29
          CFI (cfiCond388) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond388) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond388) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond388) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond388) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond388) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond388) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond388) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond388) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond388) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond388) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond388) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond388) CFA_SP SP+-6
          CFI (cfiCond388) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond389 Using cfiCommon0
          CFI (cfiCond389) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond389) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_88
          CFI (cfiCond389) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond389) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond389) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond389) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond389) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond389) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond389) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond389) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond389) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond389) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond389) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond389) CFA_SP SP+-4
          CFI (cfiCond389) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond390 Using cfiCommon0
          CFI (cfiCond390) Function MT_ZdoMatchDescRequest
          CFI (cfiCond390) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_36
          CFI (cfiCond390) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond390) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond390) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond390) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond390) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond390) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond390) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond390) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond390) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond390) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond390) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond390) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond390) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond390) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond390) CFA_SP SP+-6
          CFI (cfiCond390) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond391 Using cfiCommon0
          CFI (cfiCond391) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond391) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_37
          CFI (cfiCond391) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond391) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond391) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond391) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond391) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond391) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond391) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond391) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond391) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond391) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond391) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond391) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond391) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond391) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond391) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond391) CFA_SP SP+-6
          CFI (cfiCond391) CFA_XSP16 add(XSP16, 85)
          CFI Block cfiCond392 Using cfiCommon0
          CFI (cfiCond392) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond392) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_24
          CFI (cfiCond392) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond392) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond392) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond392) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond392) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond392) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond392) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond392) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond392) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond392) CFA_SP SP+-6
          CFI (cfiCond392) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond393 Using cfiCommon0
          CFI (cfiCond393) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond393) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_25
          CFI (cfiCond393) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond393) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond393) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond393) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond393) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond393) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond393) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond393) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond393) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond393) CFA_SP SP+-6
          CFI (cfiCond393) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker394 Using cfiCommon1
          CFI (cfiPicker394) NoFunction
          CFI (cfiPicker394) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_135:
        MOV     A,R4
        ADD     A,R0
        RET
          CFI EndBlock cfiCond387
          CFI EndBlock cfiCond388
          CFI EndBlock cfiCond389
          CFI EndBlock cfiCond390
          CFI EndBlock cfiCond391
          CFI EndBlock cfiCond392
          CFI EndBlock cfiCond393
          CFI EndBlock cfiPicker394
// 2132 
// 2133 #endif /* MT_ZDO_FUNC */
// 2134 
// 2135 
// 2136 /***************************************************************************************************
// 2137  * Callback handling function
// 2138  ***************************************************************************************************/
// 2139 
// 2140 #if defined (MT_ZDO_CB_FUNC)
// 2141 
// 2142 /***************************************************************************************************
// 2143  * @fn      MT_ZdoStateChangeCB
// 2144  *
// 2145  * @brief   Handle state change OSAL message from ZDO.
// 2146  *
// 2147  * @param   pMsg  - Message data
// 2148  *
// 2149  * @return  void
// 2150  */
// 2151 void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
// 2152 {
// 2153   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2154                                        MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
// 2155 }
// 2156 
// 2157 /***************************************************************************************************
// 2158  * @fn     MT_ZdoDirectCB()
// 2159  *
// 2160  * @brief  ZDO direct callback.  Build an MT message directly from the
// 2161  *         over-the-air ZDO message.
// 2162  *
// 2163  * @param  pData - Incoming AF frame.
// 2164  *
// 2165  * @return  none
// 2166  ***************************************************************************************************/
// 2167 void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 2168 {
// 2169   uint8 len, *pBuf;
// 2170   uint16 origClusterId;
// 2171 
// 2172   // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
// 2173   origClusterId = pData->clusterId;
// 2174 
// 2175   // Is the message an exception or not a response?
// 2176   if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
// 2177   {
// 2178     return;  // Handled somewhere else or not needed.
// 2179   }
// 2180 
// 2181   /* ZDO data starts after one-byte sequence number and the msg buffer length includes
// 2182    * two bytes for srcAddr.
// 2183    */
// 2184   len = pData->cmd.DataLength - 1 + sizeof(uint16);
// 2185 
// 2186   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2187   {
// 2188     uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
// 2189 
// 2190     pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
// 2191     pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
// 2192 
// 2193     /* copy ZDO data, skipping one-byte sequence number */
// 2194     osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
// 2195 
// 2196     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 2197     osal_mem_free(pBuf);
// 2198   }
// 2199 }
// 2200 
// 2201 /***************************************************************************************************
// 2202  * @fn     MT_ZdoHandleExceptions()
// 2203  *
// 2204  * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
// 2205  *
// 2206  * @param  pData - Incoming AF frame.
// 2207  *
// 2208  * @return  TRUE if handled by this function, FALSE if not
// 2209  ***************************************************************************************************/
// 2210 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 2211 {
// 2212   uint8 ret = TRUE;
// 2213   ZDO_NwkIEEEAddrResp_t *nwkRsp;
// 2214   ZDO_DeviceAnnce_t devAnnce;
// 2215   uint8 doDefault = FALSE;
// 2216 
// 2217   switch ( inMsg->clusterID )
// 2218   {
// 2219     case NWK_addr_rsp:
// 2220     case IEEE_addr_rsp:
// 2221       if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
// 2222       {
// 2223         if ( nwkRsp->status == ZDO_SUCCESS )
// 2224         {
// 2225           MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
// 2226         }
// 2227         osal_mem_free( nwkRsp );
// 2228       }
// 2229       break;
// 2230 
// 2231     case Device_annce:
// 2232       ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
// 2233       MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
// 2234       break;
// 2235 
// 2236     case Simple_Desc_rsp:
// 2237       if ( pData->cmd.DataLength > 5 )
// 2238       {
// 2239         ret = FALSE;
// 2240       }
// 2241       else
// 2242       {
// 2243         doDefault = TRUE;
// 2244       }
// 2245       break;
// 2246 
// 2247     default:
// 2248       ret = FALSE;
// 2249       break;
// 2250   }
// 2251 
// 2252   if ( doDefault )
// 2253   {
// 2254     ret = FALSE;
// 2255     pData->clusterId = MtZdoDef_rsp;
// 2256     pData->cmd.DataLength = 2;
// 2257   }
// 2258 
// 2259   return ( ret );
// 2260 }
// 2261 
// 2262 /***************************************************************************************************
// 2263  * @fn      MT_ZdoAddrRspCB
// 2264  *
// 2265  * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
// 2266  *
// 2267  * @param   pMsg  - Message data
// 2268  *
// 2269  * @return  void
// 2270  */
// 2271 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
// 2272 {
// 2273   uint8   listLen, len, *pBuf;
// 2274 
// 2275   /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
// 2276 
// 2277   /* get length, sanity check length */
// 2278   listLen = pMsg->numAssocDevs;
// 2279 
// 2280   /* calculate msg length */
// 2281   len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
// 2282 
// 2283   /* get buffer */
// 2284   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2285   {
// 2286     uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
// 2287     uint8 *pTmp = pBuf;
// 2288 
// 2289     *pTmp++ = pMsg->status;
// 2290 
// 2291     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 2292     pTmp += Z_EXTADDR_LEN;
// 2293 
// 2294     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 2295     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 2296 
// 2297     *pTmp++ = pMsg->startIndex;
// 2298     *pTmp++ = listLen;
// 2299 
// 2300     MT_Word2Buf(pTmp, pMsg->devList, listLen);
// 2301 
// 2302     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 2303     osal_mem_free(pBuf);
// 2304   }
// 2305 }
// 2306 
// 2307 /***************************************************************************************************
// 2308  * @fn      MT_ZdoEndDevAnnceCB
// 2309  *
// 2310  * @brief   Handle end device announce OSAL message from ZDO.
// 2311  *
// 2312  * @param   pMsg  - Message data
// 2313  *
// 2314  * @return  void
// 2315  */
// 2316 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
// 2317 {
// 2318   uint8 *pBuf;
// 2319 
// 2320   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
// 2321   {
// 2322     uint8 *pTmp = pBuf;
// 2323 
// 2324     *pTmp++ = LO_UINT16(srcAddr);
// 2325     *pTmp++ = HI_UINT16(srcAddr);
// 2326 
// 2327     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 2328     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 2329 
// 2330     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 2331     pTmp += Z_EXTADDR_LEN;
// 2332 
// 2333     *pTmp = pMsg->capabilities;
// 2334 
// 2335     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2336                                          MT_ZDO_END_DEVICE_ANNCE_IND,
// 2337                                          MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
// 2338     osal_mem_free(pBuf);
// 2339   }
// 2340 }
// 2341 
// 2342 /***************************************************************************************************
// 2343  * @fn      MT_ZdoSrcRtgCB
// 2344  *
// 2345  * @brief   Handle Src Route from ZDO.
// 2346  *
// 2347  * @param   pStr  - pointer to the data structure for the src route
// 2348  *
// 2349  * @return  void*
// 2350  */
// 2351 void* MT_ZdoSrcRtgCB( void *pStr )
// 2352 {
// 2353   uint8 len, *pBuf;
// 2354   zdoSrcRtg_t *pSrcRtg = pStr;
// 2355 
// 2356   // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
// 2357   len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
// 2358 
// 2359   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2360   {
// 2361     uint8 idx, *pTmp = pBuf;
// 2362     uint16 *pRelay;
// 2363 
// 2364     // Packet payload
// 2365     *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
// 2366     *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
// 2367     *pTmp++ = pSrcRtg->relayCnt;
// 2368 
// 2369     // Relay List
// 2370     if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
// 2371     {
// 2372       for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
// 2373       {
// 2374         *pTmp++ = LO_UINT16(*pRelay);
// 2375         *pTmp++ = HI_UINT16(*pRelay);
// 2376         pRelay++;
// 2377       }
// 2378     }
// 2379     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2380                                          MT_ZDO_SRC_RTG_IND, len, pBuf);
// 2381     osal_mem_free(pBuf);
// 2382   }
// 2383 
// 2384   return NULL;
// 2385 }
// 2386 
// 2387 /***************************************************************************************************
// 2388  * @fn          MT_ZdoConcentratorIndCB
// 2389  *
// 2390  * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
// 2391  *
// 2392  * @param       pStr - pointer to a parameter and a structure of parameters
// 2393  *
// 2394  * @return      NULL
// 2395  ***************************************************************************************************/
// 2396 static void *MT_ZdoConcentratorIndCB(void *pStr)
// 2397 {
// 2398   uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
// 2399   zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
// 2400 
// 2401   *pTmp++ = LO_UINT16(pInd->nwkAddr);
// 2402   *pTmp++ = HI_UINT16(pInd->nwkAddr);
// 2403   pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
// 2404   *pTmp = pInd->pktCost;
// 2405 
// 2406   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2407                                     MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
// 2408   return NULL;
// 2409 }
// 2410 
// 2411 /***************************************************************************************************
// 2412  * @fn          MT_ZdoLeaveInd
// 2413  *
// 2414  * @brief       Handle the ZDO Leave Indication callback from the ZDO.
// 2415  *
// 2416  * @param       vPtr - Pointer to the received Leave Indication message.
// 2417  *
// 2418  * @return      NULL
// 2419  ***************************************************************************************************/
// 2420 static void *MT_ZdoLeaveInd(void *vPtr)
// 2421 {
// 2422   NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
// 2423   uint8 buf[sizeof(NLME_LeaveInd_t)];
// 2424 
// 2425   buf[0] = LO_UINT16(pInd->srcAddr);
// 2426   buf[1] = HI_UINT16(pInd->srcAddr);
// 2427   (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
// 2428   buf[2+Z_EXTADDR_LEN] = pInd->request;
// 2429   buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
// 2430   buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
// 2431 
// 2432   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2433                                        MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
// 2434   return NULL;
// 2435 }
// 2436 
// 2437 /***************************************************************************************************
// 2438  * @fn          MT_ZdoTcDeviceInd
// 2439  *
// 2440  * @brief       Handle the ZDO TC Device Indication callback from the ZDO.
// 2441  *
// 2442  * @param       params - pointer to Trust Center joining device information
// 2443  *
// 2444  * @return      NULL
// 2445  ***************************************************************************************************/
// 2446 void *MT_ZdoTcDeviceInd( void *params )
// 2447 {
// 2448   ZDO_TC_Device_t *pDev = (ZDO_TC_Device_t *)params;
// 2449   uint8 buf[12];
// 2450 
// 2451   buf[0] = LO_UINT16( pDev->nwkAddr );
// 2452   buf[1] = HI_UINT16( pDev->nwkAddr );
// 2453   (void)osal_memcpy( &buf[2], pDev->extAddr, Z_EXTADDR_LEN);
// 2454   buf[2+Z_EXTADDR_LEN] = LO_UINT16( pDev->parentAddr );
// 2455   buf[3+Z_EXTADDR_LEN] = HI_UINT16( pDev->parentAddr );
// 2456 
// 2457   MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2458                                        MT_ZDO_TC_DEVICE_IND, 12, buf );
// 2459   
// 2460   return ( NULL );
// 2461 }
// 2462 
// 2463 /***************************************************************************************************
// 2464  * @fn          MT_ZdoPermitJoinInd
// 2465  *
// 2466  * @brief       Handle the ZDO Permit Join Indication callback from the ZDO.
// 2467  *
// 2468  * @param       duration - permit join duration
// 2469  *
// 2470  * @return      NULL
// 2471  ***************************************************************************************************/
// 2472 void *MT_ZdoPermitJoinInd( void *duration )
// 2473 {
// 2474   if ( ignoreIndication == FALSE )
// 2475   {
// 2476     MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2477                                        MT_ZDO_PERMIT_JOIN_IND, 1, (uint8 *)duration );
// 2478   }
// 2479   
// 2480   return ( NULL );
// 2481 }
// 2482 #endif // MT_ZDO_CB_FUNC
// 2483 
// 2484 /***************************************************************************************************
// 2485  * @fn      MT_ZdoSendMsgCB
// 2486  *
// 2487  * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
// 2488  *
// 2489  * @param   pMsg  - Message data
// 2490  *
// 2491  * @return  void
// 2492  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2493 void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
MT_ZdoSendMsgCB:
          CFI Block cfiBlock395 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
        CODE
// 2494 {
        FUNCALL MT_ZdoSendMsgCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
// 2495   uint8 len = pMsg->asduLen + 9;
        MOV     A,R2
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_80:
        ADD     A,#0x9
        MOV     ?V2,A
// 2496   uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
// 2497 
// 2498   if (pBuf != NULL)
        MOV     A,R6
        ORL     A,R7
        JZ      ??MT_ZdoSendMsgCB_0
// 2499   {
// 2500     uint8 *pTmp = pBuf;
// 2501 
// 2502     // Assuming exclusive use of network short addresses.
// 2503     *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
        MOV     A,?V0
        ADD     A,#0x2
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_106:
        MOV     R2,DPL
        LCALL   ??Subroutine77_0 & 0xFFFF
// 2504     *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
// 2505     *pTmp++ = pMsg->wasBroadcast;
??CrossCallReturnLabel_155:
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ??Subroutine78_0 & 0xFFFF
// 2506     *pTmp++ = LO_UINT16(pMsg->clusterID);
??CrossCallReturnLabel_156:
        ADD     A,#0xc
        LCALL   ?Subroutine8 & 0xFFFF
// 2507     *pTmp++ = HI_UINT16(pMsg->clusterID);
// 2508     *pTmp++ = pMsg->SecurityUse;
??CrossCallReturnLabel_153:
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ??Subroutine78_0 & 0xFFFF
// 2509     *pTmp++ = pMsg->TransSeq;
??CrossCallReturnLabel_157:
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ??Subroutine78_0 & 0xFFFF
// 2510     // Skipping asduLen since it can be deduced from the RPC packet length.
// 2511     *pTmp++ = LO_UINT16(pMsg->macDestAddr);
??CrossCallReturnLabel_158:
        ADD     A,#0x11
        LCALL   ?Subroutine8 & 0xFFFF
// 2512     *pTmp++ = HI_UINT16(pMsg->macDestAddr);
// 2513     (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
??CrossCallReturnLabel_154:
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,?V0
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_81:
        MOV     R4,A
        MOV     R5,#0x0
        LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 2514 
// 2515     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2516                                          MT_ZDO_MSG_CB_INCOMING, len, pBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R3,?V2
        MOV     R2,#-0x1
        MOV     R1,#0x45
        LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
// 2517 
// 2518     osal_mem_free(pBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
// 2519   }
// 2520 }
??MT_ZdoSendMsgCB_0:
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock395

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond396 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond397 Using cfiCommon0
          CFI (cfiCond397) Function MT_ZdoSendMsgCB
          CFI (cfiCond397) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond397) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond397) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond397) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond397) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond397) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond397) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond397) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond397) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond397) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond397) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond397) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond397) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond397) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond397) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond397) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond397) CFA_SP SP+-2
          CFI (cfiCond397) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker398 Using cfiCommon1
          CFI (cfiPicker398) NoFunction
          CFI (cfiPicker398) Picker
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond396
          CFI EndBlock cfiCond397
          CFI EndBlock cfiPicker398

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond399 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
          CFI Conditional ??CrossCallReturnLabel_153
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond400 Using cfiCommon0
          CFI (cfiCond400) Function MT_ZdoSendMsgCB
          CFI (cfiCond400) Conditional ??CrossCallReturnLabel_154
          CFI (cfiCond400) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond400) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond400) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond400) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond400) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond400) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond400) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond400) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond400) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond400) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond400) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond400) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond400) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond400) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond400) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond400) CFA_SP SP+-2
          CFI (cfiCond400) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker401 Using cfiCommon1
          CFI (cfiPicker401) NoFunction
          CFI (cfiPicker401) Picker
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_107:
        INC     R2
          CFI EndBlock cfiCond399
          CFI EndBlock cfiCond400
          CFI EndBlock cfiPicker401
        REQUIRE ??Subroutine77_0
        ; // Fall through to label ??Subroutine77_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine77_0:
          CFI Block cfiCond402 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
          CFI Conditional ??CrossCallReturnLabel_155
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond403 Using cfiCommon0
          CFI (cfiCond403) Function MT_ZdoSendMsgCB
          CFI (cfiCond403) Conditional ??CrossCallReturnLabel_153
          CFI (cfiCond403) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond403) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond403) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond403) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond403) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond403) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond403) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond403) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond403) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond403) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond403) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond403) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond403) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond403) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond403) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond403) CFA_SP SP+-2
          CFI (cfiCond403) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond404 Using cfiCommon0
          CFI (cfiCond404) Function MT_ZdoSendMsgCB
          CFI (cfiCond404) Conditional ??CrossCallReturnLabel_154
          CFI (cfiCond404) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond404) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond404) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond404) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond404) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond404) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond404) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond404) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond404) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond404) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond404) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond404) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond404) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond404) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond404) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond404) CFA_SP SP+-2
          CFI (cfiCond404) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker405 Using cfiCommon1
          CFI (cfiPicker405) NoFunction
          CFI (cfiPicker405) Picker
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
          CFI EndBlock cfiCond402
          CFI EndBlock cfiCond403
          CFI EndBlock cfiCond404
          CFI EndBlock cfiPicker405
        REQUIRE ??Subroutine78_0
        ; // Fall through to label ??Subroutine78_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine78_0:
          CFI Block cfiCond406 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
          CFI Conditional ??CrossCallReturnLabel_156
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond407 Using cfiCommon0
          CFI (cfiCond407) Function MT_ZdoSendMsgCB
          CFI (cfiCond407) Conditional ??CrossCallReturnLabel_157
          CFI (cfiCond407) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond407) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond407) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond407) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond407) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond407) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond407) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond407) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond407) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond407) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond407) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond407) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond407) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond407) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond407) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond407) CFA_SP SP+-2
          CFI (cfiCond407) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond408 Using cfiCommon0
          CFI (cfiCond408) Function MT_ZdoSendMsgCB
          CFI (cfiCond408) Conditional ??CrossCallReturnLabel_158
          CFI (cfiCond408) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond408) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond408) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond408) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond408) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond408) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond408) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond408) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond408) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond408) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond408) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond408) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond408) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond408) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond408) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond408) CFA_SP SP+-2
          CFI (cfiCond408) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond409 Using cfiCommon0
          CFI (cfiCond409) Function MT_ZdoSendMsgCB
          CFI (cfiCond409) Conditional ??CrossCallReturnLabel_155
          CFI (cfiCond409) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond409) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond409) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond409) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond409) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond409) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond409) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond409) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond409) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond409) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond409) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond409) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond409) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond409) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond409) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond409) CFA_SP SP+-2
          CFI (cfiCond409) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond410 Using cfiCommon0
          CFI (cfiCond410) Function MT_ZdoSendMsgCB
          CFI (cfiCond410) Conditional ??CrossCallReturnLabel_153
          CFI (cfiCond410) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond410) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond410) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond410) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond410) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond410) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond410) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond410) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond410) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond410) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond410) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond410) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond410) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond410) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond410) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond410) CFA_SP SP+-2
          CFI (cfiCond410) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond411 Using cfiCommon0
          CFI (cfiCond411) Function MT_ZdoSendMsgCB
          CFI (cfiCond411) Conditional ??CrossCallReturnLabel_154
          CFI (cfiCond411) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond411) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond411) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond411) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond411) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond411) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond411) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond411) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond411) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond411) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond411) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond411) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond411) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond411) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond411) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond411) CFA_SP SP+-2
          CFI (cfiCond411) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker412 Using cfiCommon1
          CFI (cfiPicker412) NoFunction
          CFI (cfiPicker412) Picker
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_161:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0
        RET
          CFI EndBlock cfiCond406
          CFI EndBlock cfiCond407
          CFI EndBlock cfiCond408
          CFI EndBlock cfiCond409
          CFI EndBlock cfiCond410
          CFI EndBlock cfiCond411
          CFI EndBlock cfiPicker412

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine56:
          CFI Block cfiCond413 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
          CFI Conditional ??CrossCallReturnLabel_106
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond414 Using cfiCommon0
          CFI (cfiCond414) Function MT_ZdoSendMsgCB
          CFI (cfiCond414) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_153
          CFI (cfiCond414) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond414) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond414) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond414) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond414) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond414) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond414) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond414) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond414) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond414) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond414) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond414) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond414) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond414) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond414) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond414) CFA_SP SP+-4
          CFI (cfiCond414) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond415 Using cfiCommon0
          CFI (cfiCond415) Function MT_ZdoSendMsgCB
          CFI (cfiCond415) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_154
          CFI (cfiCond415) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond415) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond415) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond415) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond415) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond415) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond415) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond415) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond415) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond415) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond415) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond415) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond415) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond415) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond415) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond415) CFA_SP SP+-4
          CFI (cfiCond415) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker416 Using cfiCommon1
          CFI (cfiPicker416) NoFunction
          CFI (cfiPicker416) Picker
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        RET
          CFI EndBlock cfiCond413
          CFI EndBlock cfiCond414
          CFI EndBlock cfiCond415
          CFI EndBlock cfiPicker416

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoInit?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoCommandProcessing?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoNWKAddressRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNWKAddressRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoIEEEAddrRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoIEEEAddrRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoNodeDescRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNodeDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoPowerDescRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoPowerDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoSimpleDescRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoSimpleDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoActiveEpRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoActiveEpRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoMatchDescRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoMatchDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoComplexDescRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoComplexDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoUserDescRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoUserDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoEndDevAnnce?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoEndDevAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoUserDescSet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoUserDescSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoServiceDiscRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoServiceDiscRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoEndDeviceTimeoutRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoEndDeviceTimeoutRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoEndDevBindRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoEndDevBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoBindRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoUnbindRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoUnbindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoSendData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoSendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoNwkAddrOfInterestReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNwkAddrOfInterestReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoStartupFromApp?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoStartupFromApp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoNetworkDiscoveryReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNetworkDiscoveryReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoJoinReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoJoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoNwkDiscoveryCnfCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNwkDiscoveryCnfCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoBeaconIndCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoBeaconIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoJoinCnfCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoJoinCnfCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoRegisterForZDOMsg?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoRegisterForZDOMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoRemoveRegisteredCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoRemoveRegisteredCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoSendMsgCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoSendMsgCB

        END
// 2521 
// 2522 #if defined ( MT_ZDO_EXTENSIONS )
// 2523 /***************************************************************************************************
// 2524  * @fn          MT_ZdoSecUpdateNwkKey
// 2525  *
// 2526  * @brief       Handle the ZDO Security Update Network Key extension message
// 2527  *
// 2528  * @param       pBuf - Pointer to the received message data.
// 2529  *
// 2530  * @return      NULL
// 2531  ***************************************************************************************************/
// 2532 static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf )
// 2533 {
// 2534   uint16 dstAddr;
// 2535   uint8 keySeqNum;
// 2536   uint8 status;
// 2537 
// 2538   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2539   
// 2540   dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2541   pBuf += 2;
// 2542   keySeqNum = *pBuf++;
// 2543 
// 2544   status = ZDSecMgrUpdateNwkKey( pBuf, keySeqNum, dstAddr );
// 2545 
// 2546   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2547                                        MT_ZDO_EXT_UPDATE_NWK_KEY, 1, &status );
// 2548 }
// 2549 
// 2550 /***************************************************************************************************
// 2551  * @fn          MT_ZdoSecSwitchNwkKey
// 2552  *
// 2553  * @brief       Handle the ZDO Security Switch Network Key extension message
// 2554  *
// 2555  * @param       pBuf - Pointer to the received message data.
// 2556  *
// 2557  * @return      NULL
// 2558  ***************************************************************************************************/
// 2559 static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf )
// 2560 {
// 2561   uint16 dstAddr;
// 2562   uint8 keySeqNum;
// 2563   uint8 status;
// 2564 
// 2565   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2566   
// 2567   dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2568   pBuf += 2;
// 2569   keySeqNum = *pBuf++;
// 2570 
// 2571   status = ZDSecMgrSwitchNwkKey( keySeqNum, dstAddr );
// 2572 
// 2573   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2574                                        MT_ZDO_EXT_SWITCH_NWK_KEY, 1, &status );
// 2575 }
// 2576 
// 2577 /***************************************************************************************************
// 2578  * @fn          MT_ZdoSecAddLinkKey
// 2579  *
// 2580  * @brief       Handle the ZDO Security Add Link Key extension message
// 2581  *
// 2582  * @param       pBuf - Pointer to the received message data.
// 2583  *
// 2584  * @return      NULL
// 2585  ***************************************************************************************************/
// 2586 static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
// 2587 {
// 2588   uint16 shortAddr;
// 2589   uint8 *pExtAddr;
// 2590   uint8 status;
// 2591 
// 2592   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2593   
// 2594   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2595   pBuf += 2;
// 2596   pExtAddr = pBuf;
// 2597   pBuf += Z_EXTADDR_LEN;
// 2598 
// 2599   status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
// 2600 
// 2601   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2602                                        MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
// 2603 }
// 2604 
// 2605 /***************************************************************************************************
// 2606  * @fn          MT_ZdoSecEntryLookupExt
// 2607  *
// 2608  * @brief       Handle the ZDO Security Entry Lookup Extended extension message
// 2609  *
// 2610  * @param       pBuf - Pointer to the received message data.
// 2611  *
// 2612  * @return      NULL
// 2613  ***************************************************************************************************/
// 2614 static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
// 2615 {
// 2616   ZDSecMgrEntry_t *pEntry = NULL;
// 2617   uint8 buf[6] = {0};
// 2618 
// 2619   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2620   
// 2621   // lookup entry index for specified EXT address
// 2622   buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
// 2623   if ( pEntry )
// 2624   {
// 2625     buf[1] = LO_UINT16( pEntry->ami );
// 2626     buf[2] = HI_UINT16( pEntry->ami );
// 2627     buf[3] = LO_UINT16( pEntry->keyNvId );
// 2628     buf[4] = HI_UINT16( pEntry->keyNvId );
// 2629     buf[5] = (uint8)pEntry->authenticateOption;
// 2630   }
// 2631 
// 2632   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2633                                        MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
// 2634 }
// 2635 
// 2636 /***************************************************************************************************
// 2637  * @fn          MT_ZdoSecDeviceRemove
// 2638  *
// 2639  * @brief       Handle the ZDO Security Remove Device extension message
// 2640  *
// 2641  * @param       pBuf - Pointer to the received message data.
// 2642  *
// 2643  * @return      NULL
// 2644  ***************************************************************************************************/
// 2645 static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
// 2646 {
// 2647   ZStatus_t status;
// 2648 
// 2649   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2650 
// 2651   // lookup entry index for specified EXT address
// 2652   status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
// 2653 
// 2654   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2655                                        MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
// 2656 }
// 2657 
// 2658 /***************************************************************************************************
// 2659  * @fn          MT_ZdoExtRouteDisc
// 2660  *
// 2661  * @brief       Handle the ZDO Route Discovery extension message
// 2662  *
// 2663  * @param       pBuf - Pointer to the received message data.
// 2664  *
// 2665  * @return      NULL
// 2666  ***************************************************************************************************/
// 2667 static void MT_ZdoExtRouteDisc( uint8 *pBuf )
// 2668 {
// 2669   ZStatus_t status;
// 2670   uint16 dstAddr;
// 2671 
// 2672   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2673 
// 2674   dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2675 
// 2676   status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
// 2677 
// 2678 
// 2679   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2680                                        MT_ZDO_EXT_ROUTE_DISC, 1, &status );
// 2681 }
// 2682 
// 2683 /***************************************************************************************************
// 2684  * @fn          MT_ZdoExtRouteCheck
// 2685  *
// 2686  * @brief       Handle the ZDO Route Check extension message
// 2687  *
// 2688  * @param       pBuf - Pointer to the received message data.
// 2689  *
// 2690  * @return      NULL
// 2691  ***************************************************************************************************/
// 2692 static void MT_ZdoExtRouteCheck( uint8 *pBuf )
// 2693 {
// 2694   ZStatus_t status;
// 2695   uint16 dstAddr;
// 2696 
// 2697   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2698   
// 2699   dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2700 
// 2701   status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
// 2702 
// 2703   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2704                                        MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
// 2705 }
// 2706 
// 2707 /***************************************************************************************************
// 2708  * @fn          MT_ZdoExtRemoveGroup
// 2709  *
// 2710  * @brief       Handle the ZDO extension Remove Group message
// 2711  *
// 2712  * @param       pBuf - Pointer to the received message data.
// 2713  *
// 2714  * @return      NULL
// 2715  ***************************************************************************************************/
// 2716 static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
// 2717 {
// 2718   ZStatus_t status;
// 2719   uint8 endpoint;
// 2720   uint16 groupID;
// 2721 
// 2722   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2723   
// 2724   endpoint = *pBuf++;
// 2725   groupID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2726 
// 2727   if ( aps_RemoveGroup( endpoint, groupID ) )
// 2728   {
// 2729     status = ZSuccess;
// 2730   }
// 2731   else
// 2732   {
// 2733     status = ZFailure;
// 2734   }
// 2735 
// 2736   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2737                                        MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
// 2738 }
// 2739 
// 2740 /***************************************************************************************************
// 2741  * @fn          MT_ZdoExtRemoveAllGroup
// 2742  *
// 2743  * @brief       Handle the ZDO extension Remove All Groups message
// 2744  *
// 2745  * @param       pBuf - Pointer to the received message data.
// 2746  *
// 2747  * @return      NULL
// 2748  ***************************************************************************************************/
// 2749 static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
// 2750 {
// 2751   ZStatus_t status = ZSuccess;
// 2752 
// 2753   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2754   
// 2755   aps_RemoveAllGroup( *pBuf );
// 2756 
// 2757   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2758                                        MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
// 2759 }
// 2760 
// 2761 /***************************************************************************************************
// 2762  * @fn          MT_ZdoExtFindAllGroupsEndpoint
// 2763  *
// 2764  * @brief       Handle the ZDO extension Find All Groups for Endpoint message
// 2765  *
// 2766  * @param       pBuf - Pointer to the received message data.
// 2767  *
// 2768  * @return      NULL
// 2769  ***************************************************************************************************/
// 2770 static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
// 2771 {
// 2772   uint16 groupList[ APS_MAX_GROUPS ];
// 2773   uint8 groups;
// 2774   uint8 msgLen;
// 2775   uint8 *pMsg;
// 2776 
// 2777   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2778   
// 2779   groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
// 2780 
// 2781   msgLen = 1 + (2 * groups);
// 2782   pMsg = osal_mem_alloc( msgLen );
// 2783   if ( pMsg )
// 2784   {
// 2785     uint8 x;
// 2786     uint8 *pBuf = pMsg;
// 2787 
// 2788     *pBuf++ = groups;
// 2789     for ( x = 0; x < groups; x++ )
// 2790     {
// 2791       *pBuf++ = LO_UINT16( groupList[x] );
// 2792       *pBuf++ = HI_UINT16( groupList[x] );
// 2793     }
// 2794 
// 2795     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2796                                        MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
// 2797     osal_mem_free( pMsg );
// 2798   }
// 2799   else
// 2800   {
// 2801     groups = 0;
// 2802     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2803                                        MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
// 2804   }
// 2805 }
// 2806 
// 2807 /***************************************************************************************************
// 2808  * @fn          MT_ZdoExtFindGroup
// 2809  *
// 2810  * @brief       Handle the ZDO extension Find Group message
// 2811  *
// 2812  * @param       pBuf - Pointer to the received message data.
// 2813  *
// 2814  * @return      NULL
// 2815  ***************************************************************************************************/
// 2816 static void MT_ZdoExtFindGroup( uint8 *pBuf )
// 2817 {
// 2818   uint8 endpoint;
// 2819   uint16 groupID;
// 2820   aps_Group_t *pGroup;
// 2821   uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
// 2822 
// 2823   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2824   
// 2825   endpoint = *pBuf++;
// 2826   groupID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2827 
// 2828   pGroup = aps_FindGroup( endpoint, groupID );
// 2829   if ( pGroup  )
// 2830   {
// 2831     buf[0] = ZSuccess;
// 2832     buf[1] = LO_UINT16( pGroup->ID );
// 2833     buf[2] = HI_UINT16( pGroup->ID );
// 2834     buf[3] = pGroup->name[0];
// 2835     osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
// 2836   }
// 2837   else
// 2838   {
// 2839     buf[0] = ZFailure;
// 2840   }
// 2841 
// 2842   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2843                       MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
// 2844 }
// 2845 
// 2846 /***************************************************************************************************
// 2847  * @fn          MT_ZdoExtAddGroup
// 2848  *
// 2849  * @brief       Handle the ZDO extension Add Group message
// 2850  *
// 2851  * @param       pBuf - Pointer to the received message data.
// 2852  *
// 2853  * @return      NULL
// 2854  ***************************************************************************************************/
// 2855 static void MT_ZdoExtAddGroup( uint8 *pBuf )
// 2856 {
// 2857   ZStatus_t status = ZSuccess;
// 2858   aps_Group_t group = {0};
// 2859   uint8 endpoint;
// 2860 
// 2861   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2862 
// 2863   endpoint = *pBuf++;
// 2864   group.ID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2865   group.name[0] = pBuf[2];
// 2866   if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
// 2867   {
// 2868     group.name[0] = (APS_GROUP_NAME_LEN-1);
// 2869   }
// 2870 
// 2871   if (group.name[0] > 0 )
// 2872   {
// 2873     osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
// 2874   }
// 2875 
// 2876   status = aps_AddGroup( endpoint, &group );
// 2877 
// 2878   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2879                                        MT_ZDO_EXT_ADD_GROUP, 1, &status );
// 2880 }
// 2881 
// 2882 /***************************************************************************************************
// 2883  * @fn          MT_ZdoExtCountAllGroups
// 2884  *
// 2885  * @brief       Handle the ZDO extension Count All Groups message
// 2886  *
// 2887  * @param       pBuf - Pointer to the received message data.
// 2888  *
// 2889  * @return      NULL
// 2890  ***************************************************************************************************/
// 2891 static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
// 2892 {
// 2893   ZStatus_t status = 0;
// 2894 
// 2895   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2896 
// 2897   status = (ZStatus_t)aps_CountAllGroups();
// 2898 
// 2899   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2900                                        MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
// 2901 }
// 2902 
// 2903 
// 2904 /***************************************************************************************************
// 2905  * @fn          MT_ZdoExtRxIdle
// 2906  *
// 2907  * @brief       Handle the ZDO extension Get/Set RxOnIdle to ZMac message 
// 2908  *
// 2909  * @param       pBuf - Pointer to the received message data.
// 2910  *
// 2911  * @return      NULL
// 2912  ***************************************************************************************************/
// 2913 static void MT_ZdoExtRxIdle( uint8 *pBuf )
// 2914 {
// 2915   uint8 setFlag;
// 2916   uint8 setValue;
// 2917   
// 2918   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2919 
// 2920   setFlag = *pBuf++;
// 2921   setValue = *pBuf++;
// 2922   
// 2923   if ( setFlag )
// 2924   {
// 2925     ZMacSetReq( ZMacRxOnIdle, &setValue );
// 2926   }
// 2927   else
// 2928   {
// 2929     ZMacGetReq( ZMacRxOnIdle, &setValue );
// 2930   }
// 2931  
// 2932   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2933                                        MT_ZDO_EXT_RX_IDLE, 1, &setValue );
// 2934 }
// 2935 
// 2936 /***************************************************************************************************
// 2937  * @fn          MT_ZdoExtNwkInfo
// 2938  *
// 2939  * @brief       Handle the ZDO extension Network Info Request message 
// 2940  *
// 2941  * @param       pBuf - Pointer to the received message data.
// 2942  *
// 2943  * @return      NULL
// 2944  ***************************************************************************************************/
// 2945 static void MT_ZdoExtNwkInfo( uint8 *pBuf )
// 2946 {
// 2947   uint8 buf[24];
// 2948   uint8 *pMsg;
// 2949   
// 2950   pMsg = buf;
// 2951   
// 2952   *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
// 2953   *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
// 2954   
// 2955   *pMsg++ = devState;
// 2956   *pMsg++ = LO_UINT16( _NIB.nwkPanId );
// 2957   *pMsg++ = HI_UINT16( _NIB.nwkPanId );
// 2958   *pMsg++ = LO_UINT16( _NIB.nwkCoordAddress );
// 2959   *pMsg++ = HI_UINT16( _NIB.nwkCoordAddress );
// 2960   osal_memcpy( pMsg, _NIB.extendedPANID, 8 );
// 2961   pMsg += 8;
// 2962   osal_memcpy( pMsg, _NIB.nwkCoordExtAddress, 8 );
// 2963   pMsg += 8;
// 2964   *pMsg++ = _NIB.nwkLogicalChannel;
// 2965  
// 2966   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2967                                        MT_ZDO_EXT_NWK_INFO, 24, buf );
// 2968 }
// 2969 
// 2970 /***************************************************************************************************
// 2971  * @fn          MT_ZdoExtSecApsRemoveReq
// 2972  *
// 2973  * @brief       Handle the ZDO extension Security Manager APS Remove Request message
// 2974  *
// 2975  * @param       pBuf - Pointer to the received message data.
// 2976  *
// 2977  * @return      NULL
// 2978  ***************************************************************************************************/
// 2979 static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf )
// 2980 {
// 2981   ZStatus_t status = 0;
// 2982   uint16 parentAddr;
// 2983   uint16 nwkAddr;
// 2984   
// 2985   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2986 
// 2987   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 2988   {
// 2989     parentAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2990     pBuf += 2;
// 2991     
// 2992     nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2993     pBuf += 2;
// 2994     
// 2995     status = ZDSecMgrAPSRemove( nwkAddr, pBuf, parentAddr );
// 2996   }
// 2997   else
// 2998   {
// 2999     status = ZUnsupportedMode;
// 3000   }
// 3001   
// 3002   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 3003                                        MT_ZDO_EXT_SEC_APS_REMOVE_REQ, 1, &status );
// 3004 }
// 3005 
// 3006 /***************************************************************************************************
// 3007  * @fn          MT_ZdoExtSetParams
// 3008  *
// 3009  * @brief       Set Parameters not settable through NV.
// 3010  *
// 3011  * @param       pBuf - Pointer to the received message data.
// 3012  *
// 3013  * @return      NULL
// 3014  ***************************************************************************************************/
// 3015 static void MT_ZdoExtSetParams( uint8 *pBuf )
// 3016 {
// 3017   ZStatus_t status = ZSuccess;
// 3018   uint8 useMultiCast;
// 3019   
// 3020   pBuf += MT_RPC_FRAME_HDR_SZ;
// 3021   
// 3022   // Is the useMulticast in this message
// 3023   useMultiCast = *pBuf++;
// 3024   if ( useMultiCast & 0x80 )
// 3025   {
// 3026     if ( useMultiCast & 0x7F )
// 3027     {
// 3028       _NIB.nwkUseMultiCast = TRUE;
// 3029     }
// 3030     else
// 3031     {
// 3032       _NIB.nwkUseMultiCast = FALSE;
// 3033     }
// 3034   }
// 3035   
// 3036   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 3037                                        MT_ZDO_EXT_SET_PARAMS, 1, &status );
// 3038 }
// 3039 #endif // MT_ZDO_EXTENSIONS
// 3040 
// 3041 #endif   /*ZDO Command Processing in MT*/
// 3042 /***************************************************************************************************
// 3043 ***************************************************************************************************/
// 
// 3 777 bytes in segment BANKED_CODE
//   174 bytes in segment BANK_RELAYS
//     7 bytes in segment XDATA_Z
// 
// 3 951 bytes of CODE  memory
//     7 bytes of XDATA memory
//
//Errors: none
//Warnings: none
